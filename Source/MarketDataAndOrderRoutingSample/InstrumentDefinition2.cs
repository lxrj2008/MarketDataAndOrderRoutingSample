// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/instrument_definition_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InstrumentDefinition2 {

  /// <summary>Holder for reflection information generated from WebAPI/instrument_definition_2.proto</summary>
  public static partial class InstrumentDefinition2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/instrument_definition_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstrumentDefinition2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRXZWJBUEkvaW5zdHJ1bWVudF9kZWZpbml0aW9uXzIucHJvdG8SF2luc3Ry",
            "dW1lbnRfZGVmaW5pdGlvbl8yGhdXZWJBUEkvbWV0YWRhdGFfMi5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKQAgoUSW5zdHJ1bWVu",
            "dERlZmluaXRpb24SIgoadW5kZXJseWluZ19jb250cmFjdF9zeW1ib2wYASAB",
            "KAkSGwoTY3FnX2luc3RydW1lbnRfdHlwZRgCIAEoDRI2ChJtYXR1cml0eV90",
            "aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiAK",
            "GGV4Y2hhbmdlX2luc3RydW1lbnRfdHlwZRgEIAEoCRIZChFzZXR0bGVtZW50",
            "X21ldGhvZBgFIAEoDRIOCgZzdHJpa2UYBiABKAESFgoOZXhlcmNpc2Vfc3R5",
            "bGUYByABKA0SGgoScHJpY2luZ19jb252ZW50aW9uGAggASgNIn8KG0luc3Ry",
            "dW1lbnREZWZpbml0aW9uUmVxdWVzdBJMChVpbnN0cnVtZW50X2RlZmluaXRp",
            "b24YASABKAsyLS5pbnN0cnVtZW50X2RlZmluaXRpb25fMi5JbnN0cnVtZW50",
            "RGVmaW5pdGlvbhISCgphY2NvdW50X2lkGAIgASgRIlUKGkluc3RydW1lbnRE",
            "ZWZpbml0aW9uUmVwb3J0EjcKEWNvbnRyYWN0X21ldGFkYXRhGAEgASgLMhwu",
            "bWV0YWRhdGFfMi5Db250cmFjdE1ldGFkYXRh"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Metadata2.Metadata2Reflection.Descriptor, global::Google.Protobuf.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InstrumentDefinition2.InstrumentDefinition), global::InstrumentDefinition2.InstrumentDefinition.Parser, new[]{ "UnderlyingContractSymbol", "CqgInstrumentType", "MaturityTimestamp", "ExchangeInstrumentType", "SettlementMethod", "Strike", "ExerciseStyle", "PricingConvention" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InstrumentDefinition2.InstrumentDefinitionRequest), global::InstrumentDefinition2.InstrumentDefinitionRequest.Parser, new[]{ "InstrumentDefinition", "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InstrumentDefinition2.InstrumentDefinitionReport), global::InstrumentDefinition2.InstrumentDefinitionReport.Parser, new[]{ "ContractMetadata" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Message describing a user-defined (non-strategy) instrument, e.g. a flex option.
  /// Which attributes may be specified, and in what combination, is exchange-specific.
  /// Contact CQG for more information about supported exchanges, attributes, and usage conventions.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentDefinition : pb::IMessage<InstrumentDefinition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentDefinition> _parser = new pb::MessageParser<InstrumentDefinition>(() => new InstrumentDefinition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InstrumentDefinition2.InstrumentDefinition2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition(InstrumentDefinition other) : this() {
      _hasBits0 = other._hasBits0;
      underlyingContractSymbol_ = other.underlyingContractSymbol_;
      cqgInstrumentType_ = other.cqgInstrumentType_;
      maturityTimestamp_ = other.maturityTimestamp_ != null ? other.maturityTimestamp_.Clone() : null;
      exchangeInstrumentType_ = other.exchangeInstrumentType_;
      settlementMethod_ = other.settlementMethod_;
      strike_ = other.strike_;
      exerciseStyle_ = other.exerciseStyle_;
      pricingConvention_ = other.pricingConvention_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinition Clone() {
      return new InstrumentDefinition(this);
    }

    /// <summary>Field number for the "underlying_contract_symbol" field.</summary>
    public const int UnderlyingContractSymbolFieldNumber = 1;
    private readonly static string UnderlyingContractSymbolDefaultValue = "";

    private string underlyingContractSymbol_;
    /// <summary>
    /// Symbol of the underlying contract, in exchange-specific format.
    /// This is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnderlyingContractSymbol {
      get { return underlyingContractSymbol_ ?? UnderlyingContractSymbolDefaultValue; }
      set {
        underlyingContractSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "underlying_contract_symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderlyingContractSymbol {
      get { return underlyingContractSymbol_ != null; }
    }
    /// <summary>Clears the value of the "underlying_contract_symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderlyingContractSymbol() {
      underlyingContractSymbol_ = null;
    }

    /// <summary>Field number for the "cqg_instrument_type" field.</summary>
    public const int CqgInstrumentTypeFieldNumber = 2;
    private readonly static uint CqgInstrumentTypeDefaultValue = 0;

    private uint cqgInstrumentType_;
    /// <summary>
    /// CQG base instrument type.
    /// One of metadata_2.CQGInstrumentType enums.
    /// This is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CqgInstrumentType {
      get { if ((_hasBits0 & 1) != 0) { return cqgInstrumentType_; } else { return CqgInstrumentTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cqgInstrumentType_ = value;
      }
    }
    /// <summary>Gets whether the "cqg_instrument_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCqgInstrumentType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cqg_instrument_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCqgInstrumentType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maturity_timestamp" field.</summary>
    public const int MaturityTimestampFieldNumber = 3;
    private global::Google.Protobuf.Timestamp maturityTimestamp_;
    /// <summary>
    /// Maturity timestamp.
    /// (local exchange date in timestamp format, use date part only).
    /// This is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp MaturityTimestamp {
      get { return maturityTimestamp_; }
      set {
        maturityTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "exchange_instrument_type" field.</summary>
    public const int ExchangeInstrumentTypeFieldNumber = 4;
    private readonly static string ExchangeInstrumentTypeDefaultValue = "";

    private string exchangeInstrumentType_;
    /// <summary>
    /// Exchange-specific instrument type, if required by exchange.
    /// Allowed type strings depend on exchange convention.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeInstrumentType {
      get { return exchangeInstrumentType_ ?? ExchangeInstrumentTypeDefaultValue; }
      set {
        exchangeInstrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exchange_instrument_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchangeInstrumentType {
      get { return exchangeInstrumentType_ != null; }
    }
    /// <summary>Clears the value of the "exchange_instrument_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchangeInstrumentType() {
      exchangeInstrumentType_ = null;
    }

    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 5;
    private readonly static uint SettlementMethodDefaultValue = 0;

    private uint settlementMethod_;
    /// <summary>
    /// Settlement method, if required by exchange.
    /// One of metadata_2.SettlementMethod enums.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SettlementMethod {
      get { if ((_hasBits0 & 2) != 0) { return settlementMethod_; } else { return SettlementMethodDefaultValue; } }
      set {
        _hasBits0 |= 2;
        settlementMethod_ = value;
      }
    }
    /// <summary>Gets whether the "settlement_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSettlementMethod {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "settlement_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSettlementMethod() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 6;
    private readonly static double StrikeDefaultValue = 0D;

    private double strike_;
    /// <summary>
    /// Option strike value, for options only.
    /// Value will be passed as-is to exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { if ((_hasBits0 & 4) != 0) { return strike_; } else { return StrikeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        strike_ = value;
      }
    }
    /// <summary>Gets whether the "strike" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrike {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "strike" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrike() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "exercise_style" field.</summary>
    public const int ExerciseStyleFieldNumber = 7;
    private readonly static uint ExerciseStyleDefaultValue = 0;

    private uint exerciseStyle_;
    /// <summary>
    /// Exercise style, for options only, if required by exchange.
    /// One of metadata_2.ExerciseStyle enums.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExerciseStyle {
      get { if ((_hasBits0 & 8) != 0) { return exerciseStyle_; } else { return ExerciseStyleDefaultValue; } }
      set {
        _hasBits0 |= 8;
        exerciseStyle_ = value;
      }
    }
    /// <summary>Gets whether the "exercise_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExerciseStyle {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "exercise_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExerciseStyle() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pricing_convention" field.</summary>
    public const int PricingConventionFieldNumber = 8;
    private readonly static uint PricingConventionDefaultValue = 0;

    private uint pricingConvention_;
    /// <summary>
    /// Pricing convention, if required by exchange.
    /// One of metadata_2.PricingConvention enums.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PricingConvention {
      get { if ((_hasBits0 & 16) != 0) { return pricingConvention_; } else { return PricingConventionDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pricingConvention_ = value;
      }
    }
    /// <summary>Gets whether the "pricing_convention" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPricingConvention {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pricing_convention" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPricingConvention() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnderlyingContractSymbol != other.UnderlyingContractSymbol) return false;
      if (CqgInstrumentType != other.CqgInstrumentType) return false;
      if (!object.Equals(MaturityTimestamp, other.MaturityTimestamp)) return false;
      if (ExchangeInstrumentType != other.ExchangeInstrumentType) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (ExerciseStyle != other.ExerciseStyle) return false;
      if (PricingConvention != other.PricingConvention) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUnderlyingContractSymbol) hash ^= UnderlyingContractSymbol.GetHashCode();
      if (HasCqgInstrumentType) hash ^= CqgInstrumentType.GetHashCode();
      if (maturityTimestamp_ != null) hash ^= MaturityTimestamp.GetHashCode();
      if (HasExchangeInstrumentType) hash ^= ExchangeInstrumentType.GetHashCode();
      if (HasSettlementMethod) hash ^= SettlementMethod.GetHashCode();
      if (HasStrike) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (HasExerciseStyle) hash ^= ExerciseStyle.GetHashCode();
      if (HasPricingConvention) hash ^= PricingConvention.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUnderlyingContractSymbol) {
        output.WriteRawTag(10);
        output.WriteString(UnderlyingContractSymbol);
      }
      if (HasCqgInstrumentType) {
        output.WriteRawTag(16);
        output.WriteUInt32(CqgInstrumentType);
      }
      if (maturityTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaturityTimestamp);
      }
      if (HasExchangeInstrumentType) {
        output.WriteRawTag(34);
        output.WriteString(ExchangeInstrumentType);
      }
      if (HasSettlementMethod) {
        output.WriteRawTag(40);
        output.WriteUInt32(SettlementMethod);
      }
      if (HasStrike) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (HasExerciseStyle) {
        output.WriteRawTag(56);
        output.WriteUInt32(ExerciseStyle);
      }
      if (HasPricingConvention) {
        output.WriteRawTag(64);
        output.WriteUInt32(PricingConvention);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUnderlyingContractSymbol) {
        output.WriteRawTag(10);
        output.WriteString(UnderlyingContractSymbol);
      }
      if (HasCqgInstrumentType) {
        output.WriteRawTag(16);
        output.WriteUInt32(CqgInstrumentType);
      }
      if (maturityTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaturityTimestamp);
      }
      if (HasExchangeInstrumentType) {
        output.WriteRawTag(34);
        output.WriteString(ExchangeInstrumentType);
      }
      if (HasSettlementMethod) {
        output.WriteRawTag(40);
        output.WriteUInt32(SettlementMethod);
      }
      if (HasStrike) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (HasExerciseStyle) {
        output.WriteRawTag(56);
        output.WriteUInt32(ExerciseStyle);
      }
      if (HasPricingConvention) {
        output.WriteRawTag(64);
        output.WriteUInt32(PricingConvention);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUnderlyingContractSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingContractSymbol);
      }
      if (HasCqgInstrumentType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CqgInstrumentType);
      }
      if (maturityTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturityTimestamp);
      }
      if (HasExchangeInstrumentType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeInstrumentType);
      }
      if (HasSettlementMethod) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SettlementMethod);
      }
      if (HasStrike) {
        size += 1 + 8;
      }
      if (HasExerciseStyle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExerciseStyle);
      }
      if (HasPricingConvention) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PricingConvention);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentDefinition other) {
      if (other == null) {
        return;
      }
      if (other.HasUnderlyingContractSymbol) {
        UnderlyingContractSymbol = other.UnderlyingContractSymbol;
      }
      if (other.HasCqgInstrumentType) {
        CqgInstrumentType = other.CqgInstrumentType;
      }
      if (other.maturityTimestamp_ != null) {
        if (maturityTimestamp_ == null) {
          MaturityTimestamp = new global::Google.Protobuf.Timestamp();
        }
        MaturityTimestamp.MergeFrom(other.MaturityTimestamp);
      }
      if (other.HasExchangeInstrumentType) {
        ExchangeInstrumentType = other.ExchangeInstrumentType;
      }
      if (other.HasSettlementMethod) {
        SettlementMethod = other.SettlementMethod;
      }
      if (other.HasStrike) {
        Strike = other.Strike;
      }
      if (other.HasExerciseStyle) {
        ExerciseStyle = other.ExerciseStyle;
      }
      if (other.HasPricingConvention) {
        PricingConvention = other.PricingConvention;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UnderlyingContractSymbol = input.ReadString();
            break;
          }
          case 16: {
            CqgInstrumentType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (maturityTimestamp_ == null) {
              MaturityTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(MaturityTimestamp);
            break;
          }
          case 34: {
            ExchangeInstrumentType = input.ReadString();
            break;
          }
          case 40: {
            SettlementMethod = input.ReadUInt32();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 56: {
            ExerciseStyle = input.ReadUInt32();
            break;
          }
          case 64: {
            PricingConvention = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UnderlyingContractSymbol = input.ReadString();
            break;
          }
          case 16: {
            CqgInstrumentType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (maturityTimestamp_ == null) {
              MaturityTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(MaturityTimestamp);
            break;
          }
          case 34: {
            ExchangeInstrumentType = input.ReadString();
            break;
          }
          case 40: {
            SettlementMethod = input.ReadUInt32();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 56: {
            ExerciseStyle = input.ReadUInt32();
            break;
          }
          case 64: {
            PricingConvention = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to define a non-strategy as a contract.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentDefinitionRequest : pb::IMessage<InstrumentDefinitionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentDefinitionRequest> _parser = new pb::MessageParser<InstrumentDefinitionRequest>(() => new InstrumentDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InstrumentDefinition2.InstrumentDefinition2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionRequest(InstrumentDefinitionRequest other) : this() {
      _hasBits0 = other._hasBits0;
      instrumentDefinition_ = other.instrumentDefinition_ != null ? other.instrumentDefinition_.Clone() : null;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionRequest Clone() {
      return new InstrumentDefinitionRequest(this);
    }

    /// <summary>Field number for the "instrument_definition" field.</summary>
    public const int InstrumentDefinitionFieldNumber = 1;
    private global::InstrumentDefinition2.InstrumentDefinition instrumentDefinition_;
    /// <summary>
    /// Instrument to define.
    /// This is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::InstrumentDefinition2.InstrumentDefinition InstrumentDefinition {
      get { return instrumentDefinition_; }
      set {
        instrumentDefinition_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Account ID in CQG trade routing system.
    /// Some exchanges require an account ID in the process of defining an instrument.
    /// For those exchanges this is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstrumentDefinition, other.InstrumentDefinition)) return false;
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrumentDefinition_ != null) hash ^= InstrumentDefinition.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrumentDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstrumentDefinition);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrumentDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstrumentDefinition);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrumentDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentDefinition);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.instrumentDefinition_ != null) {
        if (instrumentDefinition_ == null) {
          InstrumentDefinition = new global::InstrumentDefinition2.InstrumentDefinition();
        }
        InstrumentDefinition.MergeFrom(other.InstrumentDefinition);
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrumentDefinition_ == null) {
              InstrumentDefinition = new global::InstrumentDefinition2.InstrumentDefinition();
            }
            input.ReadMessage(InstrumentDefinition);
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrumentDefinition_ == null) {
              InstrumentDefinition = new global::InstrumentDefinition2.InstrumentDefinition();
            }
            input.ReadMessage(InstrumentDefinition);
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report of the contract metadata assigned to the instrument.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentDefinitionReport : pb::IMessage<InstrumentDefinitionReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentDefinitionReport> _parser = new pb::MessageParser<InstrumentDefinitionReport>(() => new InstrumentDefinitionReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentDefinitionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InstrumentDefinition2.InstrumentDefinition2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionReport(InstrumentDefinitionReport other) : this() {
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDefinitionReport Clone() {
      return new InstrumentDefinitionReport(this);
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 1;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Assigned instrument metadata.
    /// This is a required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentDefinitionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentDefinitionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentDefinitionReport other) {
      if (other == null) {
        return;
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
