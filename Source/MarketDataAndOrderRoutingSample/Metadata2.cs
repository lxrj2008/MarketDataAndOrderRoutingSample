// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/metadata_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Metadata2 {

  /// <summary>Holder for reflection information generated from WebAPI/metadata_2.proto</summary>
  public static partial class Metadata2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/metadata_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Metadata2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdXZWJBUEkvbWV0YWRhdGFfMi5wcm90bxIKbWV0YWRhdGFfMhodV2ViQVBJ",
            "L21ldGFkYXRhX2FkbWluXzIucHJvdG8aIldlYkFQSS9zdHJhdGVneV9kZWZp",
            "bml0aW9uXzIucHJvdG8aFGNvbW1vbi9kZWNpbWFsLnByb3RvGhVjb21tb24v",
            "c2hhcmVkXzEucHJvdG8iMAoXU3ltYm9sUmVzb2x1dGlvblJlcXVlc3QSDgoG",
            "c3ltYm9sGAEgASgJKgUIZBDIASJiChZTeW1ib2xSZXNvbHV0aW9uUmVwb3J0",
            "EjcKEWNvbnRyYWN0X21ldGFkYXRhGAEgAigLMhwubWV0YWRhdGFfMi5Db250",
            "cmFjdE1ldGFkYXRhEg8KB2RlbGV0ZWQYAiABKAgiLgoXQ29udHJhY3RNZXRh",
            "ZGF0YVJlcXVlc3QSEwoLY29udHJhY3RfaWQYASACKA0iUQoWQ29udHJhY3RN",
            "ZXRhZGF0YVJlcG9ydBI3ChFjb250cmFjdF9tZXRhZGF0YRgBIAEoCzIcLm1l",
            "dGFkYXRhXzIuQ29udHJhY3RNZXRhZGF0YSJQCg9UaWNrU2l6ZUJ5UHJpY2US",
            "EQoJdGlja19zaXplGAEgAigBEhIKCnRpY2tfdmFsdWUYAiACKAESFgoOYm91",
            "bmRhcnlfcHJpY2UYAyACKAEiUQocVGlja1NpemVCeURhdGVUaWxsRXhwaXJh",
            "dGlvbhIKCgJpZBgBIAIoDRIRCgl0aWNrX3NpemUYAiACKAESEgoKdGlja192",
            "YWx1ZRgDIAIoASJbChJDb252ZXJzaW9uTWV0YWRhdGESIQoZY3VycmVuY3lf",
            "cmF0ZV9jb250cmFjdF9pZBgBIAEoDRIiChpjdXJyZW5jeV9oZWRnZV9jb250",
            "cmFjdF9pZBgCIAEoDSLYEgoQQ29udHJhY3RNZXRhZGF0YRITCgtjb250cmFj",
            "dF9pZBgBIAIoDRIXCg9jb250cmFjdF9zeW1ib2wYAiACKAkSGwoTY3FnX2Nv",
            "bnRyYWN0X3N5bWJvbBhGIAEoCRIbChNjb3JyZWN0X3ByaWNlX3NjYWxlGAMg",
            "AigBEhsKE2Rpc3BsYXlfcHJpY2Vfc2NhbGUYBCACKA0SNgoqb2Jzb2xldGVf",
            "ZGlzY3JldGlvbmFyeV9kaXNwbGF5X3ByaWNlX3NjYWxlGCUgASgNQgIYARIT",
            "CgtkZXNjcmlwdGlvbhgFIAIoCRIgChRleHRlbmRlZF9kZXNjcmlwdGlvbhgr",
            "IAEoCUICGAESDQoFdGl0bGUYBiACKAkSEQoJdGlja19zaXplGAcgAigBEiwK",
            "IG9ic29sZXRlX2Rpc2NyZXRpb25hcnlfdGlja19zaXplGCQgASgBQgIYARIQ",
            "CghjdXJyZW5jeRgIIAIoCRISCgp0aWNrX3ZhbHVlGAkgAigBEhAKCGNmaV9j",
            "b2RlGAogAigJEhYKDmlzX21vc3RfYWN0aXZlGAsgASgIEhkKEWxhc3RfdHJh",
            "ZGluZ19kYXRlGAwgASgSEhkKEWZpcnN0X25vdGljZV9kYXRlGA0gASgSEiIK",
            "GnVuZGVybHlpbmdfY29udHJhY3Rfc3ltYm9sGA4gASgJEhQKDG1hcmdpbl9z",
            "dHlsZRgPIAEoDRIdChVpbnN0cnVtZW50X2dyb3VwX25hbWUYECACKAkSFwoP",
            "c2Vzc2lvbl9pbmZvX2lkGBEgAigREgsKA21pYxgSIAEoCRIXCg9taWNfZGVz",
            "Y3JpcHRpb24YLCABKAkSGQoRbWFya2V0X2RhdGFfZGVsYXkYFCABKBISGAoQ",
            "ZW5kX29mX2RheV9kZWxheRg7IAEoEhIjChtzaG9ydF9pbnN0cnVtZW50X2dy",
            "b3VwX25hbWUYFSACKAkSJAocaW5zdHJ1bWVudF9ncm91cF9kZXNjcmlwdGlv",
            "bhgWIAIoCRI4ChN0aWNrX3NpemVzX2J5X3ByaWNlGBcgAygLMhsubWV0YWRh",
            "dGFfMi5UaWNrU2l6ZUJ5UHJpY2USQwoRdGlja19zaXplc19ieV9kdGUYGCAD",
            "KAsyKC5tZXRhZGF0YV8yLlRpY2tTaXplQnlEYXRlVGlsbEV4cGlyYXRpb24S",
            "HAoUdGlja19zaXplc19ieV9kdGVfaWQYGSABKA0SDgoGc3RyaWtlGBogASgR",
            "EhQKDHN0cmlrZV9wcmljZRgbIAEoARISCgpkaWFsZWN0X2lkGBwgASgJEhQK",
            "DGNvdW50cnlfY29kZRgdIAIoCRJGChNzdHJhdGVneV9kZWZpbml0aW9uGB4g",
            "ASgLMikuc3RyYXRlZ3lfZGVmaW5pdGlvbl8yLlN0cmF0ZWd5RGVmaW5pdGlv",
            "bhIVCg1jb250cmFjdF9zaXplGB8gASgJEhkKEXBvc2l0aW9uX3RyYWNraW5n",
            "GCAgASgNEigKGXNwZWN1bGF0aW9uX3R5cGVfcmVxdWlyZWQYISABKAg6BWZh",
            "bHNlEhsKE21hdHVyaXR5X21vbnRoX3llYXIYIiABKAkSFQoNbWF0dXJpdHlf",
            "ZGF0ZRg1IAEoEhI4ChJwcmljZV9kaXNwbGF5X21vZGUYIyABKA4yHC5tZXRh",
            "ZGF0YV8yLlByaWNlRGlzcGxheU1vZGUSUwopb2Jzb2xldGVfZGlzY3JldGlv",
            "bmFyeV9wcmljZV9kaXNwbGF5X21vZGUYJiABKA4yHC5tZXRhZGF0YV8yLlBy",
            "aWNlRGlzcGxheU1vZGVCAhgBEhgKEGZvcmVpZ25fY3VycmVuY3kYJyABKAkS",
            "JgoMdm9sdW1lX3NjYWxlGCggASgLMgwuY3FnLkRlY2ltYWxCAhgBEiIKF3Zv",
            "bHVtZV9kaXNwbGF5X2V4cG9uZW50GCkgASgROgEwEioKFHRyYWRlX3NpemVf",
            "aW5jcmVtZW50GCogASgLMgwuY3FnLkRlY2ltYWwSIQoZaGFzX2ludmVydGVk",
            "X3ByaWNlX2xhZGRlchg8IAEoCBIkChxkb21fbGFkZGVyX2NvbXByZXNzaW9u",
            "X3JhdGlvGC0gASgNEiUKFmV4cGVjdF9vZmZfdGlja19wcmljZXMYLiABKAg6",
            "BWZhbHNlEiEKE2hhc19leGNoYW5nZV92b2x1bWUYLyABKAg6BHRydWUSEgoK",
            "aGFzX3lpZWxkcxg9IAEoCBIMCgRpc2luGDAgASgJEhoKEm1haW50ZW5hbmNl",
            "X21hcmdpbhgxIAEoARIsChZjb250cmFjdF9zaXplX2luX3VuaXRzGDIgASgL",
            "MgwuY3FnLkRlY2ltYWwSKgoSY29udHJhY3Rfc2l6ZV91bml0GDMgASgLMg4u",
            "c2hhcmVkXzEuVGV4dBIaChJsYXN0X2RlbGl2ZXJ5X2RhdGUYNCABKBISRwoW",
            "Y29udHJpYnV0b3JfcGFyYW1ldGVycxg2IAMoCzInLm1ldGFkYXRhX2FkbWlu",
            "XzIuQ29udHJpYnV0b3JQYXJhbWV0ZXJzEhMKC3BlcmlvZF90eXBlGDcgASgN",
            "EhQKDHBlcmlvZF92YWx1ZRg4IAEoDRIRCglzeW1ib2xfaWQYOSABKAkSFgoH",
            "ZGVsZXRlZBg6IAEoCDoFZmFsc2USHAoUY29udHJpYnV0b3JfZ3JvdXBfaWQY",
            "PiABKBESGgoSc291cmNlX2NvbnRyYWN0X2lkGD8gASgNEg4KBmlzc3VlchhC",
            "IAEoCRIaChJvcHRpb25fbWF0dXJpdHlfaWQYQyABKAkSOwoTY29udmVyc2lv",
            "bl9tZXRhZGF0YRhEIAEoCzIeLm1ldGFkYXRhXzIuQ29udmVyc2lvbk1ldGFk",
            "YXRhEh0KFW1hcmtldF9zdGF0ZV9ncm91cF9pZBhFIAEoERIZChFzZXR0bGVt",
            "ZW50X21ldGhvZBhHIAEoDRIWCg5leGVyY2lzZV9zdHlsZRhIIAEoDRIaChJw",
            "cmljaW5nX2NvbnZlbnRpb24YSSABKA0SIgoaaXNfdXNlcl9kZWZpbmVkX2lu",
            "c3RydW1lbnQYSiABKAgSHwoXYmFyX2J1aWxkaW5nX3RpY2tfdHlwZXMYSyAD",
            "KA0iQAoLTWFyZ2luU3R5bGUSFwoTTUFSR0lOX1NUWUxFX0ZVVFVSRRABEhgK",
            "FE1BUkdJTl9TVFlMRV9QUkVNSVVNEAIiOgoaQ29udHJpYnV0b3JNZXRhZGF0",
            "YVJlcXVlc3QSHAoUY29udHJpYnV0b3JfZ3JvdXBfaWQYASABKBEiWgoZQ29u",
            "dHJpYnV0b3JNZXRhZGF0YVJlcG9ydBI9ChRjb250cmlidXRvcl9tZXRhZGF0",
            "YRgBIAMoCzIfLm1ldGFkYXRhXzIuQ29udHJpYnV0b3JNZXRhZGF0YSJhChND",
            "b250cmlidXRvck1ldGFkYXRhEhYKDmNvbnRyaWJ1dG9yX2lkGAEgASgREgwK",
            "BG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSDwoHZGVsZXRlZBgE",
            "IAEoCCI7ChlPcHRpb25NYXR1cml0eUxpc3RSZXF1ZXN0Eh4KFnVuZGVybHlp",
            "bmdfY29udHJhY3RfaWQYASACKA0iWQoYT3B0aW9uTWF0dXJpdHlMaXN0UmVw",
            "b3J0Ej0KEW9wdGlvbl9tYXR1cml0aWVzGAEgAygLMiIubWV0YWRhdGFfMi5P",
            "cHRpb25NYXR1cml0eU1ldGFkYXRhIvQBChZPcHRpb25NYXR1cml0eU1ldGFk",
            "YXRhEgoKAmlkGAEgAigJEgwKBG5hbWUYAiACKAkSEwoLZGVzY3JpcHRpb24Y",
            "AyACKAkSEAoIY2ZpX2NvZGUYBCABKAkSDwoHZGVsZXRlZBgHIAEoCBIZChFs",
            "YXN0X3RyYWRpbmdfZGF0ZRgIIAEoEhIbChNtYXR1cml0eV9tb250aF95ZWFy",
            "GAkgASgJEh0KFWluc3RydW1lbnRfZ3JvdXBfbmFtZRgKIAEoCRIeChZpbnN0",
            "cnVtZW50X2dyb3VwX2VtcHR5GBEgASgIEhEKCXJlc2VydmVkMRgFIAEoCCI1",
            "ChZJbnN0cnVtZW50R3JvdXBSZXF1ZXN0EhsKE2luc3RydW1lbnRfZ3JvdXBf",
            "aWQYASACKAkiTQoVSW5zdHJ1bWVudEdyb3VwUmVwb3J0EjQKC2luc3RydW1l",
            "bnRzGAEgAygLMh8ubWV0YWRhdGFfMi5JbnN0cnVtZW50R3JvdXBJdGVtIp0C",
            "ChNJbnN0cnVtZW50R3JvdXBJdGVtEgoKAmlkGAEgAigJEgwKBG5hbWUYAiAC",
            "KAkSEwoLZGVzY3JpcHRpb24YAyACKAkSEAoIY2ZpX2NvZGUYBCABKAkSNwoR",
            "Y29udHJhY3RfbWV0YWRhdGEYBiABKAsyHC5tZXRhZGF0YV8yLkNvbnRyYWN0",
            "TWV0YWRhdGESDwoHZGVsZXRlZBgHIAEoCBIZChFsYXN0X3RyYWRpbmdfZGF0",
            "ZRgIIAEoEhIbChNtYXR1cml0eV9tb250aF95ZWFyGAkgASgJEh0KFWluc3Ry",
            "dW1lbnRfZ3JvdXBfbmFtZRgKIAEoCRIRCglyZXNlcnZlZDEYBSABKAgSEQoJ",
            "cmVzZXJ2ZWQyGAsgASgJIjsKGk1hcmtldFN0YXRlTWV0YWRhdGFSZXF1ZXN0",
            "Eh0KFW1hcmtldF9zdGF0ZV9ncm91cF9pZBgBIAIoESJuChlNYXJrZXRTdGF0",
            "ZU1ldGFkYXRhUmVwb3J0ElEKH21hcmtldF9zdGF0ZV9hdHRyaWJ1dGVfbWV0",
            "YWRhdGEYASADKAsyKC5tZXRhZGF0YV8yLk1hcmtldFN0YXRlQXR0cmlidXRl",
            "TWV0YWRhdGEiigEKHE1hcmtldFN0YXRlQXR0cmlidXRlTWV0YWRhdGESDAoE",
            "bmFtZRgBIAEoCRINCgVsZXZlbBgCIAEoDRI8Cg52YWx1ZV9tZXRhZGF0YRgD",
            "IAMoCzIkLm1ldGFkYXRhXzIuTWFya2V0U3RhdGVWYWx1ZU1ldGFkYXRhEg8K",
            "B2RlbGV0ZWQYBCABKAgiTwoYTWFya2V0U3RhdGVWYWx1ZU1ldGFkYXRhEg0K",
            "BXZhbHVlGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEg8KB2RlbGV0ZWQY",
            "AyABKAgiGQoXRXhjaGFuZ2VNZXRhZGF0YVJlcXVlc3QiUQoWRXhjaGFuZ2VN",
            "ZXRhZGF0YVJlcG9ydBI3ChFleGNoYW5nZV9tZXRhZGF0YRgBIAMoCzIcLm1l",
            "dGFkYXRhXzIuRXhjaGFuZ2VNZXRhZGF0YSKpAgoQRXhjaGFuZ2VNZXRhZGF0",
            "YRITCgtleGNoYW5nZV9pZBgBIAEoERIYChBjb250cmlidXRvcl90eXBlGAIg",
            "ASgNEhQKDGFiYnJldmlhdGlvbhgDIAEoCRIMCgRuYW1lGAQgASgJEhMKC2Rl",
            "c2NyaXB0aW9uGAUgASgJEg8KB2RlbGV0ZWQYBiABKAgimwEKD0NvbnRyaWJ1",
            "dG9yVHlwZRIeChpDT05UUklCVVRPUl9UWVBFX1VOREVGSU5FRBAAEiQKIENP",
            "TlRSSUJVVE9SX1RZUEVfVVNfRVFVSVRZX1NUWUxFEAESHgoaQ09OVFJJQlVU",
            "T1JfVFlQRV9PVENfU1RZTEUQAhIiCh5DT05UUklCVVRPUl9UWVBFX0NMVVNU",
            "RVJfU1RZTEUQAyq0AQoUUG9zaXRpb25UcmFja2luZ1R5cGUSJwojUE9TSVRJ",
            "T05fVFJBQ0tJTkdfVFlQRV9ORVRfUE9TSVRJT04QARI4CjRQT1NJVElPTl9U",
            "UkFDS0lOR19UWVBFX0xPTkdfU0hPUlRfV0lUSF9JTVBMSUVEX0NMT1NFEAIS",
            "OQo1UE9TSVRJT05fVFJBQ0tJTkdfVFlQRV9MT05HX1NIT1JUX1dJVEhfRVhQ",
            "TElDSVRfQ0xPU0UQAyp2ChBQcmljZURpc3BsYXlNb2RlEiAKHFBSSUNFX0RJ",
            "U1BMQVlfTU9ERV9OVU1FUkFUT1IQABIeChpQUklDRV9ESVNQTEFZX01PREVf",
            "Uk9VTkRFRBABEiAKHFBSSUNFX0RJU1BMQVlfTU9ERV9UUlVOQ0FURUQQAirg",
            "AgoKUGVyaW9kVHlwZRIVChFQRVJJT0RfVFlQRV9NT05USBAAEhcKE1BFUklP",
            "RF9UWVBFX1FVQVJURVIQARIbChdQRVJJT0RfVFlQRV9TRU1JX0FOTlVBTBAC",
            "EhQKEFBFUklPRF9UWVBFX1lFQVIQAxIbChdQRVJJT0RfVFlQRV9EQVlfT0Zf",
            "V0VFSxAEEhwKGFBFUklPRF9UWVBFX0RBWV9PRl9NT05USBAFEhsKF1BFUklP",
            "RF9UWVBFX0RBWV9PRl9ZRUFSEAYSHQoZUEVSSU9EX1RZUEVfV0VFS19PRl9N",
            "T05USBAHEhwKGFBFUklPRF9UWVBFX1dFRUtfT0ZfWUVBUhAIEhYKElBFUklP",
            "RF9UWVBFX1NFQ09ORBAJEhYKElBFUklPRF9UWVBFX01JTlVURRAKEhQKEFBF",
            "UklPRF9UWVBFX0hPVVIQCxIUChBQRVJJT0RfVFlQRV9EQVRFEAwqfAoRQ1FH",
            "SW5zdHJ1bWVudFR5cGUSHgoaQ1FHX0lOU1RSVU1FTlRfVFlQRV9GVVRVUkUQ",
            "ARIjCh9DUUdfSU5TVFJVTUVOVF9UWVBFX0NBTExfT1BUSU9OEAISIgoeQ1FH",
            "X0lOU1RSVU1FTlRfVFlQRV9QVVRfT1BUSU9OEAMqTgoQU2V0dGxlbWVudE1l",
            "dGhvZBIaChZTRVRUTEVNRU5UX01FVEhPRF9DQVNIEAESHgoaU0VUVExFTUVO",
            "VF9NRVRIT0RfUEhZU0lDQUwQAipJCg1FeGVyY2lzZVN0eWxlEhsKF0VYRVJD",
            "SVNFX1NUWUxFX0VVUk9QRUFOEAESGwoXRVhFUkNJU0VfU1RZTEVfQU1FUklD",
            "QU4QAiprChFQcmljaW5nQ29udmVudGlvbhIcChhQUklDSU5HX0NPTlZFTlRJ",
            "T05fUFJJQ0UQARIcChhQUklDSU5HX0NPTlZFTlRJT05fR1JPU1MQAhIaChZQ",
            "UklDSU5HX0NPTlZFTlRJT05fTkVUEAM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MetadataAdmin2.MetadataAdmin2Reflection.Descriptor, global::StrategyDefinition2.StrategyDefinition2Reflection.Descriptor, global::Cqg.DecimalReflection.Descriptor, global::Shared1.Shared1Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Metadata2.PositionTrackingType), typeof(global::Metadata2.PriceDisplayMode), typeof(global::Metadata2.PeriodType), typeof(global::Metadata2.CQGInstrumentType), typeof(global::Metadata2.SettlementMethod), typeof(global::Metadata2.ExerciseStyle), typeof(global::Metadata2.PricingConvention), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.SymbolResolutionRequest), global::Metadata2.SymbolResolutionRequest.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.SymbolResolutionReport), global::Metadata2.SymbolResolutionReport.Parser, new[]{ "ContractMetadata", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContractMetadataRequest), global::Metadata2.ContractMetadataRequest.Parser, new[]{ "ContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContractMetadataReport), global::Metadata2.ContractMetadataReport.Parser, new[]{ "ContractMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.TickSizeByPrice), global::Metadata2.TickSizeByPrice.Parser, new[]{ "TickSize", "TickValue", "BoundaryPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.TickSizeByDateTillExpiration), global::Metadata2.TickSizeByDateTillExpiration.Parser, new[]{ "Id", "TickSize", "TickValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ConversionMetadata), global::Metadata2.ConversionMetadata.Parser, new[]{ "CurrencyRateContractId", "CurrencyHedgeContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContractMetadata), global::Metadata2.ContractMetadata.Parser, new[]{ "ContractId", "ContractSymbol", "CqgContractSymbol", "CorrectPriceScale", "DisplayPriceScale", "ObsoleteDiscretionaryDisplayPriceScale", "Description", "ExtendedDescription", "Title", "TickSize", "ObsoleteDiscretionaryTickSize", "Currency", "TickValue", "CfiCode", "IsMostActive", "LastTradingDate", "FirstNoticeDate", "UnderlyingContractSymbol", "MarginStyle", "InstrumentGroupName", "SessionInfoId", "Mic", "MicDescription", "MarketDataDelay", "EndOfDayDelay", "ShortInstrumentGroupName", "InstrumentGroupDescription", "TickSizesByPrice", "TickSizesByDte", "TickSizesByDteId", "Strike", "StrikePrice", "DialectId", "CountryCode", "StrategyDefinition", "ContractSize", "PositionTracking", "SpeculationTypeRequired", "MaturityMonthYear", "MaturityDate", "PriceDisplayMode", "ObsoleteDiscretionaryPriceDisplayMode", "ForeignCurrency", "VolumeScale", "VolumeDisplayExponent", "TradeSizeIncrement", "HasInvertedPriceLadder", "DomLadderCompressionRatio", "ExpectOffTickPrices", "HasExchangeVolume", "HasYields", "Isin", "MaintenanceMargin", "ContractSizeInUnits", "ContractSizeUnit", "LastDeliveryDate", "ContributorParameters", "PeriodType", "PeriodValue", "SymbolId", "Deleted", "ContributorGroupId", "SourceContractId", "Issuer", "OptionMaturityId", "ConversionMetadata", "MarketStateGroupId", "SettlementMethod", "ExerciseStyle", "PricingConvention", "IsUserDefinedInstrument", "BarBuildingTickTypes" }, null, new[]{ typeof(global::Metadata2.ContractMetadata.Types.MarginStyle) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContributorMetadataRequest), global::Metadata2.ContributorMetadataRequest.Parser, new[]{ "ContributorGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContributorMetadataReport), global::Metadata2.ContributorMetadataReport.Parser, new[]{ "ContributorMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ContributorMetadata), global::Metadata2.ContributorMetadata.Parser, new[]{ "ContributorId", "Name", "Description", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.OptionMaturityListRequest), global::Metadata2.OptionMaturityListRequest.Parser, new[]{ "UnderlyingContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.OptionMaturityListReport), global::Metadata2.OptionMaturityListReport.Parser, new[]{ "OptionMaturities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.OptionMaturityMetadata), global::Metadata2.OptionMaturityMetadata.Parser, new[]{ "Id", "Name", "Description", "CfiCode", "Deleted", "LastTradingDate", "MaturityMonthYear", "InstrumentGroupName", "InstrumentGroupEmpty", "Reserved1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.InstrumentGroupRequest), global::Metadata2.InstrumentGroupRequest.Parser, new[]{ "InstrumentGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.InstrumentGroupReport), global::Metadata2.InstrumentGroupReport.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.InstrumentGroupItem), global::Metadata2.InstrumentGroupItem.Parser, new[]{ "Id", "Name", "Description", "CfiCode", "ContractMetadata", "Deleted", "LastTradingDate", "MaturityMonthYear", "InstrumentGroupName", "Reserved1", "Reserved2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.MarketStateMetadataRequest), global::Metadata2.MarketStateMetadataRequest.Parser, new[]{ "MarketStateGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.MarketStateMetadataReport), global::Metadata2.MarketStateMetadataReport.Parser, new[]{ "MarketStateAttributeMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.MarketStateAttributeMetadata), global::Metadata2.MarketStateAttributeMetadata.Parser, new[]{ "Name", "Level", "ValueMetadata", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.MarketStateValueMetadata), global::Metadata2.MarketStateValueMetadata.Parser, new[]{ "Value", "Description", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ExchangeMetadataRequest), global::Metadata2.ExchangeMetadataRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ExchangeMetadataReport), global::Metadata2.ExchangeMetadataReport.Parser, new[]{ "ExchangeMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Metadata2.ExchangeMetadata), global::Metadata2.ExchangeMetadata.Parser, new[]{ "ExchangeId", "ContributorType", "Abbreviation", "Name", "Description", "Deleted" }, null, new[]{ typeof(global::Metadata2.ExchangeMetadata.Types.ContributorType) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Way how to track the trader's open positions on a given contract.
  /// </summary>
  public enum PositionTrackingType {
    /// <summary>
    /// Difference between long and short open positions is tracked.
    /// </summary>
    [pbr::OriginalName("POSITION_TRACKING_TYPE_NET_POSITION")] NetPosition = 1,
    /// <summary>
    /// Long and short open positions are tracked separately.
    /// </summary>
    [pbr::OriginalName("POSITION_TRACKING_TYPE_LONG_SHORT_WITH_IMPLIED_CLOSE")] LongShortWithImpliedClose = 2,
    /// <summary>
    /// Long and short as well as today and yesterday open positions are tracked separately.
    /// The explicit order instruction to close either today or yesterday is taken into account.
    /// </summary>
    [pbr::OriginalName("POSITION_TRACKING_TYPE_LONG_SHORT_WITH_EXPLICIT_CLOSE")] LongShortWithExplicitClose = 3,
  }

  /// <summary>
  /// Recommended display mode for prices.
  /// The rules are applied according to the display scale of a contract.
  /// For combined scales like Eighths of Thirty Seconds the mode is applied only to the minor fractions (Eighths) while
  /// the major fractions (Thirty Seconds) always shown in PRICE_DISPLAY_MODE_NUMERATOR mode.
  /// Sample: TRUNCATED mode for 108 22/32 with extra 7/8 of 1/32 (108 + 22/32 + 7/256)
  /// is shown as 108'228 where 8 is calculated as 7/8 -> truncate (0.875) -> 8 (see TRUNCATED sample below).
  /// </summary>
  public enum PriceDisplayMode {
    /// <summary>
    /// The numerator of the fractional part is shown directly.
    /// Samples: for 3/8 the fractional part is shown as '3', for 7/16 - '07', for 15/100 - '15' etc.
    /// </summary>
    [pbr::OriginalName("PRICE_DISPLAY_MODE_NUMERATOR")] Numerator = 0,
    /// <summary>
    /// Rounded decimal. In this mode the fractional part is converted to the decimal fraction
    /// and then rounded to the minimum digits which are necessary to recognize the price.
    /// Samples: 3/8 -> round(0.375) -> '4', 7/8 ¨C round(0.875) -> '9', 11/16 -> round(0.6875) -> '69'.
    /// It means the same as PRICE_DISPLAY_MODE_NUMERATOR for decimal scales.
    /// </summary>
    [pbr::OriginalName("PRICE_DISPLAY_MODE_ROUNDED")] Rounded = 1,
    /// <summary>
    /// Truncated decimal. In this mode the fractional part is converted to the decimal fraction
    /// and then truncated to the minimum digits which are necessary to recognize the price.
    /// Samples: 3/8 -> truncate(0.375) -> '3', 7/8 -> truncate (0.875) -> '8', 11/16 -> truncate (0.6875) -> '68'.
    /// It means the same as PRICE_DISPLAY_MODE_NUMERATOR for decimal scales.
    /// </summary>
    [pbr::OriginalName("PRICE_DISPLAY_MODE_TRUNCATED")] Truncated = 2,
  }

  /// <summary>
  /// Describes period value type.
  /// See example in ContractMetadata.period_type and ContractMetadata.period_value.
  /// </summary>
  public enum PeriodType {
    [pbr::OriginalName("PERIOD_TYPE_MONTH")] Month = 0,
    [pbr::OriginalName("PERIOD_TYPE_QUARTER")] Quarter = 1,
    [pbr::OriginalName("PERIOD_TYPE_SEMI_ANNUAL")] SemiAnnual = 2,
    [pbr::OriginalName("PERIOD_TYPE_YEAR")] Year = 3,
    [pbr::OriginalName("PERIOD_TYPE_DAY_OF_WEEK")] DayOfWeek = 4,
    [pbr::OriginalName("PERIOD_TYPE_DAY_OF_MONTH")] DayOfMonth = 5,
    [pbr::OriginalName("PERIOD_TYPE_DAY_OF_YEAR")] DayOfYear = 6,
    [pbr::OriginalName("PERIOD_TYPE_WEEK_OF_MONTH")] WeekOfMonth = 7,
    [pbr::OriginalName("PERIOD_TYPE_WEEK_OF_YEAR")] WeekOfYear = 8,
    [pbr::OriginalName("PERIOD_TYPE_SECOND")] Second = 9,
    [pbr::OriginalName("PERIOD_TYPE_MINUTE")] Minute = 10,
    [pbr::OriginalName("PERIOD_TYPE_HOUR")] Hour = 11,
    [pbr::OriginalName("PERIOD_TYPE_DATE")] Date = 12,
  }

  /// <summary>
  /// CQG base instrument types eligible for user defined instrument requests.
  /// </summary>
  public enum CQGInstrumentType {
    /// <summary>
    /// Future or other instruments defined as a future in CQG, e.g. for some
    /// exchanges, this includes forwards.
    /// </summary>
    [pbr::OriginalName("CQG_INSTRUMENT_TYPE_FUTURE")] Future = 1,
    /// <summary>
    /// Call option.
    /// </summary>
    [pbr::OriginalName("CQG_INSTRUMENT_TYPE_CALL_OPTION")] CallOption = 2,
    /// <summary>
    /// Put option.
    /// </summary>
    [pbr::OriginalName("CQG_INSTRUMENT_TYPE_PUT_OPTION")] PutOption = 3,
  }

  /// <summary>
  /// Settlement method.
  /// </summary>
  public enum SettlementMethod {
    /// <summary>
    /// Cash settled.
    /// </summary>
    [pbr::OriginalName("SETTLEMENT_METHOD_CASH")] Cash = 1,
    /// <summary>
    /// Physically delivered.
    /// </summary>
    [pbr::OriginalName("SETTLEMENT_METHOD_PHYSICAL")] Physical = 2,
  }

  /// <summary>
  /// Exercise style.
  /// </summary>
  public enum ExerciseStyle {
    /// <summary>
    /// European exercise style.
    /// </summary>
    [pbr::OriginalName("EXERCISE_STYLE_EUROPEAN")] European = 1,
    /// <summary>
    /// American exercise style.
    /// </summary>
    [pbr::OriginalName("EXERCISE_STYLE_AMERICAN")] American = 2,
  }

  /// <summary>
  /// Pricing convention aka return type.
  /// </summary>
  public enum PricingConvention {
    /// <summary>
    /// Price return.
    /// </summary>
    [pbr::OriginalName("PRICING_CONVENTION_PRICE")] Price = 1,
    /// <summary>
    /// Gross return.
    /// </summary>
    [pbr::OriginalName("PRICING_CONVENTION_GROSS")] Gross = 2,
    /// <summary>
    /// Net return.
    /// </summary>
    [pbr::OriginalName("PRICING_CONVENTION_NET")] Net = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Request to resolve a symbol pattern or specific symbol identifier
  /// to a specific contract with optional subscription for meta-data updates.
  /// Symbol resolution rules:
  ///   a) If the requested symbol points to a symbol prefix rather than a specific contract
  ///      then it is resolved into the most active contract for this symbol prefix (e.g. 'EP' is resolved to 'EPU3').
  ///      The update is sent when an active contract is changed (e.g. the update might contain the following 'EPZ3').
  ///   b) If the requested symbol points to a specific contract which last trading date
  ///      was less than 30 days ago (by default) SymbolResolutionReport is returned with 'deleted' field set to True.
  ///      Else if contract's last trading day was more than 30 days ago (by default)
  ///      status code NOT_FOUND is returned in InformationReport.
  ///   c) If the requested symbol points to a specific contract that is tradable right now then it is resolved to itself.
  ///      Update is sent only when meta-data for such contract is changed or expired.
  ///      In case of expiration SymbolResolutionReport is returned with 'deleted' field set to True.
  ///   d) If requested symbol points to an option instrument without specific month and strike
  ///      it is resolved to the lead (first non-spot) month of the underlying future or its own front month
  ///      if the underlying contract is not a future (e.g. 'C.EP' is resolved to 'C.EPU131600').
  ///      Update is sent only when the resolved option contract is expired
  ///      (strike is not updated to follow underlying contract market price).
  ///   e) If requested symbol is a symbol prefix that follows '?N' or '??N' (where N is number, e.g. EP?2)
  ///      then it is resolved to Nth nearest contract.
  ///      N = 1 means 'front' contract, N = 2 means the nearest contract that follows the front, etc.
  ///      '?' and '??' are different for futures only
  ///      and '?' means Nth nearest regular future and '??' means Nth nearest spot or regular future.
  ///      Update is sent when the front contract expired
  ///      and replaced with the following contract (relative position change).
  ///      N = 0 is a special case that means 'most active' contract which works the same way as (a)
  /// NOTE: Available and active contract lists are updated within 24 hours
  ///       of an expiring contract's final trading session.
  ///       Meta-data updates for affected contracts, when a subscription is present, are sent when the list updates occur.
  ///       Initial resolution requests use the same lists, so the best way to avoid inconsistency
  ///       and unnecessary server load is to subscribe and process updates when notified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolResolutionRequest : pb::IExtendableMessage<SymbolResolutionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolResolutionRequest> _parser = new pb::MessageParser<SymbolResolutionRequest>(() => new SymbolResolutionRequest());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<SymbolResolutionRequest> _extensions;
    private pb::ExtensionSet<SymbolResolutionRequest> _Extensions { get { return _extensions; } }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolResolutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionRequest(SymbolResolutionRequest other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionRequest Clone() {
      return new SymbolResolutionRequest(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    /// <summary>
    /// Symbol pattern to resolve.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbol() {
      symbol_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolResolutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolResolutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSymbol) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSymbol) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolResolutionRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<SymbolResolutionRequest, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<SymbolResolutionRequest, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<SymbolResolutionRequest, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<SymbolResolutionRequest, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<SymbolResolutionRequest, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<SymbolResolutionRequest, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<SymbolResolutionRequest, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Symbol resolution result or update.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolResolutionReport : pb::IMessage<SymbolResolutionReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolResolutionReport> _parser = new pb::MessageParser<SymbolResolutionReport>(() => new SymbolResolutionReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolResolutionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionReport(SymbolResolutionReport other) : this() {
      _hasBits0 = other._hasBits0;
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolResolutionReport Clone() {
      return new SymbolResolutionReport(this);
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 1;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Resolved contract meta-data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 2;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Contract is expired (used for updates).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 1) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolResolutionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolResolutionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(16);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(16);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolResolutionReport other) {
      if (other == null) {
        return;
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 16: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 16: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request contract metadata by contract ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContractMetadataRequest : pb::IMessage<ContractMetadataRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContractMetadataRequest> _parser = new pb::MessageParser<ContractMetadataRequest>(() => new ContractMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContractMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataRequest(ContractMetadataRequest other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataRequest Clone() {
      return new ContractMetadataRequest(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// contract ID to request the metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContractMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContractMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContractMetadataRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with the requested contract metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContractMetadataReport : pb::IMessage<ContractMetadataReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContractMetadataReport> _parser = new pb::MessageParser<ContractMetadataReport>(() => new ContractMetadataReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContractMetadataReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataReport(ContractMetadataReport other) : this() {
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadataReport Clone() {
      return new ContractMetadataReport(this);
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 1;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Requested metadata if successfully found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContractMetadataReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContractMetadataReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contractMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContractMetadataReport other) {
      if (other == null) {
        return;
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes tick size and value, and the range of prices they apply in.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TickSizeByPrice : pb::IMessage<TickSizeByPrice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickSizeByPrice> _parser = new pb::MessageParser<TickSizeByPrice>(() => new TickSizeByPrice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickSizeByPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByPrice(TickSizeByPrice other) : this() {
      _hasBits0 = other._hasBits0;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      boundaryPrice_ = other.boundaryPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByPrice Clone() {
      return new TickSizeByPrice(this);
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 1;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Size or a single market tick in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickSize {
      get { if ((_hasBits0 & 1) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 2;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Contract tick money value in the contract's currency.
    /// Zero if not applicable (e.g. for indexes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickValue {
      get { if ((_hasBits0 & 2) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "boundary_price" field.</summary>
    public const int BoundaryPriceFieldNumber = 3;
    private readonly static double BoundaryPriceDefaultValue = 0D;

    private double boundaryPrice_;
    /// <summary>
    /// Boundary of a half-open price range.
    /// Minimum for positive values but maximum for negative values.
    /// - Negative value defines (prev-price &lt;- boundary_price] range
    /// - Positive value defines [boundary_price -> next-price) range
    /// - Zero value defines (highest-negative-price &lt;- 0] and [0 -> lowest-positive-price)
    /// The price is in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BoundaryPrice {
      get { if ((_hasBits0 & 4) != 0) { return boundaryPrice_; } else { return BoundaryPriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        boundaryPrice_ = value;
      }
    }
    /// <summary>Gets whether the "boundary_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoundaryPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "boundary_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoundaryPrice() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickSizeByPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickSizeByPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BoundaryPrice, other.BoundaryPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (HasBoundaryPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BoundaryPrice);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTickSize) {
        output.WriteRawTag(9);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(17);
        output.WriteDouble(TickValue);
      }
      if (HasBoundaryPrice) {
        output.WriteRawTag(25);
        output.WriteDouble(BoundaryPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTickSize) {
        output.WriteRawTag(9);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(17);
        output.WriteDouble(TickValue);
      }
      if (HasBoundaryPrice) {
        output.WriteRawTag(25);
        output.WriteDouble(BoundaryPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (HasBoundaryPrice) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickSizeByPrice other) {
      if (other == null) {
        return;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      if (other.HasBoundaryPrice) {
        BoundaryPrice = other.BoundaryPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            TickSize = input.ReadDouble();
            break;
          }
          case 17: {
            TickValue = input.ReadDouble();
            break;
          }
          case 25: {
            BoundaryPrice = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            TickSize = input.ReadDouble();
            break;
          }
          case 17: {
            TickValue = input.ReadDouble();
            break;
          }
          case 25: {
            BoundaryPrice = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes tick size and value applied within some range of dates.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TickSizeByDateTillExpiration : pb::IMessage<TickSizeByDateTillExpiration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickSizeByDateTillExpiration> _parser = new pb::MessageParser<TickSizeByDateTillExpiration>(() => new TickSizeByDateTillExpiration());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickSizeByDateTillExpiration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByDateTillExpiration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByDateTillExpiration(TickSizeByDateTillExpiration other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickSizeByDateTillExpiration Clone() {
      return new TickSizeByDateTillExpiration(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// Id of the record.  Starts from 0.  The record with id of 0 applies immediately before contract expiration, id of 1
    /// applies before 0th, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 2;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Size or a single market tick in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickSize {
      get { if ((_hasBits0 & 2) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSize() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 3;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Contract tick money value in the contract's currency.
    /// Zero if not applicable (e.g. for indexes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickValue {
      get { if ((_hasBits0 & 4) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickValue() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickSizeByDateTillExpiration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickSizeByDateTillExpiration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasTickSize) {
        output.WriteRawTag(17);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(25);
        output.WriteDouble(TickValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasTickSize) {
        output.WriteRawTag(17);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(25);
        output.WriteDouble(TickValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickSizeByDateTillExpiration other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 17: {
            TickSize = input.ReadDouble();
            break;
          }
          case 25: {
            TickValue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 17: {
            TickSize = input.ReadDouble();
            break;
          }
          case 25: {
            TickValue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Metadata used for real-time and trading data conversion.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ConversionMetadata : pb::IMessage<ConversionMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConversionMetadata> _parser = new pb::MessageParser<ConversionMetadata>(() => new ConversionMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConversionMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionMetadata(ConversionMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      currencyRateContractId_ = other.currencyRateContractId_;
      currencyHedgeContractId_ = other.currencyHedgeContractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConversionMetadata Clone() {
      return new ConversionMetadata(this);
    }

    /// <summary>Field number for the "currency_rate_contract_id" field.</summary>
    public const int CurrencyRateContractIdFieldNumber = 1;
    private readonly static uint CurrencyRateContractIdDefaultValue = 0;

    private uint currencyRateContractId_;
    /// <summary>
    /// Identifier of the currency contract used for price conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurrencyRateContractId {
      get { if ((_hasBits0 & 1) != 0) { return currencyRateContractId_; } else { return CurrencyRateContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currencyRateContractId_ = value;
      }
    }
    /// <summary>Gets whether the "currency_rate_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrencyRateContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "currency_rate_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrencyRateContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "currency_hedge_contract_id" field.</summary>
    public const int CurrencyHedgeContractIdFieldNumber = 2;
    private readonly static uint CurrencyHedgeContractIdDefaultValue = 0;

    private uint currencyHedgeContractId_;
    /// <summary>
    /// Identifier of the currency contract used for hedging conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurrencyHedgeContractId {
      get { if ((_hasBits0 & 2) != 0) { return currencyHedgeContractId_; } else { return CurrencyHedgeContractIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        currencyHedgeContractId_ = value;
      }
    }
    /// <summary>Gets whether the "currency_hedge_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrencyHedgeContractId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "currency_hedge_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrencyHedgeContractId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConversionMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConversionMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyRateContractId != other.CurrencyRateContractId) return false;
      if (CurrencyHedgeContractId != other.CurrencyHedgeContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurrencyRateContractId) hash ^= CurrencyRateContractId.GetHashCode();
      if (HasCurrencyHedgeContractId) hash ^= CurrencyHedgeContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCurrencyRateContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrencyRateContractId);
      }
      if (HasCurrencyHedgeContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrencyHedgeContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCurrencyRateContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrencyRateContractId);
      }
      if (HasCurrencyHedgeContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrencyHedgeContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCurrencyRateContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyRateContractId);
      }
      if (HasCurrencyHedgeContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyHedgeContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConversionMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasCurrencyRateContractId) {
        CurrencyRateContractId = other.CurrencyRateContractId;
      }
      if (other.HasCurrencyHedgeContractId) {
        CurrencyHedgeContractId = other.CurrencyHedgeContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrencyRateContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurrencyHedgeContractId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrencyRateContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurrencyHedgeContractId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContractMetadata : pb::IMessage<ContractMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContractMetadata> _parser = new pb::MessageParser<ContractMetadata>(() => new ContractMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContractMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadata(ContractMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      contractId_ = other.contractId_;
      contractSymbol_ = other.contractSymbol_;
      cqgContractSymbol_ = other.cqgContractSymbol_;
      correctPriceScale_ = other.correctPriceScale_;
      displayPriceScale_ = other.displayPriceScale_;
      obsoleteDiscretionaryDisplayPriceScale_ = other.obsoleteDiscretionaryDisplayPriceScale_;
      description_ = other.description_;
      extendedDescription_ = other.extendedDescription_;
      title_ = other.title_;
      tickSize_ = other.tickSize_;
      obsoleteDiscretionaryTickSize_ = other.obsoleteDiscretionaryTickSize_;
      currency_ = other.currency_;
      tickValue_ = other.tickValue_;
      cfiCode_ = other.cfiCode_;
      isMostActive_ = other.isMostActive_;
      lastTradingDate_ = other.lastTradingDate_;
      firstNoticeDate_ = other.firstNoticeDate_;
      underlyingContractSymbol_ = other.underlyingContractSymbol_;
      marginStyle_ = other.marginStyle_;
      instrumentGroupName_ = other.instrumentGroupName_;
      sessionInfoId_ = other.sessionInfoId_;
      mic_ = other.mic_;
      micDescription_ = other.micDescription_;
      marketDataDelay_ = other.marketDataDelay_;
      endOfDayDelay_ = other.endOfDayDelay_;
      shortInstrumentGroupName_ = other.shortInstrumentGroupName_;
      instrumentGroupDescription_ = other.instrumentGroupDescription_;
      tickSizesByPrice_ = other.tickSizesByPrice_.Clone();
      tickSizesByDte_ = other.tickSizesByDte_.Clone();
      tickSizesByDteId_ = other.tickSizesByDteId_;
      strike_ = other.strike_;
      strikePrice_ = other.strikePrice_;
      dialectId_ = other.dialectId_;
      countryCode_ = other.countryCode_;
      strategyDefinition_ = other.strategyDefinition_ != null ? other.strategyDefinition_.Clone() : null;
      contractSize_ = other.contractSize_;
      positionTracking_ = other.positionTracking_;
      speculationTypeRequired_ = other.speculationTypeRequired_;
      maturityMonthYear_ = other.maturityMonthYear_;
      maturityDate_ = other.maturityDate_;
      priceDisplayMode_ = other.priceDisplayMode_;
      obsoleteDiscretionaryPriceDisplayMode_ = other.obsoleteDiscretionaryPriceDisplayMode_;
      foreignCurrency_ = other.foreignCurrency_;
      volumeScale_ = other.volumeScale_ != null ? other.volumeScale_.Clone() : null;
      volumeDisplayExponent_ = other.volumeDisplayExponent_;
      tradeSizeIncrement_ = other.tradeSizeIncrement_ != null ? other.tradeSizeIncrement_.Clone() : null;
      hasInvertedPriceLadder_ = other.hasInvertedPriceLadder_;
      domLadderCompressionRatio_ = other.domLadderCompressionRatio_;
      expectOffTickPrices_ = other.expectOffTickPrices_;
      hasExchangeVolume_ = other.hasExchangeVolume_;
      hasYields_ = other.hasYields_;
      isin_ = other.isin_;
      maintenanceMargin_ = other.maintenanceMargin_;
      contractSizeInUnits_ = other.contractSizeInUnits_ != null ? other.contractSizeInUnits_.Clone() : null;
      contractSizeUnit_ = other.contractSizeUnit_ != null ? other.contractSizeUnit_.Clone() : null;
      lastDeliveryDate_ = other.lastDeliveryDate_;
      contributorParameters_ = other.contributorParameters_.Clone();
      periodType_ = other.periodType_;
      periodValue_ = other.periodValue_;
      symbolId_ = other.symbolId_;
      deleted_ = other.deleted_;
      contributorGroupId_ = other.contributorGroupId_;
      sourceContractId_ = other.sourceContractId_;
      issuer_ = other.issuer_;
      optionMaturityId_ = other.optionMaturityId_;
      conversionMetadata_ = other.conversionMetadata_ != null ? other.conversionMetadata_.Clone() : null;
      marketStateGroupId_ = other.marketStateGroupId_;
      settlementMethod_ = other.settlementMethod_;
      exerciseStyle_ = other.exerciseStyle_;
      pricingConvention_ = other.pricingConvention_;
      isUserDefinedInstrument_ = other.isUserDefinedInstrument_;
      barBuildingTickTypes_ = other.barBuildingTickTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractMetadata Clone() {
      return new ContractMetadata(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server assigned ID for a contract, it is not the same across sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "contract_symbol" field.</summary>
    public const int ContractSymbolFieldNumber = 2;
    private readonly static string ContractSymbolDefaultValue = "";

    private string contractSymbol_;
    /// <summary>
    /// Full contract symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContractSymbol {
      get { return contractSymbol_ ?? ContractSymbolDefaultValue; }
      set {
        contractSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contract_symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractSymbol {
      get { return contractSymbol_ != null; }
    }
    /// <summary>Clears the value of the "contract_symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractSymbol() {
      contractSymbol_ = null;
    }

    /// <summary>Field number for the "cqg_contract_symbol" field.</summary>
    public const int CqgContractSymbolFieldNumber = 70;
    private readonly static string CqgContractSymbolDefaultValue = "";

    private string cqgContractSymbol_;
    /// <summary>
    /// Full contract symbol in CQG dialect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CqgContractSymbol {
      get { return cqgContractSymbol_ ?? CqgContractSymbolDefaultValue; }
      set {
        cqgContractSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cqg_contract_symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCqgContractSymbol {
      get { return cqgContractSymbol_ != null; }
    }
    /// <summary>Clears the value of the "cqg_contract_symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCqgContractSymbol() {
      cqgContractSymbol_ = null;
    }

    /// <summary>Field number for the "correct_price_scale" field.</summary>
    public const int CorrectPriceScaleFieldNumber = 3;
    private readonly static double CorrectPriceScaleDefaultValue = 0D;

    private double correctPriceScale_;
    /// <summary>
    /// Scale to convert prices from this protocol to correct prices
    /// (correctPrice = price * correctPriceScale).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CorrectPriceScale {
      get { if ((_hasBits0 & 2) != 0) { return correctPriceScale_; } else { return CorrectPriceScaleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        correctPriceScale_ = value;
      }
    }
    /// <summary>Gets whether the "correct_price_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCorrectPriceScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "correct_price_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCorrectPriceScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "display_price_scale" field.</summary>
    public const int DisplayPriceScaleFieldNumber = 4;
    private readonly static uint DisplayPriceScaleDefaultValue = 0;

    private uint displayPriceScale_;
    /// <summary>
    /// Display Price Scale is a number that defines conversion of float correct price to
    /// a 'native' integer display format and back.
    /// Below is the table of possible scale values.
    /// -------------------------------------------------------
    /// | Scale |       Name            |    Description      |
    /// -------------------------------------------------------
    /// | 0     |One                     |Don't scale         |
    /// | 1     |TenMinusOne             |Divide by 10        |
    /// | 2     |TenMinusTwo             |Divide by 100       |
    /// | 3     |TenMinusThree           |Divide by 1000      |
    /// | 4     |TenMinusFour            |Divide by 10000     |
    /// | 5     |TenMinusFive            |Divide by 100000    |
    /// | 6     |TenMinusSix             |Divide by 1000000   |
    /// | 7     |TenMinusSeven           |Divide by 10000000  |
    /// | 8     |TenMinusEight           |Divide by 100000000 |
    /// | 9     |TenMinusNine            |Divide by 1000000000|
    /// | 10    |TenMinusTen             |Divide by 10^10     |
    /// | 11    |TenMinusEleven          |Divide by 10^11     |
    /// | 12    |TenMinusTwelve          |Divide by 10^12     |
    /// | 13    |TenMinusThirteen        |Divide by 10^13     |
    /// | 14    |TenMinusFourteen        |Divide by 10^14     |
    /// | 15    |TenMinusFifteen         |Divide by 10^15     |
    /// | 101   |Halves                  |Divide by 2         |
    /// | 102   |Fourths                 |Divide by 4         |
    /// | 103   |Eighths                 |Divide by 8         |
    /// | 104   |Sixteenths              |Divide by 16        |
    /// | 105   |ThirtySeconds           |Divide by 32        |
    /// | 106   |SixtyFourths            |Divide by 64        |
    /// | 107   |OneHundredTwentyEighths |Divide by 128       |
    /// | 108   |TwoHundredFiftySixths   |Divide by 256       |
    /// | 109   |FiveHundredTwelths      |Divide by 512       |
    /// | 110   |OneThousandTwentyFourths|Divide by 1024      |
    /// | 201   |HalfThirtySeconds       |Similar to 64ths    |
    /// | 202   |QuarterThirtySeconds    |Similar to 128ths   |
    /// | 203   |EighthThirtySeconds     |Similar to 256ths   |
    /// | 204   |HalfSixtyFourths        |Similar to 128ths   |
    /// | 205   |QuarterSixtyFourths     |Similar to 256ths   |
    /// | 206   |SixteenthThirtySeconds  |Similar to 512ths   |
    /// -------------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DisplayPriceScale {
      get { if ((_hasBits0 & 4) != 0) { return displayPriceScale_; } else { return DisplayPriceScaleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        displayPriceScale_ = value;
      }
    }
    /// <summary>Gets whether the "display_price_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisplayPriceScale {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "display_price_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisplayPriceScale() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "obsolete_discretionary_display_price_scale" field.</summary>
    public const int ObsoleteDiscretionaryDisplayPriceScaleFieldNumber = 37;
    private readonly static uint ObsoleteDiscretionaryDisplayPriceScaleDefaultValue = 0;

    private uint obsoleteDiscretionaryDisplayPriceScale_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ObsoleteDiscretionaryDisplayPriceScale {
      get { if ((_hasBits0 & 262144) != 0) { return obsoleteDiscretionaryDisplayPriceScale_; } else { return ObsoleteDiscretionaryDisplayPriceScaleDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        obsoleteDiscretionaryDisplayPriceScale_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_display_price_scale" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryDisplayPriceScale {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_display_price_scale" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryDisplayPriceScale() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Contract description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "extended_description" field.</summary>
    public const int ExtendedDescriptionFieldNumber = 43;
    private readonly static string ExtendedDescriptionDefaultValue = "";

    private string extendedDescription_;
    /// <summary>
    /// Use description instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtendedDescription {
      get { return extendedDescription_ ?? ExtendedDescriptionDefaultValue; }
      set {
        extendedDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "extended_description" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExtendedDescription {
      get { return extendedDescription_ != null; }
    }
    /// <summary>Clears the value of the "extended_description" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExtendedDescription() {
      extendedDescription_ = null;
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    /// <summary>
    /// Contract display name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 7;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Size or a single market tick in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickSize {
      get { if ((_hasBits0 & 8) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSize {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSize() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "obsolete_discretionary_tick_size" field.</summary>
    public const int ObsoleteDiscretionaryTickSizeFieldNumber = 36;
    private readonly static double ObsoleteDiscretionaryTickSizeDefaultValue = 0D;

    private double obsoleteDiscretionaryTickSize_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ObsoleteDiscretionaryTickSize {
      get { if ((_hasBits0 & 131072) != 0) { return obsoleteDiscretionaryTickSize_; } else { return ObsoleteDiscretionaryTickSizeDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        obsoleteDiscretionaryTickSize_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_tick_size" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryTickSize {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_tick_size" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryTickSize() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 8;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    /// <summary>
    /// Contract currency code (ISO 4217 based).
    /// Empty string if not applicable (e.g. for indexes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 9;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Contract tick money value in the contract's currency.
    /// Zero if not applicable (e.g. for indexes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickValue {
      get { if ((_hasBits0 & 16) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickValue {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickValue() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 10;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "is_most_active" field.</summary>
    public const int IsMostActiveFieldNumber = 11;
    private readonly static bool IsMostActiveDefaultValue = false;

    private bool isMostActive_;
    /// <summary>
    /// True if this contract is the most active one for derivatives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMostActive {
      get { if ((_hasBits0 & 32) != 0) { return isMostActive_; } else { return IsMostActiveDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isMostActive_ = value;
      }
    }
    /// <summary>Gets whether the "is_most_active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMostActive {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_most_active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMostActive() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "last_trading_date" field.</summary>
    public const int LastTradingDateFieldNumber = 12;
    private readonly static long LastTradingDateDefaultValue = 0L;

    private long lastTradingDate_;
    /// <summary>
    /// Contract trading date for derivatives
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastTradingDate {
      get { if ((_hasBits0 & 64) != 0) { return lastTradingDate_; } else { return LastTradingDateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lastTradingDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_trading_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradingDate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "last_trading_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradingDate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "first_notice_date" field.</summary>
    public const int FirstNoticeDateFieldNumber = 13;
    private readonly static long FirstNoticeDateDefaultValue = 0L;

    private long firstNoticeDate_;
    /// <summary>
    /// Contract first notice date
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstNoticeDate {
      get { if ((_hasBits0 & 128) != 0) { return firstNoticeDate_; } else { return FirstNoticeDateDefaultValue; } }
      set {
        _hasBits0 |= 128;
        firstNoticeDate_ = value;
      }
    }
    /// <summary>Gets whether the "first_notice_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstNoticeDate {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "first_notice_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstNoticeDate() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "underlying_contract_symbol" field.</summary>
    public const int UnderlyingContractSymbolFieldNumber = 14;
    private readonly static string UnderlyingContractSymbolDefaultValue = "";

    private string underlyingContractSymbol_;
    /// <summary>
    /// Underlying contract symbol (e.g. for options and equities).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnderlyingContractSymbol {
      get { return underlyingContractSymbol_ ?? UnderlyingContractSymbolDefaultValue; }
      set {
        underlyingContractSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "underlying_contract_symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderlyingContractSymbol {
      get { return underlyingContractSymbol_ != null; }
    }
    /// <summary>Clears the value of the "underlying_contract_symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderlyingContractSymbol() {
      underlyingContractSymbol_ = null;
    }

    /// <summary>Field number for the "margin_style" field.</summary>
    public const int MarginStyleFieldNumber = 15;
    private readonly static uint MarginStyleDefaultValue = 0;

    private uint marginStyle_;
    /// <summary>
    /// This field is associated with MarginStyle enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MarginStyle {
      get { if ((_hasBits0 & 256) != 0) { return marginStyle_; } else { return MarginStyleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        marginStyle_ = value;
      }
    }
    /// <summary>Gets whether the "margin_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarginStyle {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "margin_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarginStyle() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "instrument_group_name" field.</summary>
    public const int InstrumentGroupNameFieldNumber = 16;
    private readonly static string InstrumentGroupNameDefaultValue = "";

    private string instrumentGroupName_;
    /// <summary>
    /// Name of a group of contracts that share the same properties (e.g. commodity name for futures and options).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupName {
      get { return instrumentGroupName_ ?? InstrumentGroupNameDefaultValue; }
      set {
        instrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupName {
      get { return instrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupName() {
      instrumentGroupName_ = null;
    }

    /// <summary>Field number for the "session_info_id" field.</summary>
    public const int SessionInfoIdFieldNumber = 17;
    private readonly static int SessionInfoIdDefaultValue = 0;

    private int sessionInfoId_;
    /// <summary>
    /// ID of a session information this contract is related to.
    /// The field is set to -1 if session information is not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionInfoId {
      get { if ((_hasBits0 & 512) != 0) { return sessionInfoId_; } else { return SessionInfoIdDefaultValue; } }
      set {
        _hasBits0 |= 512;
        sessionInfoId_ = value;
      }
    }
    /// <summary>Gets whether the "session_info_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionInfoId {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "session_info_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionInfoId() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "mic" field.</summary>
    public const int MicFieldNumber = 18;
    private readonly static string MicDefaultValue = "";

    private string mic_;
    /// <summary>
    /// Market segment MIC (ISO 10383) of the contract (if available), e.g. 'GLBX'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mic {
      get { return mic_ ?? MicDefaultValue; }
      set {
        mic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMic {
      get { return mic_ != null; }
    }
    /// <summary>Clears the value of the "mic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMic() {
      mic_ = null;
    }

    /// <summary>Field number for the "mic_description" field.</summary>
    public const int MicDescriptionFieldNumber = 44;
    private readonly static string MicDescriptionDefaultValue = "";

    private string micDescription_;
    /// <summary>
    /// Market segment MIC description (ISO 10383) of the contract (if available), e.g. 'CME GLOBEX'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MicDescription {
      get { return micDescription_ ?? MicDescriptionDefaultValue; }
      set {
        micDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mic_description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMicDescription {
      get { return micDescription_ != null; }
    }
    /// <summary>Clears the value of the "mic_description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMicDescription() {
      micDescription_ = null;
    }

    /// <summary>Field number for the "market_data_delay" field.</summary>
    public const int MarketDataDelayFieldNumber = 20;
    private readonly static long MarketDataDelayDefaultValue = 0L;

    private long marketDataDelay_;
    /// <summary>
    /// If a user has access to delayed data of the contract
    /// then this parameter is set to the delay value in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MarketDataDelay {
      get { if ((_hasBits0 & 1024) != 0) { return marketDataDelay_; } else { return MarketDataDelayDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        marketDataDelay_ = value;
      }
    }
    /// <summary>Gets whether the "market_data_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketDataDelay {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "market_data_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketDataDelay() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "end_of_day_delay" field.</summary>
    public const int EndOfDayDelayFieldNumber = 59;
    private readonly static long EndOfDayDelayDefaultValue = 0L;

    private long endOfDayDelay_;
    /// <summary>
    /// If user is not allowed to receive quotes then End of Day (EOD) data for this contract can be allowed.
    /// In case of real-time market data subscriptions only level MARKET_VALUES is supported.
    /// In case of time bar requests only Daily (or larger) bars are supported.
    /// Note: Data for current and previous trading days are available only if corresponding trading day
    /// was closed |end_of_day_delay| milliseconds ago.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndOfDayDelay {
      get { if ((_hasBits0 & 1073741824) != 0) { return endOfDayDelay_; } else { return EndOfDayDelayDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        endOfDayDelay_ = value;
      }
    }
    /// <summary>Gets whether the "end_of_day_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndOfDayDelay {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "end_of_day_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndOfDayDelay() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "short_instrument_group_name" field.</summary>
    public const int ShortInstrumentGroupNameFieldNumber = 21;
    private readonly static string ShortInstrumentGroupNameDefaultValue = "";

    private string shortInstrumentGroupName_;
    /// <summary>
    /// Instrument group name without the prefix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortInstrumentGroupName {
      get { return shortInstrumentGroupName_ ?? ShortInstrumentGroupNameDefaultValue; }
      set {
        shortInstrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShortInstrumentGroupName {
      get { return shortInstrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "short_instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShortInstrumentGroupName() {
      shortInstrumentGroupName_ = null;
    }

    /// <summary>Field number for the "instrument_group_description" field.</summary>
    public const int InstrumentGroupDescriptionFieldNumber = 22;
    private readonly static string InstrumentGroupDescriptionDefaultValue = "";

    private string instrumentGroupDescription_;
    /// <summary>
    /// Description of the instrument group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupDescription {
      get { return instrumentGroupDescription_ ?? InstrumentGroupDescriptionDefaultValue; }
      set {
        instrumentGroupDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupDescription {
      get { return instrumentGroupDescription_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupDescription() {
      instrumentGroupDescription_ = null;
    }

    /// <summary>Field number for the "tick_sizes_by_price" field.</summary>
    public const int TickSizesByPriceFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Metadata2.TickSizeByPrice> _repeated_tickSizesByPrice_codec
        = pb::FieldCodec.ForMessage(186, global::Metadata2.TickSizeByPrice.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.TickSizeByPrice> tickSizesByPrice_ = new pbc::RepeatedField<global::Metadata2.TickSizeByPrice>();
    /// <summary>
    /// Variable tick size by contract price (if available for the contract).
    /// If variable tick sizes by contract price are available, tick_size and tick_value specify the minimal tick size
    /// and value among these.
    /// Only one of tick_sizes_by_price and tick_sizes_by_dte can be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.TickSizeByPrice> TickSizesByPrice {
      get { return tickSizesByPrice_; }
    }

    /// <summary>Field number for the "tick_sizes_by_dte" field.</summary>
    public const int TickSizesByDteFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Metadata2.TickSizeByDateTillExpiration> _repeated_tickSizesByDte_codec
        = pb::FieldCodec.ForMessage(194, global::Metadata2.TickSizeByDateTillExpiration.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.TickSizeByDateTillExpiration> tickSizesByDte_ = new pbc::RepeatedField<global::Metadata2.TickSizeByDateTillExpiration>();
    /// <summary>
    /// Variable tick size by date till expiration (if available for the contract).  Sorted by id in ascending order.
    /// If variable tick sizes by DTE are available, tick_size and tick_value specify the tick size and value applicable at
    /// the moment of symbol resolution.
    /// Only one of tick_sizes_by_price and tick_sizes_by_dte can be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.TickSizeByDateTillExpiration> TickSizesByDte {
      get { return tickSizesByDte_; }
    }

    /// <summary>Field number for the "tick_sizes_by_dte_id" field.</summary>
    public const int TickSizesByDteIdFieldNumber = 25;
    private readonly static uint TickSizesByDteIdDefaultValue = 0;

    private uint tickSizesByDteId_;
    /// <summary>
    /// Specifies which rule of TickSizeByDateTillExpiration applies now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TickSizesByDteId {
      get { if ((_hasBits0 & 2048) != 0) { return tickSizesByDteId_; } else { return TickSizesByDteIdDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        tickSizesByDteId_ = value;
      }
    }
    /// <summary>Gets whether the "tick_sizes_by_dte_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSizesByDteId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "tick_sizes_by_dte_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSizesByDteId() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 26;
    private readonly static int StrikeDefaultValue = 0;

    private int strike_;
    /// <summary>
    /// Option strike display value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Strike {
      get { if ((_hasBits0 & 4096) != 0) { return strike_; } else { return StrikeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        strike_ = value;
      }
    }
    /// <summary>Gets whether the "strike" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrike {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "strike" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrike() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "strike_price" field.</summary>
    public const int StrikePriceFieldNumber = 27;
    private readonly static double StrikePriceDefaultValue = 0D;

    private double strikePrice_;
    /// <summary>
    /// Option strike price value (directly in correct format).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StrikePrice {
      get { if ((_hasBits0 & 8192) != 0) { return strikePrice_; } else { return StrikePriceDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        strikePrice_ = value;
      }
    }
    /// <summary>Gets whether the "strike_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrikePrice {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "strike_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrikePrice() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "dialect_id" field.</summary>
    public const int DialectIdFieldNumber = 28;
    private readonly static string DialectIdDefaultValue = "";

    private string dialectId_;
    /// <summary>
    /// Dialect of the contract symbol.
    /// 0 - CQG dialect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DialectId {
      get { return dialectId_ ?? DialectIdDefaultValue; }
      set {
        dialectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dialect_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDialectId {
      get { return dialectId_ != null; }
    }
    /// <summary>Clears the value of the "dialect_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDialectId() {
      dialectId_ = null;
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 29;
    private readonly static string CountryCodeDefaultValue = "";

    private string countryCode_;
    /// <summary>
    /// Two-letter exchange country code (ISO 3166-1 alpha 2).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryCode {
      get { return countryCode_ ?? CountryCodeDefaultValue; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountryCode {
      get { return countryCode_ != null; }
    }
    /// <summary>Clears the value of the "country_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountryCode() {
      countryCode_ = null;
    }

    /// <summary>Field number for the "strategy_definition" field.</summary>
    public const int StrategyDefinitionFieldNumber = 30;
    private global::StrategyDefinition2.StrategyDefinition strategyDefinition_;
    /// <summary>
    /// Strategy definition if the contract is of a synthetic or a user defined strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::StrategyDefinition2.StrategyDefinition StrategyDefinition {
      get { return strategyDefinition_; }
      set {
        strategyDefinition_ = value;
      }
    }

    /// <summary>Field number for the "contract_size" field.</summary>
    public const int ContractSizeFieldNumber = 31;
    private readonly static string ContractSizeDefaultValue = "";

    private string contractSize_;
    /// <summary>
    /// The deliverable quantity of commodities or financial instruments underlying contract.
    /// E.g. "1,000 U.S. Barrels (42,000) Gallons", "125,000 Euro"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContractSize {
      get { return contractSize_ ?? ContractSizeDefaultValue; }
      set {
        contractSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contract_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractSize {
      get { return contractSize_ != null; }
    }
    /// <summary>Clears the value of the "contract_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractSize() {
      contractSize_ = null;
    }

    /// <summary>Field number for the "position_tracking" field.</summary>
    public const int PositionTrackingFieldNumber = 32;
    private readonly static uint PositionTrackingDefaultValue = 0;

    private uint positionTracking_;
    /// <summary>
    /// Setting which regulates how to calculate contract open positions.
    /// POSITION_TRACKING_TYPE_NET_POSITION, if not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PositionTracking {
      get { if ((_hasBits0 & 16384) != 0) { return positionTracking_; } else { return PositionTrackingDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        positionTracking_ = value;
      }
    }
    /// <summary>Gets whether the "position_tracking" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPositionTracking {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "position_tracking" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPositionTracking() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "speculation_type_required" field.</summary>
    public const int SpeculationTypeRequiredFieldNumber = 33;
    private readonly static bool SpeculationTypeRequiredDefaultValue = false;

    private bool speculationTypeRequired_;
    /// <summary>
    /// Setting which requires whether every contract order has to specify SpeculationType instruction or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SpeculationTypeRequired {
      get { if ((_hasBits0 & 32768) != 0) { return speculationTypeRequired_; } else { return SpeculationTypeRequiredDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        speculationTypeRequired_ = value;
      }
    }
    /// <summary>Gets whether the "speculation_type_required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeculationTypeRequired {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "speculation_type_required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeculationTypeRequired() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "maturity_month_year" field.</summary>
    public const int MaturityMonthYearFieldNumber = 34;
    private readonly static string MaturityMonthYearDefaultValue = "";

    private string maturityMonthYear_;
    /// <summary>
    /// Month letter and 2-digit year identifying the maturity month of the contract (if applicable).
    /// Doesn't depend on dialect.
    /// Month and corresponding letter:
    /// January   F
    /// February  G
    /// March     H
    /// April     J
    /// May       K
    /// June      M
    /// July      N
    /// August    Q
    /// September U
    /// October   V
    /// November  X
    /// December  Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityMonthYear {
      get { return maturityMonthYear_ ?? MaturityMonthYearDefaultValue; }
      set {
        maturityMonthYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturity_month_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityMonthYear {
      get { return maturityMonthYear_ != null; }
    }
    /// <summary>Clears the value of the "maturity_month_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityMonthYear() {
      maturityMonthYear_ = null;
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 53;
    private readonly static long MaturityDateDefaultValue = 0L;

    private long maturityDate_;
    /// <summary>
    /// Contract's maturity date (e.g. for daily futures, when maturity_month_year is not enough).
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaturityDate {
      get { if ((_hasBits0 & 67108864) != 0) { return maturityDate_; } else { return MaturityDateDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        maturityDate_ = value;
      }
    }
    /// <summary>Gets whether the "maturity_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityDate {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "maturity_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityDate() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "price_display_mode" field.</summary>
    public const int PriceDisplayModeFieldNumber = 35;
    private readonly static global::Metadata2.PriceDisplayMode PriceDisplayModeDefaultValue = global::Metadata2.PriceDisplayMode.Numerator;

    private global::Metadata2.PriceDisplayMode priceDisplayMode_;
    /// <summary>
    /// Recommended display mode for prices. See the PriceDisplayMode description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.PriceDisplayMode PriceDisplayMode {
      get { if ((_hasBits0 & 65536) != 0) { return priceDisplayMode_; } else { return PriceDisplayModeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        priceDisplayMode_ = value;
      }
    }
    /// <summary>Gets whether the "price_display_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriceDisplayMode {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "price_display_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriceDisplayMode() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "obsolete_discretionary_price_display_mode" field.</summary>
    public const int ObsoleteDiscretionaryPriceDisplayModeFieldNumber = 38;
    private readonly static global::Metadata2.PriceDisplayMode ObsoleteDiscretionaryPriceDisplayModeDefaultValue = global::Metadata2.PriceDisplayMode.Numerator;

    private global::Metadata2.PriceDisplayMode obsoleteDiscretionaryPriceDisplayMode_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.PriceDisplayMode ObsoleteDiscretionaryPriceDisplayMode {
      get { if ((_hasBits0 & 524288) != 0) { return obsoleteDiscretionaryPriceDisplayMode_; } else { return ObsoleteDiscretionaryPriceDisplayModeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        obsoleteDiscretionaryPriceDisplayMode_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_price_display_mode" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryPriceDisplayMode {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_price_display_mode" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryPriceDisplayMode() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "foreign_currency" field.</summary>
    public const int ForeignCurrencyFieldNumber = 39;
    private readonly static string ForeignCurrencyDefaultValue = "";

    private string foreignCurrency_;
    /// <summary>
    /// Currency code (ISO 4217 based). For forex contracts only. Specifies the currency bought or sold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ForeignCurrency {
      get { return foreignCurrency_ ?? ForeignCurrencyDefaultValue; }
      set {
        foreignCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "foreign_currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForeignCurrency {
      get { return foreignCurrency_ != null; }
    }
    /// <summary>Clears the value of the "foreign_currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForeignCurrency() {
      foreignCurrency_ = null;
    }

    /// <summary>Field number for the "volume_scale" field.</summary>
    public const int VolumeScaleFieldNumber = 40;
    private global::Cqg.Decimal volumeScale_;
    /// <summary>
    /// Specifies a volume unit of a contract, similar to correct_price_scale.
    /// If a message contains a volume as uint64 (like Quote or TimeBar), its correct volume is calculated as:
    ///   correct_volume = Quote.volume * volume_scale.
    /// If a message contains a volume as cqg.Decimal, it is the correct volume.
    /// If a contract has no fixed scale, this value is 1, and only cqg.Decimal volumes must be used.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal VolumeScale {
      get { return volumeScale_; }
      set {
        volumeScale_ = value;
      }
    }

    /// <summary>Field number for the "volume_display_exponent" field.</summary>
    public const int VolumeDisplayExponentFieldNumber = 41;
    private readonly static int VolumeDisplayExponentDefaultValue = 0;

    private int volumeDisplayExponent_;
    /// <summary>
    /// Specifies the recommended representation of volumes to users:
    ///  - negative numbers - -N - mean that N decimal digits should be shown.
    ///  - positive numbers - N - mean that N digits can be hidden behind a unit prefix (or unit symbol),
    ///    e.g. if N = 3, volumes can be shown as "12k".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolumeDisplayExponent {
      get { if ((_hasBits0 & 1048576) != 0) { return volumeDisplayExponent_; } else { return VolumeDisplayExponentDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        volumeDisplayExponent_ = value;
      }
    }
    /// <summary>Gets whether the "volume_display_exponent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolumeDisplayExponent {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "volume_display_exponent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolumeDisplayExponent() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "trade_size_increment" field.</summary>
    public const int TradeSizeIncrementFieldNumber = 42;
    private global::Cqg.Decimal tradeSizeIncrement_;
    /// <summary>
    /// Trade volume is required to be a multiple of trade_size_increment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal TradeSizeIncrement {
      get { return tradeSizeIncrement_; }
      set {
        tradeSizeIncrement_ = value;
      }
    }

    /// <summary>Field number for the "has_inverted_price_ladder" field.</summary>
    public const int HasInvertedPriceLadderFieldNumber = 60;
    private readonly static bool HasInvertedPriceLadderDefaultValue = false;

    private bool hasInvertedPriceLadder_;
    /// <summary>
    /// True if DOM views should be inverted: low numbers are at the top, high numbers are at the bottom.
    /// This field is usually set for fixed income contracts with "prices are yields" model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInvertedPriceLadder {
      get { if ((_hasBits0 & -2147483648) != 0) { return hasInvertedPriceLadder_; } else { return HasInvertedPriceLadderDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        hasInvertedPriceLadder_ = value;
      }
    }
    /// <summary>Gets whether the "has_inverted_price_ladder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasInvertedPriceLadder {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "has_inverted_price_ladder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasInvertedPriceLadder() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "dom_ladder_compression_ratio" field.</summary>
    public const int DomLadderCompressionRatioFieldNumber = 45;
    private readonly static uint DomLadderCompressionRatioDefaultValue = 0;

    private uint domLadderCompressionRatio_;
    /// <summary>
    /// The denominator (numerator is 1) of the DOM ladder compression ratio
    /// to compress the ladder to eliminate all the extra/non-quoting values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DomLadderCompressionRatio {
      get { if ((_hasBits0 & 2097152) != 0) { return domLadderCompressionRatio_; } else { return DomLadderCompressionRatioDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        domLadderCompressionRatio_ = value;
      }
    }
    /// <summary>Gets whether the "dom_ladder_compression_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomLadderCompressionRatio {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "dom_ladder_compression_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomLadderCompressionRatio() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "expect_off_tick_prices" field.</summary>
    public const int ExpectOffTickPricesFieldNumber = 46;
    private readonly static bool ExpectOffTickPricesDefaultValue = false;

    private bool expectOffTickPrices_;
    /// <summary>
    /// Whether to expect that prices may appear not on the nominal tick prices
    /// (not products of any tick_size: ordinal, variable, etc.) to changes DOM UI behavior.
    /// Format such prices according to display_price_scale rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExpectOffTickPrices {
      get { if ((_hasBits0 & 4194304) != 0) { return expectOffTickPrices_; } else { return ExpectOffTickPricesDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        expectOffTickPrices_ = value;
      }
    }
    /// <summary>Gets whether the "expect_off_tick_prices" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpectOffTickPrices {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "expect_off_tick_prices" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpectOffTickPrices() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "has_exchange_volume" field.</summary>
    public const int HasExchangeVolumeFieldNumber = 47;
    private readonly static bool HasExchangeVolumeDefaultValue = true;

    private bool hasExchangeVolume_;
    /// <summary>
    /// Specifies whether exchange provides volume data or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchangeVolume {
      get { if ((_hasBits0 & 8388608) != 0) { return hasExchangeVolume_; } else { return HasExchangeVolumeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        hasExchangeVolume_ = value;
      }
    }
    /// <summary>Gets whether the "has_exchange_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasExchangeVolume {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "has_exchange_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasExchangeVolume() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "has_yields" field.</summary>
    public const int HasYieldsFieldNumber = 61;
    private readonly static bool HasYieldsDefaultValue = false;

    private bool hasYields_;
    /// <summary>
    /// True if the contract supports yields and you can request them with MarketDataSubscription.include_yields.
    /// Note: In case the contract has "prices are yields" model this field is false and yields are provided
    /// through the price field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYields {
      get { if ((_hasBits1 & 1) != 0) { return hasYields_; } else { return HasYieldsDefaultValue; } }
      set {
        _hasBits1 |= 1;
        hasYields_ = value;
      }
    }
    /// <summary>Gets whether the "has_yields" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasYields {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "has_yields" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasYields() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 48;
    private readonly static string IsinDefaultValue = "";

    private string isin_;
    /// <summary>
    /// The ISIN code acts an identifier for the securities.
    /// And as such is the only common denominator securities identification number that is universally recognized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_ ?? IsinDefaultValue; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "isin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsin {
      get { return isin_ != null; }
    }
    /// <summary>Clears the value of the "isin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsin() {
      isin_ = null;
    }

    /// <summary>Field number for the "maintenance_margin" field.</summary>
    public const int MaintenanceMarginFieldNumber = 49;
    private readonly static double MaintenanceMarginDefaultValue = 0D;

    private double maintenanceMargin_;
    /// <summary>
    /// Reference value for maintenance margin (required to maintain 1 lot position
    /// in this contract), expressed as money value in the contract's currency.
    /// Note the value is informational only, not updated real-time, and does not
    /// consider the account's portfolio or risk settings/parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintenanceMargin {
      get { if ((_hasBits0 & 16777216) != 0) { return maintenanceMargin_; } else { return MaintenanceMarginDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        maintenanceMargin_ = value;
      }
    }
    /// <summary>Gets whether the "maintenance_margin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintenanceMargin {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "maintenance_margin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintenanceMargin() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "contract_size_in_units" field.</summary>
    public const int ContractSizeInUnitsFieldNumber = 50;
    private global::Cqg.Decimal contractSizeInUnits_;
    /// <summary>
    /// Contract size in the number of units (where defined). Unit is defined by contract_size_unit filed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal ContractSizeInUnits {
      get { return contractSizeInUnits_; }
      set {
        contractSizeInUnits_ = value;
      }
    }

    /// <summary>Field number for the "contract_size_unit" field.</summary>
    public const int ContractSizeUnitFieldNumber = 51;
    private global::Shared1.Text contractSizeUnit_;
    /// <summary>
    /// Unit label for the contract size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Shared1.Text ContractSizeUnit {
      get { return contractSizeUnit_; }
      set {
        contractSizeUnit_ = value;
      }
    }

    /// <summary>Field number for the "last_delivery_date" field.</summary>
    public const int LastDeliveryDateFieldNumber = 52;
    private readonly static long LastDeliveryDateDefaultValue = 0L;

    private long lastDeliveryDate_;
    /// <summary>
    /// Contract last delivery date
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastDeliveryDate {
      get { if ((_hasBits0 & 33554432) != 0) { return lastDeliveryDate_; } else { return LastDeliveryDateDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        lastDeliveryDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_delivery_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastDeliveryDate {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "last_delivery_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastDeliveryDate() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "contributor_parameters" field.</summary>
    public const int ContributorParametersFieldNumber = 54;
    private static readonly pb::FieldCodec<global::MetadataAdmin2.ContributorParameters> _repeated_contributorParameters_codec
        = pb::FieldCodec.ForMessage(434, global::MetadataAdmin2.ContributorParameters.Parser);
    private readonly pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> contributorParameters_ = new pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters>();
    /// <summary>
    /// Optional custom contract parameters per associated OTC contributor (if any).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> ContributorParameters {
      get { return contributorParameters_; }
    }

    /// <summary>Field number for the "period_type" field.</summary>
    public const int PeriodTypeFieldNumber = 55;
    private readonly static uint PeriodTypeDefaultValue = 0;

    private uint periodType_;
    /// <summary>
    /// Period type. This field is associated with PeriodType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PeriodType {
      get { if ((_hasBits0 & 134217728) != 0) { return periodType_; } else { return PeriodTypeDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        periodType_ = value;
      }
    }
    /// <summary>Gets whether the "period_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPeriodType {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "period_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPeriodType() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "period_value" field.</summary>
    public const int PeriodValueFieldNumber = 56;
    private readonly static uint PeriodValueDefaultValue = 0;

    private uint periodValue_;
    /// <summary>
    /// Period value in period_type units.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PeriodValue {
      get { if ((_hasBits0 & 268435456) != 0) { return periodValue_; } else { return PeriodValueDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        periodValue_ = value;
      }
    }
    /// <summary>Gets whether the "period_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPeriodValue {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "period_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPeriodValue() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "symbol_id" field.</summary>
    public const int SymbolIdFieldNumber = 57;
    private readonly static string SymbolIdDefaultValue = "";

    private string symbolId_;
    /// <summary>
    /// ID of the symbol the contract represents (Symbol.id attribute).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SymbolId {
      get { return symbolId_ ?? SymbolIdDefaultValue; }
      set {
        symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbolId {
      get { return symbolId_ != null; }
    }
    /// <summary>Clears the value of the "symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbolId() {
      symbolId_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 58;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// If contract metadata is "deleted", corresponding contract id can't be referred to in requests anymore
    /// (this happens e.g. when published contract gets unpublished).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 536870912) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "contributor_group_id" field.</summary>
    public const int ContributorGroupIdFieldNumber = 62;
    private readonly static int ContributorGroupIdDefaultValue = 0;

    private int contributorGroupId_;
    /// <summary>
    /// ID used for ContributorMetadataRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ContributorGroupId {
      get { if ((_hasBits1 & 2) != 0) { return contributorGroupId_; } else { return ContributorGroupIdDefaultValue; } }
      set {
        _hasBits1 |= 2;
        contributorGroupId_ = value;
      }
    }
    /// <summary>Gets whether the "contributor_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorGroupId {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "contributor_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorGroupId() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "source_contract_id" field.</summary>
    public const int SourceContractIdFieldNumber = 63;
    private readonly static uint SourceContractIdDefaultValue = 0;

    private uint sourceContractId_;
    /// <summary>
    /// If this instrument is double-quoted the field contains a contract id
    /// to request corresponding source contract metadata (see ContractMetadataRequest).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SourceContractId {
      get { if ((_hasBits1 & 4) != 0) { return sourceContractId_; } else { return SourceContractIdDefaultValue; } }
      set {
        _hasBits1 |= 4;
        sourceContractId_ = value;
      }
    }
    /// <summary>Gets whether the "source_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSourceContractId {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "source_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSourceContractId() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 66;
    private readonly static string IssuerDefaultValue = "";

    private string issuer_;
    /// <summary>
    /// Equity issuer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Issuer {
      get { return issuer_ ?? IssuerDefaultValue; }
      set {
        issuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "issuer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIssuer {
      get { return issuer_ != null; }
    }
    /// <summary>Clears the value of the "issuer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIssuer() {
      issuer_ = null;
    }

    /// <summary>Field number for the "option_maturity_id" field.</summary>
    public const int OptionMaturityIdFieldNumber = 67;
    private readonly static string OptionMaturityIdDefaultValue = "";

    private string optionMaturityId_;
    /// <summary>
    /// Option contract's maturity ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OptionMaturityId {
      get { return optionMaturityId_ ?? OptionMaturityIdDefaultValue; }
      set {
        optionMaturityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "option_maturity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptionMaturityId {
      get { return optionMaturityId_ != null; }
    }
    /// <summary>Clears the value of the "option_maturity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptionMaturityId() {
      optionMaturityId_ = null;
    }

    /// <summary>Field number for the "conversion_metadata" field.</summary>
    public const int ConversionMetadataFieldNumber = 68;
    private global::Metadata2.ConversionMetadata conversionMetadata_;
    /// <summary>
    /// Metadata used for real-time and trading data conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ConversionMetadata ConversionMetadata {
      get { return conversionMetadata_; }
      set {
        conversionMetadata_ = value;
      }
    }

    /// <summary>Field number for the "market_state_group_id" field.</summary>
    public const int MarketStateGroupIdFieldNumber = 69;
    private readonly static int MarketStateGroupIdDefaultValue = 0;

    private int marketStateGroupId_;
    /// <summary>
    /// ID used for MarketStateMetadataRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarketStateGroupId {
      get { if ((_hasBits1 & 8) != 0) { return marketStateGroupId_; } else { return MarketStateGroupIdDefaultValue; } }
      set {
        _hasBits1 |= 8;
        marketStateGroupId_ = value;
      }
    }
    /// <summary>Gets whether the "market_state_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketStateGroupId {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "market_state_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketStateGroupId() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "settlement_method" field.</summary>
    public const int SettlementMethodFieldNumber = 71;
    private readonly static uint SettlementMethodDefaultValue = 0;

    private uint settlementMethod_;
    /// <summary>
    /// Settlement method.
    /// This field is associated with SettlementMethod enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SettlementMethod {
      get { if ((_hasBits1 & 16) != 0) { return settlementMethod_; } else { return SettlementMethodDefaultValue; } }
      set {
        _hasBits1 |= 16;
        settlementMethod_ = value;
      }
    }
    /// <summary>Gets whether the "settlement_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSettlementMethod {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "settlement_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSettlementMethod() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "exercise_style" field.</summary>
    public const int ExerciseStyleFieldNumber = 72;
    private readonly static uint ExerciseStyleDefaultValue = 0;

    private uint exerciseStyle_;
    /// <summary>
    /// Exercise style, for options only.
    /// This field is associated with ExerciseStyle enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExerciseStyle {
      get { if ((_hasBits1 & 32) != 0) { return exerciseStyle_; } else { return ExerciseStyleDefaultValue; } }
      set {
        _hasBits1 |= 32;
        exerciseStyle_ = value;
      }
    }
    /// <summary>Gets whether the "exercise_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExerciseStyle {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "exercise_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExerciseStyle() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "pricing_convention" field.</summary>
    public const int PricingConventionFieldNumber = 73;
    private readonly static uint PricingConventionDefaultValue = 0;

    private uint pricingConvention_;
    /// <summary>
    /// Pricing convention.
    /// This field is associated with PricingConvention enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PricingConvention {
      get { if ((_hasBits1 & 64) != 0) { return pricingConvention_; } else { return PricingConventionDefaultValue; } }
      set {
        _hasBits1 |= 64;
        pricingConvention_ = value;
      }
    }
    /// <summary>Gets whether the "pricing_convention" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPricingConvention {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "pricing_convention" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPricingConvention() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "is_user_defined_instrument" field.</summary>
    public const int IsUserDefinedInstrumentFieldNumber = 74;
    private readonly static bool IsUserDefinedInstrumentDefaultValue = false;

    private bool isUserDefinedInstrument_;
    /// <summary>
    /// True if contract represents user-defined instrument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUserDefinedInstrument {
      get { if ((_hasBits1 & 128) != 0) { return isUserDefinedInstrument_; } else { return IsUserDefinedInstrumentDefaultValue; } }
      set {
        _hasBits1 |= 128;
        isUserDefinedInstrument_ = value;
      }
    }
    /// <summary>Gets whether the "is_user_defined_instrument" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUserDefinedInstrument {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_user_defined_instrument" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUserDefinedInstrument() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "bar_building_tick_types" field.</summary>
    public const int BarBuildingTickTypesFieldNumber = 75;
    private static readonly pb::FieldCodec<uint> _repeated_barBuildingTickTypes_codec
        = pb::FieldCodec.ForUInt32(600);
    private readonly pbc::RepeatedField<uint> barBuildingTickTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of tick types used in bar building.
    /// This field is associated with BarBuildingTickType enum type.
    /// Note: BAR_BUILDING_TICK_TYPE_SETTLEMENT is used only in build time bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> BarBuildingTickTypes {
      get { return barBuildingTickTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContractMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContractMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (ContractSymbol != other.ContractSymbol) return false;
      if (CqgContractSymbol != other.CqgContractSymbol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CorrectPriceScale, other.CorrectPriceScale)) return false;
      if (DisplayPriceScale != other.DisplayPriceScale) return false;
      if (ObsoleteDiscretionaryDisplayPriceScale != other.ObsoleteDiscretionaryDisplayPriceScale) return false;
      if (Description != other.Description) return false;
      if (ExtendedDescription != other.ExtendedDescription) return false;
      if (Title != other.Title) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObsoleteDiscretionaryTickSize, other.ObsoleteDiscretionaryTickSize)) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (CfiCode != other.CfiCode) return false;
      if (IsMostActive != other.IsMostActive) return false;
      if (LastTradingDate != other.LastTradingDate) return false;
      if (FirstNoticeDate != other.FirstNoticeDate) return false;
      if (UnderlyingContractSymbol != other.UnderlyingContractSymbol) return false;
      if (MarginStyle != other.MarginStyle) return false;
      if (InstrumentGroupName != other.InstrumentGroupName) return false;
      if (SessionInfoId != other.SessionInfoId) return false;
      if (Mic != other.Mic) return false;
      if (MicDescription != other.MicDescription) return false;
      if (MarketDataDelay != other.MarketDataDelay) return false;
      if (EndOfDayDelay != other.EndOfDayDelay) return false;
      if (ShortInstrumentGroupName != other.ShortInstrumentGroupName) return false;
      if (InstrumentGroupDescription != other.InstrumentGroupDescription) return false;
      if(!tickSizesByPrice_.Equals(other.tickSizesByPrice_)) return false;
      if(!tickSizesByDte_.Equals(other.tickSizesByDte_)) return false;
      if (TickSizesByDteId != other.TickSizesByDteId) return false;
      if (Strike != other.Strike) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (DialectId != other.DialectId) return false;
      if (CountryCode != other.CountryCode) return false;
      if (!object.Equals(StrategyDefinition, other.StrategyDefinition)) return false;
      if (ContractSize != other.ContractSize) return false;
      if (PositionTracking != other.PositionTracking) return false;
      if (SpeculationTypeRequired != other.SpeculationTypeRequired) return false;
      if (MaturityMonthYear != other.MaturityMonthYear) return false;
      if (MaturityDate != other.MaturityDate) return false;
      if (PriceDisplayMode != other.PriceDisplayMode) return false;
      if (ObsoleteDiscretionaryPriceDisplayMode != other.ObsoleteDiscretionaryPriceDisplayMode) return false;
      if (ForeignCurrency != other.ForeignCurrency) return false;
      if (!object.Equals(VolumeScale, other.VolumeScale)) return false;
      if (VolumeDisplayExponent != other.VolumeDisplayExponent) return false;
      if (!object.Equals(TradeSizeIncrement, other.TradeSizeIncrement)) return false;
      if (HasInvertedPriceLadder != other.HasInvertedPriceLadder) return false;
      if (DomLadderCompressionRatio != other.DomLadderCompressionRatio) return false;
      if (ExpectOffTickPrices != other.ExpectOffTickPrices) return false;
      if (HasExchangeVolume != other.HasExchangeVolume) return false;
      if (HasYields != other.HasYields) return false;
      if (Isin != other.Isin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintenanceMargin, other.MaintenanceMargin)) return false;
      if (!object.Equals(ContractSizeInUnits, other.ContractSizeInUnits)) return false;
      if (!object.Equals(ContractSizeUnit, other.ContractSizeUnit)) return false;
      if (LastDeliveryDate != other.LastDeliveryDate) return false;
      if(!contributorParameters_.Equals(other.contributorParameters_)) return false;
      if (PeriodType != other.PeriodType) return false;
      if (PeriodValue != other.PeriodValue) return false;
      if (SymbolId != other.SymbolId) return false;
      if (Deleted != other.Deleted) return false;
      if (ContributorGroupId != other.ContributorGroupId) return false;
      if (SourceContractId != other.SourceContractId) return false;
      if (Issuer != other.Issuer) return false;
      if (OptionMaturityId != other.OptionMaturityId) return false;
      if (!object.Equals(ConversionMetadata, other.ConversionMetadata)) return false;
      if (MarketStateGroupId != other.MarketStateGroupId) return false;
      if (SettlementMethod != other.SettlementMethod) return false;
      if (ExerciseStyle != other.ExerciseStyle) return false;
      if (PricingConvention != other.PricingConvention) return false;
      if (IsUserDefinedInstrument != other.IsUserDefinedInstrument) return false;
      if(!barBuildingTickTypes_.Equals(other.barBuildingTickTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasContractSymbol) hash ^= ContractSymbol.GetHashCode();
      if (HasCqgContractSymbol) hash ^= CqgContractSymbol.GetHashCode();
      if (HasCorrectPriceScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CorrectPriceScale);
      if (HasDisplayPriceScale) hash ^= DisplayPriceScale.GetHashCode();
      if (HasObsoleteDiscretionaryDisplayPriceScale) hash ^= ObsoleteDiscretionaryDisplayPriceScale.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasExtendedDescription) hash ^= ExtendedDescription.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasObsoleteDiscretionaryTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObsoleteDiscretionaryTickSize);
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasIsMostActive) hash ^= IsMostActive.GetHashCode();
      if (HasLastTradingDate) hash ^= LastTradingDate.GetHashCode();
      if (HasFirstNoticeDate) hash ^= FirstNoticeDate.GetHashCode();
      if (HasUnderlyingContractSymbol) hash ^= UnderlyingContractSymbol.GetHashCode();
      if (HasMarginStyle) hash ^= MarginStyle.GetHashCode();
      if (HasInstrumentGroupName) hash ^= InstrumentGroupName.GetHashCode();
      if (HasSessionInfoId) hash ^= SessionInfoId.GetHashCode();
      if (HasMic) hash ^= Mic.GetHashCode();
      if (HasMicDescription) hash ^= MicDescription.GetHashCode();
      if (HasMarketDataDelay) hash ^= MarketDataDelay.GetHashCode();
      if (HasEndOfDayDelay) hash ^= EndOfDayDelay.GetHashCode();
      if (HasShortInstrumentGroupName) hash ^= ShortInstrumentGroupName.GetHashCode();
      if (HasInstrumentGroupDescription) hash ^= InstrumentGroupDescription.GetHashCode();
      hash ^= tickSizesByPrice_.GetHashCode();
      hash ^= tickSizesByDte_.GetHashCode();
      if (HasTickSizesByDteId) hash ^= TickSizesByDteId.GetHashCode();
      if (HasStrike) hash ^= Strike.GetHashCode();
      if (HasStrikePrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (HasDialectId) hash ^= DialectId.GetHashCode();
      if (HasCountryCode) hash ^= CountryCode.GetHashCode();
      if (strategyDefinition_ != null) hash ^= StrategyDefinition.GetHashCode();
      if (HasContractSize) hash ^= ContractSize.GetHashCode();
      if (HasPositionTracking) hash ^= PositionTracking.GetHashCode();
      if (HasSpeculationTypeRequired) hash ^= SpeculationTypeRequired.GetHashCode();
      if (HasMaturityMonthYear) hash ^= MaturityMonthYear.GetHashCode();
      if (HasMaturityDate) hash ^= MaturityDate.GetHashCode();
      if (HasPriceDisplayMode) hash ^= PriceDisplayMode.GetHashCode();
      if (HasObsoleteDiscretionaryPriceDisplayMode) hash ^= ObsoleteDiscretionaryPriceDisplayMode.GetHashCode();
      if (HasForeignCurrency) hash ^= ForeignCurrency.GetHashCode();
      if (volumeScale_ != null) hash ^= VolumeScale.GetHashCode();
      if (HasVolumeDisplayExponent) hash ^= VolumeDisplayExponent.GetHashCode();
      if (tradeSizeIncrement_ != null) hash ^= TradeSizeIncrement.GetHashCode();
      if (HasHasInvertedPriceLadder) hash ^= HasInvertedPriceLadder.GetHashCode();
      if (HasDomLadderCompressionRatio) hash ^= DomLadderCompressionRatio.GetHashCode();
      if (HasExpectOffTickPrices) hash ^= ExpectOffTickPrices.GetHashCode();
      if (HasHasExchangeVolume) hash ^= HasExchangeVolume.GetHashCode();
      if (HasHasYields) hash ^= HasYields.GetHashCode();
      if (HasIsin) hash ^= Isin.GetHashCode();
      if (HasMaintenanceMargin) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintenanceMargin);
      if (contractSizeInUnits_ != null) hash ^= ContractSizeInUnits.GetHashCode();
      if (contractSizeUnit_ != null) hash ^= ContractSizeUnit.GetHashCode();
      if (HasLastDeliveryDate) hash ^= LastDeliveryDate.GetHashCode();
      hash ^= contributorParameters_.GetHashCode();
      if (HasPeriodType) hash ^= PeriodType.GetHashCode();
      if (HasPeriodValue) hash ^= PeriodValue.GetHashCode();
      if (HasSymbolId) hash ^= SymbolId.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasContributorGroupId) hash ^= ContributorGroupId.GetHashCode();
      if (HasSourceContractId) hash ^= SourceContractId.GetHashCode();
      if (HasIssuer) hash ^= Issuer.GetHashCode();
      if (HasOptionMaturityId) hash ^= OptionMaturityId.GetHashCode();
      if (conversionMetadata_ != null) hash ^= ConversionMetadata.GetHashCode();
      if (HasMarketStateGroupId) hash ^= MarketStateGroupId.GetHashCode();
      if (HasSettlementMethod) hash ^= SettlementMethod.GetHashCode();
      if (HasExerciseStyle) hash ^= ExerciseStyle.GetHashCode();
      if (HasPricingConvention) hash ^= PricingConvention.GetHashCode();
      if (HasIsUserDefinedInstrument) hash ^= IsUserDefinedInstrument.GetHashCode();
      hash ^= barBuildingTickTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasContractSymbol) {
        output.WriteRawTag(18);
        output.WriteString(ContractSymbol);
      }
      if (HasCorrectPriceScale) {
        output.WriteRawTag(25);
        output.WriteDouble(CorrectPriceScale);
      }
      if (HasDisplayPriceScale) {
        output.WriteRawTag(32);
        output.WriteUInt32(DisplayPriceScale);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasTitle) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (HasTickSize) {
        output.WriteRawTag(57);
        output.WriteDouble(TickSize);
      }
      if (HasCurrency) {
        output.WriteRawTag(66);
        output.WriteString(Currency);
      }
      if (HasTickValue) {
        output.WriteRawTag(73);
        output.WriteDouble(TickValue);
      }
      if (HasCfiCode) {
        output.WriteRawTag(82);
        output.WriteString(CfiCode);
      }
      if (HasIsMostActive) {
        output.WriteRawTag(88);
        output.WriteBool(IsMostActive);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(96);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasFirstNoticeDate) {
        output.WriteRawTag(104);
        output.WriteSInt64(FirstNoticeDate);
      }
      if (HasUnderlyingContractSymbol) {
        output.WriteRawTag(114);
        output.WriteString(UnderlyingContractSymbol);
      }
      if (HasMarginStyle) {
        output.WriteRawTag(120);
        output.WriteUInt32(MarginStyle);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(130, 1);
        output.WriteString(InstrumentGroupName);
      }
      if (HasSessionInfoId) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasMic) {
        output.WriteRawTag(146, 1);
        output.WriteString(Mic);
      }
      if (HasMarketDataDelay) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(MarketDataDelay);
      }
      if (HasShortInstrumentGroupName) {
        output.WriteRawTag(170, 1);
        output.WriteString(ShortInstrumentGroupName);
      }
      if (HasInstrumentGroupDescription) {
        output.WriteRawTag(178, 1);
        output.WriteString(InstrumentGroupDescription);
      }
      tickSizesByPrice_.WriteTo(output, _repeated_tickSizesByPrice_codec);
      tickSizesByDte_.WriteTo(output, _repeated_tickSizesByDte_codec);
      if (HasTickSizesByDteId) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TickSizesByDteId);
      }
      if (HasStrike) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(Strike);
      }
      if (HasStrikePrice) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(StrikePrice);
      }
      if (HasDialectId) {
        output.WriteRawTag(226, 1);
        output.WriteString(DialectId);
      }
      if (HasCountryCode) {
        output.WriteRawTag(234, 1);
        output.WriteString(CountryCode);
      }
      if (strategyDefinition_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(StrategyDefinition);
      }
      if (HasContractSize) {
        output.WriteRawTag(250, 1);
        output.WriteString(ContractSize);
      }
      if (HasPositionTracking) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(PositionTracking);
      }
      if (HasSpeculationTypeRequired) {
        output.WriteRawTag(136, 2);
        output.WriteBool(SpeculationTypeRequired);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(146, 2);
        output.WriteString(MaturityMonthYear);
      }
      if (HasPriceDisplayMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) PriceDisplayMode);
      }
      if (HasObsoleteDiscretionaryTickSize) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(ObsoleteDiscretionaryTickSize);
      }
      if (HasObsoleteDiscretionaryDisplayPriceScale) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(ObsoleteDiscretionaryDisplayPriceScale);
      }
      if (HasObsoleteDiscretionaryPriceDisplayMode) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ObsoleteDiscretionaryPriceDisplayMode);
      }
      if (HasForeignCurrency) {
        output.WriteRawTag(186, 2);
        output.WriteString(ForeignCurrency);
      }
      if (volumeScale_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(VolumeScale);
      }
      if (HasVolumeDisplayExponent) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(VolumeDisplayExponent);
      }
      if (tradeSizeIncrement_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(TradeSizeIncrement);
      }
      if (HasExtendedDescription) {
        output.WriteRawTag(218, 2);
        output.WriteString(ExtendedDescription);
      }
      if (HasMicDescription) {
        output.WriteRawTag(226, 2);
        output.WriteString(MicDescription);
      }
      if (HasDomLadderCompressionRatio) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(DomLadderCompressionRatio);
      }
      if (HasExpectOffTickPrices) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ExpectOffTickPrices);
      }
      if (HasHasExchangeVolume) {
        output.WriteRawTag(248, 2);
        output.WriteBool(HasExchangeVolume);
      }
      if (HasIsin) {
        output.WriteRawTag(130, 3);
        output.WriteString(Isin);
      }
      if (HasMaintenanceMargin) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(MaintenanceMargin);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(ContractSizeUnit);
      }
      if (HasLastDeliveryDate) {
        output.WriteRawTag(160, 3);
        output.WriteSInt64(LastDeliveryDate);
      }
      if (HasMaturityDate) {
        output.WriteRawTag(168, 3);
        output.WriteSInt64(MaturityDate);
      }
      contributorParameters_.WriteTo(output, _repeated_contributorParameters_codec);
      if (HasPeriodType) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(PeriodValue);
      }
      if (HasSymbolId) {
        output.WriteRawTag(202, 3);
        output.WriteString(SymbolId);
      }
      if (HasDeleted) {
        output.WriteRawTag(208, 3);
        output.WriteBool(Deleted);
      }
      if (HasEndOfDayDelay) {
        output.WriteRawTag(216, 3);
        output.WriteSInt64(EndOfDayDelay);
      }
      if (HasHasInvertedPriceLadder) {
        output.WriteRawTag(224, 3);
        output.WriteBool(HasInvertedPriceLadder);
      }
      if (HasHasYields) {
        output.WriteRawTag(232, 3);
        output.WriteBool(HasYields);
      }
      if (HasContributorGroupId) {
        output.WriteRawTag(240, 3);
        output.WriteSInt32(ContributorGroupId);
      }
      if (HasSourceContractId) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(SourceContractId);
      }
      if (HasIssuer) {
        output.WriteRawTag(146, 4);
        output.WriteString(Issuer);
      }
      if (HasOptionMaturityId) {
        output.WriteRawTag(154, 4);
        output.WriteString(OptionMaturityId);
      }
      if (conversionMetadata_ != null) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(ConversionMetadata);
      }
      if (HasMarketStateGroupId) {
        output.WriteRawTag(168, 4);
        output.WriteSInt32(MarketStateGroupId);
      }
      if (HasCqgContractSymbol) {
        output.WriteRawTag(178, 4);
        output.WriteString(CqgContractSymbol);
      }
      if (HasSettlementMethod) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(SettlementMethod);
      }
      if (HasExerciseStyle) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(ExerciseStyle);
      }
      if (HasPricingConvention) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(PricingConvention);
      }
      if (HasIsUserDefinedInstrument) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsUserDefinedInstrument);
      }
      barBuildingTickTypes_.WriteTo(output, _repeated_barBuildingTickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasContractSymbol) {
        output.WriteRawTag(18);
        output.WriteString(ContractSymbol);
      }
      if (HasCorrectPriceScale) {
        output.WriteRawTag(25);
        output.WriteDouble(CorrectPriceScale);
      }
      if (HasDisplayPriceScale) {
        output.WriteRawTag(32);
        output.WriteUInt32(DisplayPriceScale);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasTitle) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (HasTickSize) {
        output.WriteRawTag(57);
        output.WriteDouble(TickSize);
      }
      if (HasCurrency) {
        output.WriteRawTag(66);
        output.WriteString(Currency);
      }
      if (HasTickValue) {
        output.WriteRawTag(73);
        output.WriteDouble(TickValue);
      }
      if (HasCfiCode) {
        output.WriteRawTag(82);
        output.WriteString(CfiCode);
      }
      if (HasIsMostActive) {
        output.WriteRawTag(88);
        output.WriteBool(IsMostActive);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(96);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasFirstNoticeDate) {
        output.WriteRawTag(104);
        output.WriteSInt64(FirstNoticeDate);
      }
      if (HasUnderlyingContractSymbol) {
        output.WriteRawTag(114);
        output.WriteString(UnderlyingContractSymbol);
      }
      if (HasMarginStyle) {
        output.WriteRawTag(120);
        output.WriteUInt32(MarginStyle);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(130, 1);
        output.WriteString(InstrumentGroupName);
      }
      if (HasSessionInfoId) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasMic) {
        output.WriteRawTag(146, 1);
        output.WriteString(Mic);
      }
      if (HasMarketDataDelay) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(MarketDataDelay);
      }
      if (HasShortInstrumentGroupName) {
        output.WriteRawTag(170, 1);
        output.WriteString(ShortInstrumentGroupName);
      }
      if (HasInstrumentGroupDescription) {
        output.WriteRawTag(178, 1);
        output.WriteString(InstrumentGroupDescription);
      }
      tickSizesByPrice_.WriteTo(ref output, _repeated_tickSizesByPrice_codec);
      tickSizesByDte_.WriteTo(ref output, _repeated_tickSizesByDte_codec);
      if (HasTickSizesByDteId) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TickSizesByDteId);
      }
      if (HasStrike) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(Strike);
      }
      if (HasStrikePrice) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(StrikePrice);
      }
      if (HasDialectId) {
        output.WriteRawTag(226, 1);
        output.WriteString(DialectId);
      }
      if (HasCountryCode) {
        output.WriteRawTag(234, 1);
        output.WriteString(CountryCode);
      }
      if (strategyDefinition_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(StrategyDefinition);
      }
      if (HasContractSize) {
        output.WriteRawTag(250, 1);
        output.WriteString(ContractSize);
      }
      if (HasPositionTracking) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(PositionTracking);
      }
      if (HasSpeculationTypeRequired) {
        output.WriteRawTag(136, 2);
        output.WriteBool(SpeculationTypeRequired);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(146, 2);
        output.WriteString(MaturityMonthYear);
      }
      if (HasPriceDisplayMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) PriceDisplayMode);
      }
      if (HasObsoleteDiscretionaryTickSize) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(ObsoleteDiscretionaryTickSize);
      }
      if (HasObsoleteDiscretionaryDisplayPriceScale) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(ObsoleteDiscretionaryDisplayPriceScale);
      }
      if (HasObsoleteDiscretionaryPriceDisplayMode) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ObsoleteDiscretionaryPriceDisplayMode);
      }
      if (HasForeignCurrency) {
        output.WriteRawTag(186, 2);
        output.WriteString(ForeignCurrency);
      }
      if (volumeScale_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(VolumeScale);
      }
      if (HasVolumeDisplayExponent) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(VolumeDisplayExponent);
      }
      if (tradeSizeIncrement_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(TradeSizeIncrement);
      }
      if (HasExtendedDescription) {
        output.WriteRawTag(218, 2);
        output.WriteString(ExtendedDescription);
      }
      if (HasMicDescription) {
        output.WriteRawTag(226, 2);
        output.WriteString(MicDescription);
      }
      if (HasDomLadderCompressionRatio) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(DomLadderCompressionRatio);
      }
      if (HasExpectOffTickPrices) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ExpectOffTickPrices);
      }
      if (HasHasExchangeVolume) {
        output.WriteRawTag(248, 2);
        output.WriteBool(HasExchangeVolume);
      }
      if (HasIsin) {
        output.WriteRawTag(130, 3);
        output.WriteString(Isin);
      }
      if (HasMaintenanceMargin) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(MaintenanceMargin);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(ContractSizeUnit);
      }
      if (HasLastDeliveryDate) {
        output.WriteRawTag(160, 3);
        output.WriteSInt64(LastDeliveryDate);
      }
      if (HasMaturityDate) {
        output.WriteRawTag(168, 3);
        output.WriteSInt64(MaturityDate);
      }
      contributorParameters_.WriteTo(ref output, _repeated_contributorParameters_codec);
      if (HasPeriodType) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(PeriodValue);
      }
      if (HasSymbolId) {
        output.WriteRawTag(202, 3);
        output.WriteString(SymbolId);
      }
      if (HasDeleted) {
        output.WriteRawTag(208, 3);
        output.WriteBool(Deleted);
      }
      if (HasEndOfDayDelay) {
        output.WriteRawTag(216, 3);
        output.WriteSInt64(EndOfDayDelay);
      }
      if (HasHasInvertedPriceLadder) {
        output.WriteRawTag(224, 3);
        output.WriteBool(HasInvertedPriceLadder);
      }
      if (HasHasYields) {
        output.WriteRawTag(232, 3);
        output.WriteBool(HasYields);
      }
      if (HasContributorGroupId) {
        output.WriteRawTag(240, 3);
        output.WriteSInt32(ContributorGroupId);
      }
      if (HasSourceContractId) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(SourceContractId);
      }
      if (HasIssuer) {
        output.WriteRawTag(146, 4);
        output.WriteString(Issuer);
      }
      if (HasOptionMaturityId) {
        output.WriteRawTag(154, 4);
        output.WriteString(OptionMaturityId);
      }
      if (conversionMetadata_ != null) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(ConversionMetadata);
      }
      if (HasMarketStateGroupId) {
        output.WriteRawTag(168, 4);
        output.WriteSInt32(MarketStateGroupId);
      }
      if (HasCqgContractSymbol) {
        output.WriteRawTag(178, 4);
        output.WriteString(CqgContractSymbol);
      }
      if (HasSettlementMethod) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(SettlementMethod);
      }
      if (HasExerciseStyle) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(ExerciseStyle);
      }
      if (HasPricingConvention) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(PricingConvention);
      }
      if (HasIsUserDefinedInstrument) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsUserDefinedInstrument);
      }
      barBuildingTickTypes_.WriteTo(ref output, _repeated_barBuildingTickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasContractSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractSymbol);
      }
      if (HasCqgContractSymbol) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CqgContractSymbol);
      }
      if (HasCorrectPriceScale) {
        size += 1 + 8;
      }
      if (HasDisplayPriceScale) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplayPriceScale);
      }
      if (HasObsoleteDiscretionaryDisplayPriceScale) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsoleteDiscretionaryDisplayPriceScale);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasExtendedDescription) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtendedDescription);
      }
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasObsoleteDiscretionaryTickSize) {
        size += 2 + 8;
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasIsMostActive) {
        size += 1 + 1;
      }
      if (HasLastTradingDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastTradingDate);
      }
      if (HasFirstNoticeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FirstNoticeDate);
      }
      if (HasUnderlyingContractSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingContractSymbol);
      }
      if (HasMarginStyle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarginStyle);
      }
      if (HasInstrumentGroupName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupName);
      }
      if (HasSessionInfoId) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SessionInfoId);
      }
      if (HasMic) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mic);
      }
      if (HasMicDescription) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MicDescription);
      }
      if (HasMarketDataDelay) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(MarketDataDelay);
      }
      if (HasEndOfDayDelay) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(EndOfDayDelay);
      }
      if (HasShortInstrumentGroupName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShortInstrumentGroupName);
      }
      if (HasInstrumentGroupDescription) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupDescription);
      }
      size += tickSizesByPrice_.CalculateSize(_repeated_tickSizesByPrice_codec);
      size += tickSizesByDte_.CalculateSize(_repeated_tickSizesByDte_codec);
      if (HasTickSizesByDteId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TickSizesByDteId);
      }
      if (HasStrike) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Strike);
      }
      if (HasStrikePrice) {
        size += 2 + 8;
      }
      if (HasDialectId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DialectId);
      }
      if (HasCountryCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (strategyDefinition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrategyDefinition);
      }
      if (HasContractSize) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContractSize);
      }
      if (HasPositionTracking) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PositionTracking);
      }
      if (HasSpeculationTypeRequired) {
        size += 2 + 1;
      }
      if (HasMaturityMonthYear) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MaturityMonthYear);
      }
      if (HasMaturityDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(MaturityDate);
      }
      if (HasPriceDisplayMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceDisplayMode);
      }
      if (HasObsoleteDiscretionaryPriceDisplayMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ObsoleteDiscretionaryPriceDisplayMode);
      }
      if (HasForeignCurrency) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ForeignCurrency);
      }
      if (volumeScale_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VolumeScale);
      }
      if (HasVolumeDisplayExponent) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(VolumeDisplayExponent);
      }
      if (tradeSizeIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradeSizeIncrement);
      }
      if (HasHasInvertedPriceLadder) {
        size += 2 + 1;
      }
      if (HasDomLadderCompressionRatio) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DomLadderCompressionRatio);
      }
      if (HasExpectOffTickPrices) {
        size += 2 + 1;
      }
      if (HasHasExchangeVolume) {
        size += 2 + 1;
      }
      if (HasHasYields) {
        size += 2 + 1;
      }
      if (HasIsin) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (HasMaintenanceMargin) {
        size += 2 + 8;
      }
      if (contractSizeInUnits_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeUnit);
      }
      if (HasLastDeliveryDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(LastDeliveryDate);
      }
      size += contributorParameters_.CalculateSize(_repeated_contributorParameters_codec);
      if (HasPeriodType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PeriodType);
      }
      if (HasPeriodValue) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PeriodValue);
      }
      if (HasSymbolId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
      }
      if (HasDeleted) {
        size += 2 + 1;
      }
      if (HasContributorGroupId) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ContributorGroupId);
      }
      if (HasSourceContractId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SourceContractId);
      }
      if (HasIssuer) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Issuer);
      }
      if (HasOptionMaturityId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OptionMaturityId);
      }
      if (conversionMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConversionMetadata);
      }
      if (HasMarketStateGroupId) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MarketStateGroupId);
      }
      if (HasSettlementMethod) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SettlementMethod);
      }
      if (HasExerciseStyle) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExerciseStyle);
      }
      if (HasPricingConvention) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PricingConvention);
      }
      if (HasIsUserDefinedInstrument) {
        size += 2 + 1;
      }
      size += barBuildingTickTypes_.CalculateSize(_repeated_barBuildingTickTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContractMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasContractSymbol) {
        ContractSymbol = other.ContractSymbol;
      }
      if (other.HasCqgContractSymbol) {
        CqgContractSymbol = other.CqgContractSymbol;
      }
      if (other.HasCorrectPriceScale) {
        CorrectPriceScale = other.CorrectPriceScale;
      }
      if (other.HasDisplayPriceScale) {
        DisplayPriceScale = other.DisplayPriceScale;
      }
      if (other.HasObsoleteDiscretionaryDisplayPriceScale) {
        ObsoleteDiscretionaryDisplayPriceScale = other.ObsoleteDiscretionaryDisplayPriceScale;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasExtendedDescription) {
        ExtendedDescription = other.ExtendedDescription;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasObsoleteDiscretionaryTickSize) {
        ObsoleteDiscretionaryTickSize = other.ObsoleteDiscretionaryTickSize;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasIsMostActive) {
        IsMostActive = other.IsMostActive;
      }
      if (other.HasLastTradingDate) {
        LastTradingDate = other.LastTradingDate;
      }
      if (other.HasFirstNoticeDate) {
        FirstNoticeDate = other.FirstNoticeDate;
      }
      if (other.HasUnderlyingContractSymbol) {
        UnderlyingContractSymbol = other.UnderlyingContractSymbol;
      }
      if (other.HasMarginStyle) {
        MarginStyle = other.MarginStyle;
      }
      if (other.HasInstrumentGroupName) {
        InstrumentGroupName = other.InstrumentGroupName;
      }
      if (other.HasSessionInfoId) {
        SessionInfoId = other.SessionInfoId;
      }
      if (other.HasMic) {
        Mic = other.Mic;
      }
      if (other.HasMicDescription) {
        MicDescription = other.MicDescription;
      }
      if (other.HasMarketDataDelay) {
        MarketDataDelay = other.MarketDataDelay;
      }
      if (other.HasEndOfDayDelay) {
        EndOfDayDelay = other.EndOfDayDelay;
      }
      if (other.HasShortInstrumentGroupName) {
        ShortInstrumentGroupName = other.ShortInstrumentGroupName;
      }
      if (other.HasInstrumentGroupDescription) {
        InstrumentGroupDescription = other.InstrumentGroupDescription;
      }
      tickSizesByPrice_.Add(other.tickSizesByPrice_);
      tickSizesByDte_.Add(other.tickSizesByDte_);
      if (other.HasTickSizesByDteId) {
        TickSizesByDteId = other.TickSizesByDteId;
      }
      if (other.HasStrike) {
        Strike = other.Strike;
      }
      if (other.HasStrikePrice) {
        StrikePrice = other.StrikePrice;
      }
      if (other.HasDialectId) {
        DialectId = other.DialectId;
      }
      if (other.HasCountryCode) {
        CountryCode = other.CountryCode;
      }
      if (other.strategyDefinition_ != null) {
        if (strategyDefinition_ == null) {
          StrategyDefinition = new global::StrategyDefinition2.StrategyDefinition();
        }
        StrategyDefinition.MergeFrom(other.StrategyDefinition);
      }
      if (other.HasContractSize) {
        ContractSize = other.ContractSize;
      }
      if (other.HasPositionTracking) {
        PositionTracking = other.PositionTracking;
      }
      if (other.HasSpeculationTypeRequired) {
        SpeculationTypeRequired = other.SpeculationTypeRequired;
      }
      if (other.HasMaturityMonthYear) {
        MaturityMonthYear = other.MaturityMonthYear;
      }
      if (other.HasMaturityDate) {
        MaturityDate = other.MaturityDate;
      }
      if (other.HasPriceDisplayMode) {
        PriceDisplayMode = other.PriceDisplayMode;
      }
      if (other.HasObsoleteDiscretionaryPriceDisplayMode) {
        ObsoleteDiscretionaryPriceDisplayMode = other.ObsoleteDiscretionaryPriceDisplayMode;
      }
      if (other.HasForeignCurrency) {
        ForeignCurrency = other.ForeignCurrency;
      }
      if (other.volumeScale_ != null) {
        if (volumeScale_ == null) {
          VolumeScale = new global::Cqg.Decimal();
        }
        VolumeScale.MergeFrom(other.VolumeScale);
      }
      if (other.HasVolumeDisplayExponent) {
        VolumeDisplayExponent = other.VolumeDisplayExponent;
      }
      if (other.tradeSizeIncrement_ != null) {
        if (tradeSizeIncrement_ == null) {
          TradeSizeIncrement = new global::Cqg.Decimal();
        }
        TradeSizeIncrement.MergeFrom(other.TradeSizeIncrement);
      }
      if (other.HasHasInvertedPriceLadder) {
        HasInvertedPriceLadder = other.HasInvertedPriceLadder;
      }
      if (other.HasDomLadderCompressionRatio) {
        DomLadderCompressionRatio = other.DomLadderCompressionRatio;
      }
      if (other.HasExpectOffTickPrices) {
        ExpectOffTickPrices = other.ExpectOffTickPrices;
      }
      if (other.HasHasExchangeVolume) {
        HasExchangeVolume = other.HasExchangeVolume;
      }
      if (other.HasHasYields) {
        HasYields = other.HasYields;
      }
      if (other.HasIsin) {
        Isin = other.Isin;
      }
      if (other.HasMaintenanceMargin) {
        MaintenanceMargin = other.MaintenanceMargin;
      }
      if (other.contractSizeInUnits_ != null) {
        if (contractSizeInUnits_ == null) {
          ContractSizeInUnits = new global::Cqg.Decimal();
        }
        ContractSizeInUnits.MergeFrom(other.ContractSizeInUnits);
      }
      if (other.contractSizeUnit_ != null) {
        if (contractSizeUnit_ == null) {
          ContractSizeUnit = new global::Shared1.Text();
        }
        ContractSizeUnit.MergeFrom(other.ContractSizeUnit);
      }
      if (other.HasLastDeliveryDate) {
        LastDeliveryDate = other.LastDeliveryDate;
      }
      contributorParameters_.Add(other.contributorParameters_);
      if (other.HasPeriodType) {
        PeriodType = other.PeriodType;
      }
      if (other.HasPeriodValue) {
        PeriodValue = other.PeriodValue;
      }
      if (other.HasSymbolId) {
        SymbolId = other.SymbolId;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasContributorGroupId) {
        ContributorGroupId = other.ContributorGroupId;
      }
      if (other.HasSourceContractId) {
        SourceContractId = other.SourceContractId;
      }
      if (other.HasIssuer) {
        Issuer = other.Issuer;
      }
      if (other.HasOptionMaturityId) {
        OptionMaturityId = other.OptionMaturityId;
      }
      if (other.conversionMetadata_ != null) {
        if (conversionMetadata_ == null) {
          ConversionMetadata = new global::Metadata2.ConversionMetadata();
        }
        ConversionMetadata.MergeFrom(other.ConversionMetadata);
      }
      if (other.HasMarketStateGroupId) {
        MarketStateGroupId = other.MarketStateGroupId;
      }
      if (other.HasSettlementMethod) {
        SettlementMethod = other.SettlementMethod;
      }
      if (other.HasExerciseStyle) {
        ExerciseStyle = other.ExerciseStyle;
      }
      if (other.HasPricingConvention) {
        PricingConvention = other.PricingConvention;
      }
      if (other.HasIsUserDefinedInstrument) {
        IsUserDefinedInstrument = other.IsUserDefinedInstrument;
      }
      barBuildingTickTypes_.Add(other.barBuildingTickTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 18: {
            ContractSymbol = input.ReadString();
            break;
          }
          case 25: {
            CorrectPriceScale = input.ReadDouble();
            break;
          }
          case 32: {
            DisplayPriceScale = input.ReadUInt32();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 57: {
            TickSize = input.ReadDouble();
            break;
          }
          case 66: {
            Currency = input.ReadString();
            break;
          }
          case 73: {
            TickValue = input.ReadDouble();
            break;
          }
          case 82: {
            CfiCode = input.ReadString();
            break;
          }
          case 88: {
            IsMostActive = input.ReadBool();
            break;
          }
          case 96: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 104: {
            FirstNoticeDate = input.ReadSInt64();
            break;
          }
          case 114: {
            UnderlyingContractSymbol = input.ReadString();
            break;
          }
          case 120: {
            MarginStyle = input.ReadUInt32();
            break;
          }
          case 130: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 136: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 146: {
            Mic = input.ReadString();
            break;
          }
          case 160: {
            MarketDataDelay = input.ReadSInt64();
            break;
          }
          case 170: {
            ShortInstrumentGroupName = input.ReadString();
            break;
          }
          case 178: {
            InstrumentGroupDescription = input.ReadString();
            break;
          }
          case 186: {
            tickSizesByPrice_.AddEntriesFrom(input, _repeated_tickSizesByPrice_codec);
            break;
          }
          case 194: {
            tickSizesByDte_.AddEntriesFrom(input, _repeated_tickSizesByDte_codec);
            break;
          }
          case 200: {
            TickSizesByDteId = input.ReadUInt32();
            break;
          }
          case 208: {
            Strike = input.ReadSInt32();
            break;
          }
          case 217: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 226: {
            DialectId = input.ReadString();
            break;
          }
          case 234: {
            CountryCode = input.ReadString();
            break;
          }
          case 242: {
            if (strategyDefinition_ == null) {
              StrategyDefinition = new global::StrategyDefinition2.StrategyDefinition();
            }
            input.ReadMessage(StrategyDefinition);
            break;
          }
          case 250: {
            ContractSize = input.ReadString();
            break;
          }
          case 256: {
            PositionTracking = input.ReadUInt32();
            break;
          }
          case 264: {
            SpeculationTypeRequired = input.ReadBool();
            break;
          }
          case 274: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 280: {
            PriceDisplayMode = (global::Metadata2.PriceDisplayMode) input.ReadEnum();
            break;
          }
          case 289: {
            ObsoleteDiscretionaryTickSize = input.ReadDouble();
            break;
          }
          case 296: {
            ObsoleteDiscretionaryDisplayPriceScale = input.ReadUInt32();
            break;
          }
          case 304: {
            ObsoleteDiscretionaryPriceDisplayMode = (global::Metadata2.PriceDisplayMode) input.ReadEnum();
            break;
          }
          case 314: {
            ForeignCurrency = input.ReadString();
            break;
          }
          case 322: {
            if (volumeScale_ == null) {
              VolumeScale = new global::Cqg.Decimal();
            }
            input.ReadMessage(VolumeScale);
            break;
          }
          case 328: {
            VolumeDisplayExponent = input.ReadSInt32();
            break;
          }
          case 338: {
            if (tradeSizeIncrement_ == null) {
              TradeSizeIncrement = new global::Cqg.Decimal();
            }
            input.ReadMessage(TradeSizeIncrement);
            break;
          }
          case 346: {
            ExtendedDescription = input.ReadString();
            break;
          }
          case 354: {
            MicDescription = input.ReadString();
            break;
          }
          case 360: {
            DomLadderCompressionRatio = input.ReadUInt32();
            break;
          }
          case 368: {
            ExpectOffTickPrices = input.ReadBool();
            break;
          }
          case 376: {
            HasExchangeVolume = input.ReadBool();
            break;
          }
          case 386: {
            Isin = input.ReadString();
            break;
          }
          case 393: {
            MaintenanceMargin = input.ReadDouble();
            break;
          }
          case 402: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 410: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 416: {
            LastDeliveryDate = input.ReadSInt64();
            break;
          }
          case 424: {
            MaturityDate = input.ReadSInt64();
            break;
          }
          case 434: {
            contributorParameters_.AddEntriesFrom(input, _repeated_contributorParameters_codec);
            break;
          }
          case 440: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 448: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 458: {
            SymbolId = input.ReadString();
            break;
          }
          case 464: {
            Deleted = input.ReadBool();
            break;
          }
          case 472: {
            EndOfDayDelay = input.ReadSInt64();
            break;
          }
          case 480: {
            HasInvertedPriceLadder = input.ReadBool();
            break;
          }
          case 488: {
            HasYields = input.ReadBool();
            break;
          }
          case 496: {
            ContributorGroupId = input.ReadSInt32();
            break;
          }
          case 504: {
            SourceContractId = input.ReadUInt32();
            break;
          }
          case 530: {
            Issuer = input.ReadString();
            break;
          }
          case 538: {
            OptionMaturityId = input.ReadString();
            break;
          }
          case 546: {
            if (conversionMetadata_ == null) {
              ConversionMetadata = new global::Metadata2.ConversionMetadata();
            }
            input.ReadMessage(ConversionMetadata);
            break;
          }
          case 552: {
            MarketStateGroupId = input.ReadSInt32();
            break;
          }
          case 562: {
            CqgContractSymbol = input.ReadString();
            break;
          }
          case 568: {
            SettlementMethod = input.ReadUInt32();
            break;
          }
          case 576: {
            ExerciseStyle = input.ReadUInt32();
            break;
          }
          case 584: {
            PricingConvention = input.ReadUInt32();
            break;
          }
          case 592: {
            IsUserDefinedInstrument = input.ReadBool();
            break;
          }
          case 602:
          case 600: {
            barBuildingTickTypes_.AddEntriesFrom(input, _repeated_barBuildingTickTypes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 18: {
            ContractSymbol = input.ReadString();
            break;
          }
          case 25: {
            CorrectPriceScale = input.ReadDouble();
            break;
          }
          case 32: {
            DisplayPriceScale = input.ReadUInt32();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 57: {
            TickSize = input.ReadDouble();
            break;
          }
          case 66: {
            Currency = input.ReadString();
            break;
          }
          case 73: {
            TickValue = input.ReadDouble();
            break;
          }
          case 82: {
            CfiCode = input.ReadString();
            break;
          }
          case 88: {
            IsMostActive = input.ReadBool();
            break;
          }
          case 96: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 104: {
            FirstNoticeDate = input.ReadSInt64();
            break;
          }
          case 114: {
            UnderlyingContractSymbol = input.ReadString();
            break;
          }
          case 120: {
            MarginStyle = input.ReadUInt32();
            break;
          }
          case 130: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 136: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 146: {
            Mic = input.ReadString();
            break;
          }
          case 160: {
            MarketDataDelay = input.ReadSInt64();
            break;
          }
          case 170: {
            ShortInstrumentGroupName = input.ReadString();
            break;
          }
          case 178: {
            InstrumentGroupDescription = input.ReadString();
            break;
          }
          case 186: {
            tickSizesByPrice_.AddEntriesFrom(ref input, _repeated_tickSizesByPrice_codec);
            break;
          }
          case 194: {
            tickSizesByDte_.AddEntriesFrom(ref input, _repeated_tickSizesByDte_codec);
            break;
          }
          case 200: {
            TickSizesByDteId = input.ReadUInt32();
            break;
          }
          case 208: {
            Strike = input.ReadSInt32();
            break;
          }
          case 217: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 226: {
            DialectId = input.ReadString();
            break;
          }
          case 234: {
            CountryCode = input.ReadString();
            break;
          }
          case 242: {
            if (strategyDefinition_ == null) {
              StrategyDefinition = new global::StrategyDefinition2.StrategyDefinition();
            }
            input.ReadMessage(StrategyDefinition);
            break;
          }
          case 250: {
            ContractSize = input.ReadString();
            break;
          }
          case 256: {
            PositionTracking = input.ReadUInt32();
            break;
          }
          case 264: {
            SpeculationTypeRequired = input.ReadBool();
            break;
          }
          case 274: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 280: {
            PriceDisplayMode = (global::Metadata2.PriceDisplayMode) input.ReadEnum();
            break;
          }
          case 289: {
            ObsoleteDiscretionaryTickSize = input.ReadDouble();
            break;
          }
          case 296: {
            ObsoleteDiscretionaryDisplayPriceScale = input.ReadUInt32();
            break;
          }
          case 304: {
            ObsoleteDiscretionaryPriceDisplayMode = (global::Metadata2.PriceDisplayMode) input.ReadEnum();
            break;
          }
          case 314: {
            ForeignCurrency = input.ReadString();
            break;
          }
          case 322: {
            if (volumeScale_ == null) {
              VolumeScale = new global::Cqg.Decimal();
            }
            input.ReadMessage(VolumeScale);
            break;
          }
          case 328: {
            VolumeDisplayExponent = input.ReadSInt32();
            break;
          }
          case 338: {
            if (tradeSizeIncrement_ == null) {
              TradeSizeIncrement = new global::Cqg.Decimal();
            }
            input.ReadMessage(TradeSizeIncrement);
            break;
          }
          case 346: {
            ExtendedDescription = input.ReadString();
            break;
          }
          case 354: {
            MicDescription = input.ReadString();
            break;
          }
          case 360: {
            DomLadderCompressionRatio = input.ReadUInt32();
            break;
          }
          case 368: {
            ExpectOffTickPrices = input.ReadBool();
            break;
          }
          case 376: {
            HasExchangeVolume = input.ReadBool();
            break;
          }
          case 386: {
            Isin = input.ReadString();
            break;
          }
          case 393: {
            MaintenanceMargin = input.ReadDouble();
            break;
          }
          case 402: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 410: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 416: {
            LastDeliveryDate = input.ReadSInt64();
            break;
          }
          case 424: {
            MaturityDate = input.ReadSInt64();
            break;
          }
          case 434: {
            contributorParameters_.AddEntriesFrom(ref input, _repeated_contributorParameters_codec);
            break;
          }
          case 440: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 448: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 458: {
            SymbolId = input.ReadString();
            break;
          }
          case 464: {
            Deleted = input.ReadBool();
            break;
          }
          case 472: {
            EndOfDayDelay = input.ReadSInt64();
            break;
          }
          case 480: {
            HasInvertedPriceLadder = input.ReadBool();
            break;
          }
          case 488: {
            HasYields = input.ReadBool();
            break;
          }
          case 496: {
            ContributorGroupId = input.ReadSInt32();
            break;
          }
          case 504: {
            SourceContractId = input.ReadUInt32();
            break;
          }
          case 530: {
            Issuer = input.ReadString();
            break;
          }
          case 538: {
            OptionMaturityId = input.ReadString();
            break;
          }
          case 546: {
            if (conversionMetadata_ == null) {
              ConversionMetadata = new global::Metadata2.ConversionMetadata();
            }
            input.ReadMessage(ConversionMetadata);
            break;
          }
          case 552: {
            MarketStateGroupId = input.ReadSInt32();
            break;
          }
          case 562: {
            CqgContractSymbol = input.ReadString();
            break;
          }
          case 568: {
            SettlementMethod = input.ReadUInt32();
            break;
          }
          case 576: {
            ExerciseStyle = input.ReadUInt32();
            break;
          }
          case 584: {
            PricingConvention = input.ReadUInt32();
            break;
          }
          case 592: {
            IsUserDefinedInstrument = input.ReadBool();
            break;
          }
          case 602:
          case 600: {
            barBuildingTickTypes_.AddEntriesFrom(ref input, _repeated_barBuildingTickTypes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ContractMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Margin style (for options).
      /// </summary>
      public enum MarginStyle {
        /// <summary>
        /// The premium is paid on exercise/ expiry (position is included to OTE calculation).
        /// </summary>
        [pbr::OriginalName("MARGIN_STYLE_FUTURE")] Future = 1,
        /// <summary>
        /// Premium is subtracted from account balance when order is filled (position is included to MVO/UPL calculation).
        /// </summary>
        [pbr::OriginalName("MARGIN_STYLE_PREMIUM")] Premium = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request for contributor metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContributorMetadataRequest : pb::IMessage<ContributorMetadataRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContributorMetadataRequest> _parser = new pb::MessageParser<ContributorMetadataRequest>(() => new ContributorMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContributorMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataRequest(ContributorMetadataRequest other) : this() {
      _hasBits0 = other._hasBits0;
      contributorGroupId_ = other.contributorGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataRequest Clone() {
      return new ContributorMetadataRequest(this);
    }

    /// <summary>Field number for the "contributor_group_id" field.</summary>
    public const int ContributorGroupIdFieldNumber = 1;
    private readonly static int ContributorGroupIdDefaultValue = 0;

    private int contributorGroupId_;
    /// <summary>
    /// Contributor group ID from ContractMetadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ContributorGroupId {
      get { if ((_hasBits0 & 1) != 0) { return contributorGroupId_; } else { return ContributorGroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contributorGroupId_ = value;
      }
    }
    /// <summary>Gets whether the "contributor_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contributor_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContributorMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContributorMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContributorGroupId != other.ContributorGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContributorGroupId) hash ^= ContributorGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContributorGroupId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ContributorGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContributorGroupId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ContributorGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContributorGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ContributorGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContributorMetadataRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasContributorGroupId) {
        ContributorGroupId = other.ContributorGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContributorGroupId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContributorGroupId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with contributor metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContributorMetadataReport : pb::IMessage<ContributorMetadataReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContributorMetadataReport> _parser = new pb::MessageParser<ContributorMetadataReport>(() => new ContributorMetadataReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContributorMetadataReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataReport(ContributorMetadataReport other) : this() {
      contributorMetadata_ = other.contributorMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadataReport Clone() {
      return new ContributorMetadataReport(this);
    }

    /// <summary>Field number for the "contributor_metadata" field.</summary>
    public const int ContributorMetadataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Metadata2.ContributorMetadata> _repeated_contributorMetadata_codec
        = pb::FieldCodec.ForMessage(10, global::Metadata2.ContributorMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.ContributorMetadata> contributorMetadata_ = new pbc::RepeatedField<global::Metadata2.ContributorMetadata>();
    /// <summary>
    /// List of contributor metadata.
    /// Note: ContributorMetadata list may be empty even for valid contributor_group_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.ContributorMetadata> ContributorMetadata {
      get { return contributorMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContributorMetadataReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContributorMetadataReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!contributorMetadata_.Equals(other.contributorMetadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= contributorMetadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      contributorMetadata_.WriteTo(output, _repeated_contributorMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      contributorMetadata_.WriteTo(ref output, _repeated_contributorMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += contributorMetadata_.CalculateSize(_repeated_contributorMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContributorMetadataReport other) {
      if (other == null) {
        return;
      }
      contributorMetadata_.Add(other.contributorMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            contributorMetadata_.AddEntriesFrom(input, _repeated_contributorMetadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            contributorMetadata_.AddEntriesFrom(ref input, _repeated_contributorMetadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contributor metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContributorMetadata : pb::IMessage<ContributorMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContributorMetadata> _parser = new pb::MessageParser<ContributorMetadata>(() => new ContributorMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContributorMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadata(ContributorMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      contributorId_ = other.contributorId_;
      name_ = other.name_;
      description_ = other.description_;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContributorMetadata Clone() {
      return new ContributorMetadata(this);
    }

    /// <summary>Field number for the "contributor_id" field.</summary>
    public const int ContributorIdFieldNumber = 1;
    private readonly static int ContributorIdDefaultValue = 0;

    private int contributorId_;
    /// <summary>
    /// ID used in TradeAttributes as buyer and seller.
    /// Unique for its Contributor Group ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ContributorId {
      get { if ((_hasBits0 & 1) != 0) { return contributorId_; } else { return ContributorIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contributorId_ = value;
      }
    }
    /// <summary>Gets whether the "contributor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contributor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Contributor name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Contributor description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 4;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Contributor is deleted (used for updates).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContributorMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContributorMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContributorId != other.ContributorId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContributorId) hash ^= ContributorId.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContributorId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ContributorId);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(32);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContributorId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ContributorId);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(32);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContributorId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ContributorId);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContributorMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasContributorId) {
        ContributorId = other.ContributorId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContributorId = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContributorId = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request a list of option maturities by an underlying contract
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionMaturityListRequest : pb::IMessage<OptionMaturityListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionMaturityListRequest> _parser = new pb::MessageParser<OptionMaturityListRequest>(() => new OptionMaturityListRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionMaturityListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListRequest(OptionMaturityListRequest other) : this() {
      _hasBits0 = other._hasBits0;
      underlyingContractId_ = other.underlyingContractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListRequest Clone() {
      return new OptionMaturityListRequest(this);
    }

    /// <summary>Field number for the "underlying_contract_id" field.</summary>
    public const int UnderlyingContractIdFieldNumber = 1;
    private readonly static uint UnderlyingContractIdDefaultValue = 0;

    private uint underlyingContractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UnderlyingContractId {
      get { if ((_hasBits0 & 1) != 0) { return underlyingContractId_; } else { return UnderlyingContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        underlyingContractId_ = value;
      }
    }
    /// <summary>Gets whether the "underlying_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderlyingContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "underlying_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderlyingContractId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionMaturityListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionMaturityListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnderlyingContractId != other.UnderlyingContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUnderlyingContractId) hash ^= UnderlyingContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUnderlyingContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUnderlyingContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUnderlyingContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionMaturityListRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasUnderlyingContractId) {
        UnderlyingContractId = other.UnderlyingContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnderlyingContractId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UnderlyingContractId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of option maturities.
  /// When the list is updated by a subscription
  /// (e.g. some option maturity is expired or a new one appears)
  /// the list includes only new or deleted items.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionMaturityListReport : pb::IMessage<OptionMaturityListReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionMaturityListReport> _parser = new pb::MessageParser<OptionMaturityListReport>(() => new OptionMaturityListReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionMaturityListReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListReport(OptionMaturityListReport other) : this() {
      optionMaturities_ = other.optionMaturities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityListReport Clone() {
      return new OptionMaturityListReport(this);
    }

    /// <summary>Field number for the "option_maturities" field.</summary>
    public const int OptionMaturitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Metadata2.OptionMaturityMetadata> _repeated_optionMaturities_codec
        = pb::FieldCodec.ForMessage(10, global::Metadata2.OptionMaturityMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.OptionMaturityMetadata> optionMaturities_ = new pbc::RepeatedField<global::Metadata2.OptionMaturityMetadata>();
    /// <summary>
    /// List of option maturities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.OptionMaturityMetadata> OptionMaturities {
      get { return optionMaturities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionMaturityListReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionMaturityListReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!optionMaturities_.Equals(other.optionMaturities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= optionMaturities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      optionMaturities_.WriteTo(output, _repeated_optionMaturities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      optionMaturities_.WriteTo(ref output, _repeated_optionMaturities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += optionMaturities_.CalculateSize(_repeated_optionMaturities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionMaturityListReport other) {
      if (other == null) {
        return;
      }
      optionMaturities_.Add(other.optionMaturities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            optionMaturities_.AddEntriesFrom(input, _repeated_optionMaturities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            optionMaturities_.AddEntriesFrom(ref input, _repeated_optionMaturities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Option maturity metadata.
  /// It represents a list of option strikes (puts and calls) with the same underlying instrument and expiration date.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionMaturityMetadata : pb::IMessage<OptionMaturityMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionMaturityMetadata> _parser = new pb::MessageParser<OptionMaturityMetadata>(() => new OptionMaturityMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionMaturityMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityMetadata(OptionMaturityMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      cfiCode_ = other.cfiCode_;
      deleted_ = other.deleted_;
      lastTradingDate_ = other.lastTradingDate_;
      maturityMonthYear_ = other.maturityMonthYear_;
      instrumentGroupName_ = other.instrumentGroupName_;
      instrumentGroupEmpty_ = other.instrumentGroupEmpty_;
      reserved1_ = other.reserved1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionMaturityMetadata Clone() {
      return new OptionMaturityMetadata(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Option maturity identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Option maturity name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Option maturity description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 4;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the option maturity is removed (e.g. expired).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "last_trading_date" field.</summary>
    public const int LastTradingDateFieldNumber = 8;
    private readonly static long LastTradingDateDefaultValue = 0L;

    private long lastTradingDate_;
    /// <summary>
    /// Last trading date (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastTradingDate {
      get { if ((_hasBits0 & 4) != 0) { return lastTradingDate_; } else { return LastTradingDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lastTradingDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_trading_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradingDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "last_trading_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradingDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "maturity_month_year" field.</summary>
    public const int MaturityMonthYearFieldNumber = 9;
    private readonly static string MaturityMonthYearDefaultValue = "";

    private string maturityMonthYear_;
    /// <summary>
    /// Month letter and 2-digit year identifying the maturity month.
    /// Note: look at comment for maturity_month_year from ContractMetadata for further info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityMonthYear {
      get { return maturityMonthYear_ ?? MaturityMonthYearDefaultValue; }
      set {
        maturityMonthYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturity_month_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityMonthYear {
      get { return maturityMonthYear_ != null; }
    }
    /// <summary>Clears the value of the "maturity_month_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityMonthYear() {
      maturityMonthYear_ = null;
    }

    /// <summary>Field number for the "instrument_group_name" field.</summary>
    public const int InstrumentGroupNameFieldNumber = 10;
    private readonly static string InstrumentGroupNameDefaultValue = "";

    private string instrumentGroupName_;
    /// <summary>
    /// Name of a group of instruments that share the same properties (e.g. commodity name).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupName {
      get { return instrumentGroupName_ ?? InstrumentGroupNameDefaultValue; }
      set {
        instrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupName {
      get { return instrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupName() {
      instrumentGroupName_ = null;
    }

    /// <summary>Field number for the "instrument_group_empty" field.</summary>
    public const int InstrumentGroupEmptyFieldNumber = 17;
    private readonly static bool InstrumentGroupEmptyDefaultValue = false;

    private bool instrumentGroupEmpty_;
    /// <summary>
    /// Whether the option maturity instrument group has option strikes.
    /// It relates to InstrumentGroupRequest request.
    /// Some option strikes can be related to option maturity, but they can be absent in the group.
    /// E.g., option strikes range is changed and strikes out of the range don't appear in the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InstrumentGroupEmpty {
      get { if ((_hasBits0 & 8) != 0) { return instrumentGroupEmpty_; } else { return InstrumentGroupEmptyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        instrumentGroupEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "instrument_group_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupEmpty {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "instrument_group_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupEmpty() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reserved1" field.</summary>
    public const int Reserved1FieldNumber = 5;
    private readonly static bool Reserved1DefaultValue = false;

    private bool reserved1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Reserved1 {
      get { if ((_hasBits0 & 1) != 0) { return reserved1_; } else { return Reserved1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        reserved1_ = value;
      }
    }
    /// <summary>Gets whether the "reserved1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReserved1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reserved1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReserved1() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionMaturityMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionMaturityMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (CfiCode != other.CfiCode) return false;
      if (Deleted != other.Deleted) return false;
      if (LastTradingDate != other.LastTradingDate) return false;
      if (MaturityMonthYear != other.MaturityMonthYear) return false;
      if (InstrumentGroupName != other.InstrumentGroupName) return false;
      if (InstrumentGroupEmpty != other.InstrumentGroupEmpty) return false;
      if (Reserved1 != other.Reserved1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasLastTradingDate) hash ^= LastTradingDate.GetHashCode();
      if (HasMaturityMonthYear) hash ^= MaturityMonthYear.GetHashCode();
      if (HasInstrumentGroupName) hash ^= InstrumentGroupName.GetHashCode();
      if (HasInstrumentGroupEmpty) hash ^= InstrumentGroupEmpty.GetHashCode();
      if (HasReserved1) hash ^= Reserved1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasReserved1) {
        output.WriteRawTag(40);
        output.WriteBool(Reserved1);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasInstrumentGroupEmpty) {
        output.WriteRawTag(136, 1);
        output.WriteBool(InstrumentGroupEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasReserved1) {
        output.WriteRawTag(40);
        output.WriteBool(Reserved1);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasInstrumentGroupEmpty) {
        output.WriteRawTag(136, 1);
        output.WriteBool(InstrumentGroupEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasLastTradingDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupName);
      }
      if (HasInstrumentGroupEmpty) {
        size += 2 + 1;
      }
      if (HasReserved1) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionMaturityMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasLastTradingDate) {
        LastTradingDate = other.LastTradingDate;
      }
      if (other.HasMaturityMonthYear) {
        MaturityMonthYear = other.MaturityMonthYear;
      }
      if (other.HasInstrumentGroupName) {
        InstrumentGroupName = other.InstrumentGroupName;
      }
      if (other.HasInstrumentGroupEmpty) {
        InstrumentGroupEmpty = other.InstrumentGroupEmpty;
      }
      if (other.HasReserved1) {
        Reserved1 = other.Reserved1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            Reserved1 = input.ReadBool();
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 136: {
            InstrumentGroupEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            Reserved1 = input.ReadBool();
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 136: {
            InstrumentGroupEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request a group of instruments by an instrument group identifier.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentGroupRequest : pb::IMessage<InstrumentGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentGroupRequest> _parser = new pb::MessageParser<InstrumentGroupRequest>(() => new InstrumentGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupRequest(InstrumentGroupRequest other) : this() {
      instrumentGroupId_ = other.instrumentGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupRequest Clone() {
      return new InstrumentGroupRequest(this);
    }

    /// <summary>Field number for the "instrument_group_id" field.</summary>
    public const int InstrumentGroupIdFieldNumber = 1;
    private readonly static string InstrumentGroupIdDefaultValue = "";

    private string instrumentGroupId_;
    /// <summary>
    /// Identifier of instrument group. It can be one of:
    /// * Option maturity id to get a group of option strikes (see OptionMaturityMetadata.id)
    /// * Instrument group's name to get a group of futures (e.g. 'F.US.EP', see
    ///   ContractMetadata.instrument_group_name or SecurityMetadata.source_instrument_group_name)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupId {
      get { return instrumentGroupId_ ?? InstrumentGroupIdDefaultValue; }
      set {
        instrumentGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupId {
      get { return instrumentGroupId_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupId() {
      instrumentGroupId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentGroupId != other.InstrumentGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInstrumentGroupId) hash ^= InstrumentGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInstrumentGroupId) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInstrumentGroupId) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasInstrumentGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasInstrumentGroupId) {
        InstrumentGroupId = other.InstrumentGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentGroupId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InstrumentGroupId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a group of instruments.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentGroupReport : pb::IMessage<InstrumentGroupReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentGroupReport> _parser = new pb::MessageParser<InstrumentGroupReport>(() => new InstrumentGroupReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentGroupReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupReport(InstrumentGroupReport other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupReport Clone() {
      return new InstrumentGroupReport(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Metadata2.InstrumentGroupItem> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Metadata2.InstrumentGroupItem.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.InstrumentGroupItem> instruments_ = new pbc::RepeatedField<global::Metadata2.InstrumentGroupItem>();
    /// <summary>
    /// Instruments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.InstrumentGroupItem> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentGroupReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentGroupReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentGroupReport other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Instrument group item.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InstrumentGroupItem : pb::IMessage<InstrumentGroupItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentGroupItem> _parser = new pb::MessageParser<InstrumentGroupItem>(() => new InstrumentGroupItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentGroupItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupItem(InstrumentGroupItem other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      cfiCode_ = other.cfiCode_;
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      deleted_ = other.deleted_;
      lastTradingDate_ = other.lastTradingDate_;
      maturityMonthYear_ = other.maturityMonthYear_;
      instrumentGroupName_ = other.instrumentGroupName_;
      reserved1_ = other.reserved1_;
      reserved2_ = other.reserved2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentGroupItem Clone() {
      return new InstrumentGroupItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Instrument group item identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Instrument name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Instrument description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 4;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 6;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Contract meta-data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the instrument is removed from the group (e.g. expired).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "last_trading_date" field.</summary>
    public const int LastTradingDateFieldNumber = 8;
    private readonly static long LastTradingDateDefaultValue = 0L;

    private long lastTradingDate_;
    /// <summary>
    /// Last trading date for derivatives if applicable.
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastTradingDate {
      get { if ((_hasBits0 & 4) != 0) { return lastTradingDate_; } else { return LastTradingDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lastTradingDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_trading_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradingDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "last_trading_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradingDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "maturity_month_year" field.</summary>
    public const int MaturityMonthYearFieldNumber = 9;
    private readonly static string MaturityMonthYearDefaultValue = "";

    private string maturityMonthYear_;
    /// <summary>
    /// Month letter and 2-digit year identifying the maturity month of the instrument.
    /// Note: look at comment for maturity_month_year from ContractMetadata for further info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityMonthYear {
      get { return maturityMonthYear_ ?? MaturityMonthYearDefaultValue; }
      set {
        maturityMonthYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturity_month_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityMonthYear {
      get { return maturityMonthYear_ != null; }
    }
    /// <summary>Clears the value of the "maturity_month_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityMonthYear() {
      maturityMonthYear_ = null;
    }

    /// <summary>Field number for the "instrument_group_name" field.</summary>
    public const int InstrumentGroupNameFieldNumber = 10;
    private readonly static string InstrumentGroupNameDefaultValue = "";

    private string instrumentGroupName_;
    /// <summary>
    /// Name of a group of instruments that share the same properties (e.g. commodity name for futures and options).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupName {
      get { return instrumentGroupName_ ?? InstrumentGroupNameDefaultValue; }
      set {
        instrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupName {
      get { return instrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupName() {
      instrumentGroupName_ = null;
    }

    /// <summary>Field number for the "reserved1" field.</summary>
    public const int Reserved1FieldNumber = 5;
    private readonly static bool Reserved1DefaultValue = false;

    private bool reserved1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Reserved1 {
      get { if ((_hasBits0 & 1) != 0) { return reserved1_; } else { return Reserved1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        reserved1_ = value;
      }
    }
    /// <summary>Gets whether the "reserved1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReserved1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reserved1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReserved1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reserved2" field.</summary>
    public const int Reserved2FieldNumber = 11;
    private readonly static string Reserved2DefaultValue = "";

    private string reserved2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reserved2 {
      get { return reserved2_ ?? Reserved2DefaultValue; }
      set {
        reserved2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reserved2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReserved2 {
      get { return reserved2_ != null; }
    }
    /// <summary>Clears the value of the "reserved2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReserved2() {
      reserved2_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentGroupItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentGroupItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (CfiCode != other.CfiCode) return false;
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      if (Deleted != other.Deleted) return false;
      if (LastTradingDate != other.LastTradingDate) return false;
      if (MaturityMonthYear != other.MaturityMonthYear) return false;
      if (InstrumentGroupName != other.InstrumentGroupName) return false;
      if (Reserved1 != other.Reserved1) return false;
      if (Reserved2 != other.Reserved2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasLastTradingDate) hash ^= LastTradingDate.GetHashCode();
      if (HasMaturityMonthYear) hash ^= MaturityMonthYear.GetHashCode();
      if (HasInstrumentGroupName) hash ^= InstrumentGroupName.GetHashCode();
      if (HasReserved1) hash ^= Reserved1.GetHashCode();
      if (HasReserved2) hash ^= Reserved2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasReserved1) {
        output.WriteRawTag(40);
        output.WriteBool(Reserved1);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasReserved2) {
        output.WriteRawTag(90);
        output.WriteString(Reserved2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasReserved1) {
        output.WriteRawTag(40);
        output.WriteBool(Reserved1);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasReserved2) {
        output.WriteRawTag(90);
        output.WriteString(Reserved2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasLastTradingDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupName);
      }
      if (HasReserved1) {
        size += 1 + 1;
      }
      if (HasReserved2) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reserved2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentGroupItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasLastTradingDate) {
        LastTradingDate = other.LastTradingDate;
      }
      if (other.HasMaturityMonthYear) {
        MaturityMonthYear = other.MaturityMonthYear;
      }
      if (other.HasInstrumentGroupName) {
        InstrumentGroupName = other.InstrumentGroupName;
      }
      if (other.HasReserved1) {
        Reserved1 = other.Reserved1;
      }
      if (other.HasReserved2) {
        Reserved2 = other.Reserved2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            Reserved1 = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            Reserved2 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            Reserved1 = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            Reserved2 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for Market State metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MarketStateMetadataRequest : pb::IMessage<MarketStateMetadataRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateMetadataRequest> _parser = new pb::MessageParser<MarketStateMetadataRequest>(() => new MarketStateMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarketStateMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataRequest(MarketStateMetadataRequest other) : this() {
      _hasBits0 = other._hasBits0;
      marketStateGroupId_ = other.marketStateGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataRequest Clone() {
      return new MarketStateMetadataRequest(this);
    }

    /// <summary>Field number for the "market_state_group_id" field.</summary>
    public const int MarketStateGroupIdFieldNumber = 1;
    private readonly static int MarketStateGroupIdDefaultValue = 0;

    private int marketStateGroupId_;
    /// <summary>
    /// Market State Group ID from ContractMetadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarketStateGroupId {
      get { if ((_hasBits0 & 1) != 0) { return marketStateGroupId_; } else { return MarketStateGroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        marketStateGroupId_ = value;
      }
    }
    /// <summary>Gets whether the "market_state_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketStateGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "market_state_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketStateGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarketStateMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarketStateMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketStateGroupId != other.MarketStateGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMarketStateGroupId) hash ^= MarketStateGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMarketStateGroupId) {
        output.WriteRawTag(8);
        output.WriteSInt32(MarketStateGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMarketStateGroupId) {
        output.WriteRawTag(8);
        output.WriteSInt32(MarketStateGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMarketStateGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MarketStateGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarketStateMetadataRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasMarketStateGroupId) {
        MarketStateGroupId = other.MarketStateGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketStateGroupId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarketStateGroupId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Market State metadata.
  /// The first complete report contains initial snapshot, which may be saved as local state.
  /// All subsequent messages contain updates that may be applied to the local state.
  /// Subscribed requests in case of server-side communication issues will receive
  /// an InformationReport with status_code "StatusCode.STATUS_CODE_DISCONNECTED".
  /// After issues resolution subscribed requests will receive an InformationReport
  /// with status_code "StatusCode.STATUS_CODE_SUBSCRIBED" and with a list of metadata updates, if there are any.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MarketStateMetadataReport : pb::IMessage<MarketStateMetadataReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateMetadataReport> _parser = new pb::MessageParser<MarketStateMetadataReport>(() => new MarketStateMetadataReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarketStateMetadataReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataReport(MarketStateMetadataReport other) : this() {
      marketStateAttributeMetadata_ = other.marketStateAttributeMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateMetadataReport Clone() {
      return new MarketStateMetadataReport(this);
    }

    /// <summary>Field number for the "market_state_attribute_metadata" field.</summary>
    public const int MarketStateAttributeMetadataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Metadata2.MarketStateAttributeMetadata> _repeated_marketStateAttributeMetadata_codec
        = pb::FieldCodec.ForMessage(10, global::Metadata2.MarketStateAttributeMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.MarketStateAttributeMetadata> marketStateAttributeMetadata_ = new pbc::RepeatedField<global::Metadata2.MarketStateAttributeMetadata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.MarketStateAttributeMetadata> MarketStateAttributeMetadata {
      get { return marketStateAttributeMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarketStateMetadataReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarketStateMetadataReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marketStateAttributeMetadata_.Equals(other.marketStateAttributeMetadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marketStateAttributeMetadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketStateAttributeMetadata_.WriteTo(output, _repeated_marketStateAttributeMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketStateAttributeMetadata_.WriteTo(ref output, _repeated_marketStateAttributeMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += marketStateAttributeMetadata_.CalculateSize(_repeated_marketStateAttributeMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarketStateMetadataReport other) {
      if (other == null) {
        return;
      }
      marketStateAttributeMetadata_.Add(other.marketStateAttributeMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketStateAttributeMetadata_.AddEntriesFrom(input, _repeated_marketStateAttributeMetadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketStateAttributeMetadata_.AddEntriesFrom(ref input, _repeated_marketStateAttributeMetadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Market State attribute metadata
  /// Note: To apply a metadata update one must follow rules:
  ///  1. If an update contains a MarketStateAttributeMetadata with a combination of "name" and
  ///     "level" fields values, which does not exist in the local state, then it must be added to it.
  ///  2. If an update contains a MarketStateAttributeMetadata with a combination of "name" and
  ///     "level fields values, which already exists in the local state, then:
  ///     i. If the field "deleted" is present and set to true - this Attribute should be deleted from the local state.
  ///     ii. Otherwise updates for value_metadata should be applied (see MarketStateValueMetadata comments).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MarketStateAttributeMetadata : pb::IMessage<MarketStateAttributeMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateAttributeMetadata> _parser = new pb::MessageParser<MarketStateAttributeMetadata>(() => new MarketStateAttributeMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarketStateAttributeMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateAttributeMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateAttributeMetadata(MarketStateAttributeMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      level_ = other.level_;
      valueMetadata_ = other.valueMetadata_.Clone();
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateAttributeMetadata Clone() {
      return new MarketStateAttributeMetadata(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Attribute name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    /// <summary>
    /// Attribute level in attributes hierarchy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Level {
      get { if ((_hasBits0 & 1) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value_metadata" field.</summary>
    public const int ValueMetadataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Metadata2.MarketStateValueMetadata> _repeated_valueMetadata_codec
        = pb::FieldCodec.ForMessage(26, global::Metadata2.MarketStateValueMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.MarketStateValueMetadata> valueMetadata_ = new pbc::RepeatedField<global::Metadata2.MarketStateValueMetadata>();
    /// <summary>
    /// Attribute possible values metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.MarketStateValueMetadata> ValueMetadata {
      get { return valueMetadata_; }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 4;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// If present and true - attribute should be deleted from metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarketStateAttributeMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarketStateAttributeMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if(!valueMetadata_.Equals(other.valueMetadata_)) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      hash ^= valueMetadata_.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      valueMetadata_.WriteTo(output, _repeated_valueMetadata_codec);
      if (HasDeleted) {
        output.WriteRawTag(32);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      valueMetadata_.WriteTo(ref output, _repeated_valueMetadata_codec);
      if (HasDeleted) {
        output.WriteRawTag(32);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += valueMetadata_.CalculateSize(_repeated_valueMetadata_codec);
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarketStateAttributeMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      valueMetadata_.Add(other.valueMetadata_);
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 26: {
            valueMetadata_.AddEntriesFrom(input, _repeated_valueMetadata_codec);
            break;
          }
          case 32: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 26: {
            valueMetadata_.AddEntriesFrom(ref input, _repeated_valueMetadata_codec);
            break;
          }
          case 32: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Market State attribute value metadata.
  /// Note: To apply a value metadata update one must follow rules:
  ///  1. If a received update has MarketStateValueMetadata with the "value" field value, which does not exist
  ///     in the local state, then this metadata must be added to it.
  ///  2. If a received update has MarketStateValueMetadata with the "value" field value, which exists
  ///     in the local state, then:
  ///     i. If the field "deleted" present and set to true - this MarketStateValueMetadata should be deleted
  ///        from the local state.
  ///     ii. If the field "description" value is different from the value stored in the local state - it should be set
  ///         to the new value.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MarketStateValueMetadata : pb::IMessage<MarketStateValueMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateValueMetadata> _parser = new pb::MessageParser<MarketStateValueMetadata>(() => new MarketStateValueMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarketStateValueMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateValueMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateValueMetadata(MarketStateValueMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      description_ = other.description_;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarketStateValueMetadata Clone() {
      return new MarketStateValueMetadata(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    /// Attribute value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Attribute value description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 3;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// If present and true - attribute value metadata should be deleted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 1) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarketStateValueMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarketStateValueMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Description != other.Description) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasValue) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(24);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasValue) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(24);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarketStateValueMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for exchange metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ExchangeMetadataRequest : pb::IMessage<ExchangeMetadataRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeMetadataRequest> _parser = new pb::MessageParser<ExchangeMetadataRequest>(() => new ExchangeMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExchangeMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataRequest(ExchangeMetadataRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataRequest Clone() {
      return new ExchangeMetadataRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExchangeMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExchangeMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExchangeMetadataRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with exchange metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ExchangeMetadataReport : pb::IMessage<ExchangeMetadataReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeMetadataReport> _parser = new pb::MessageParser<ExchangeMetadataReport>(() => new ExchangeMetadataReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExchangeMetadataReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataReport(ExchangeMetadataReport other) : this() {
      exchangeMetadata_ = other.exchangeMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadataReport Clone() {
      return new ExchangeMetadataReport(this);
    }

    /// <summary>Field number for the "exchange_metadata" field.</summary>
    public const int ExchangeMetadataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Metadata2.ExchangeMetadata> _repeated_exchangeMetadata_codec
        = pb::FieldCodec.ForMessage(10, global::Metadata2.ExchangeMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.ExchangeMetadata> exchangeMetadata_ = new pbc::RepeatedField<global::Metadata2.ExchangeMetadata>();
    /// <summary>
    /// Requested exchange metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.ExchangeMetadata> ExchangeMetadata {
      get { return exchangeMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExchangeMetadataReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExchangeMetadataReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchangeMetadata_.Equals(other.exchangeMetadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchangeMetadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exchangeMetadata_.WriteTo(output, _repeated_exchangeMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exchangeMetadata_.WriteTo(ref output, _repeated_exchangeMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += exchangeMetadata_.CalculateSize(_repeated_exchangeMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExchangeMetadataReport other) {
      if (other == null) {
        return;
      }
      exchangeMetadata_.Add(other.exchangeMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchangeMetadata_.AddEntriesFrom(input, _repeated_exchangeMetadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            exchangeMetadata_.AddEntriesFrom(ref input, _repeated_exchangeMetadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Exchange metadata.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ExchangeMetadata : pb::IMessage<ExchangeMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeMetadata> _parser = new pb::MessageParser<ExchangeMetadata>(() => new ExchangeMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExchangeMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Metadata2.Metadata2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadata(ExchangeMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      exchangeId_ = other.exchangeId_;
      contributorType_ = other.contributorType_;
      abbreviation_ = other.abbreviation_;
      name_ = other.name_;
      description_ = other.description_;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExchangeMetadata Clone() {
      return new ExchangeMetadata(this);
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 1;
    private readonly static int ExchangeIdDefaultValue = 0;

    private int exchangeId_;
    /// <summary>
    /// Exchange ID.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchangeId {
      get { if ((_hasBits0 & 1) != 0) { return exchangeId_; } else { return ExchangeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        exchangeId_ = value;
      }
    }
    /// <summary>Gets whether the "exchange_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchangeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "exchange_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchangeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "contributor_type" field.</summary>
    public const int ContributorTypeFieldNumber = 2;
    private readonly static uint ContributorTypeDefaultValue = 0;

    private uint contributorType_;
    /// <summary>
    /// This field is associated with ContributorType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContributorType {
      get { if ((_hasBits0 & 2) != 0) { return contributorType_; } else { return ContributorTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        contributorType_ = value;
      }
    }
    /// <summary>Gets whether the "contributor_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "contributor_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "abbreviation" field.</summary>
    public const int AbbreviationFieldNumber = 3;
    private readonly static string AbbreviationDefaultValue = "";

    private string abbreviation_;
    /// <summary>
    /// Exchange abbreviation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Abbreviation {
      get { return abbreviation_ ?? AbbreviationDefaultValue; }
      set {
        abbreviation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "abbreviation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAbbreviation {
      get { return abbreviation_ != null; }
    }
    /// <summary>Clears the value of the "abbreviation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAbbreviation() {
      abbreviation_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Exchange name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 6;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// If present and true - exchange metadata should be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 4) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExchangeMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExchangeMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExchangeId != other.ExchangeId) return false;
      if (ContributorType != other.ContributorType) return false;
      if (Abbreviation != other.Abbreviation) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExchangeId) hash ^= ExchangeId.GetHashCode();
      if (HasContributorType) hash ^= ContributorType.GetHashCode();
      if (HasAbbreviation) hash ^= Abbreviation.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExchangeId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContributorType);
      }
      if (HasAbbreviation) {
        output.WriteRawTag(26);
        output.WriteString(Abbreviation);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(48);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExchangeId) {
        output.WriteRawTag(8);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContributorType);
      }
      if (HasAbbreviation) {
        output.WriteRawTag(26);
        output.WriteString(Abbreviation);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasDeleted) {
        output.WriteRawTag(48);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasExchangeId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExchangeId);
      }
      if (HasContributorType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContributorType);
      }
      if (HasAbbreviation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Abbreviation);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExchangeMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasExchangeId) {
        ExchangeId = other.ExchangeId;
      }
      if (other.HasContributorType) {
        ContributorType = other.ContributorType;
      }
      if (other.HasAbbreviation) {
        Abbreviation = other.Abbreviation;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 16: {
            ContributorType = input.ReadUInt32();
            break;
          }
          case 26: {
            Abbreviation = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 16: {
            ContributorType = input.ReadUInt32();
            break;
          }
          case 26: {
            Abbreviation = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExchangeMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Contributor type.
      /// </summary>
      public enum ContributorType {
        [pbr::OriginalName("CONTRIBUTOR_TYPE_UNDEFINED")] Undefined = 0,
        /// <summary>
        /// Contributor is a quote source.
        /// </summary>
        [pbr::OriginalName("CONTRIBUTOR_TYPE_US_EQUITY_STYLE")] UsEquityStyle = 1,
        /// <summary>
        /// Contributor is a buyer.
        /// </summary>
        [pbr::OriginalName("CONTRIBUTOR_TYPE_OTC_STYLE")] OtcStyle = 2,
        /// <summary>
        /// Contributor is a seller.
        /// </summary>
        [pbr::OriginalName("CONTRIBUTOR_TYPE_CLUSTER_STYLE")] ClusterStyle = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
