// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/symbol_browsing_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SymbolBrowsing2 {

  /// <summary>Holder for reflection information generated from WebAPI/symbol_browsing_2.proto</summary>
  public static partial class SymbolBrowsing2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/symbol_browsing_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SymbolBrowsing2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XZWJBUEkvc3ltYm9sX2Jyb3dzaW5nXzIucHJvdG8SEXN5bWJvbF9icm93",
            "c2luZ18yGhdXZWJBUEkvbWV0YWRhdGFfMi5wcm90bxodV2ViQVBJL21ldGFk",
            "YXRhX2FkbWluXzIucHJvdG8aFGNvbW1vbi9kZWNpbWFsLnByb3RvGhVjb21t",
            "b24vc2hhcmVkXzEucHJvdG8itQQKBlN5bWJvbBIKCgJpZBgBIAIoCRIMCgRu",
            "YW1lGAIgAigJEhMKC2Rlc2NyaXB0aW9uGAMgAigJEhQKCGNmaV9jb2RlGAQg",
            "ASgJQgIYARIZChFoYXNfY2hpbGRfc3ltYm9scxgFIAEoCBIPCgdkZWxldGVk",
            "GAcgASgIEh0KEWxhc3RfdHJhZGluZ19kYXRlGAggASgSQgIYARIfChNtYXR1",
            "cml0eV9tb250aF95ZWFyGAkgASgJQgIYARIhChVpbnN0cnVtZW50X2dyb3Vw",
            "X25hbWUYCiABKAlCAhgBEhgKEHBhcmVudF9zeW1ib2xfaWQYCyABKAkSFAoM",
            "Y2F0ZWdvcnlfaWRzGAwgAygJEhwKEHNvdXJjZV9zeW1ib2xfaWQYDSABKAlC",
            "AhgBEgwKBHJhbmsYESABKA0SPAoQcHJvZHVjdF9tZXRhZGF0YRgOIAEoCzIi",
            "LnN5bWJvbF9icm93c2luZ18yLlByb2R1Y3RNZXRhZGF0YRI+ChFzZWN1cml0",
            "eV9tZXRhZGF0YRgPIAEoCzIjLnN5bWJvbF9icm93c2luZ18yLlNlY3VyaXR5",
            "TWV0YWRhdGESRAoYb3B0aW9uX21hdHVyaXR5X21ldGFkYXRhGBAgASgLMiIu",
            "bWV0YWRhdGFfMi5PcHRpb25NYXR1cml0eU1ldGFkYXRhEjcKEWNvbnRyYWN0",
            "X21ldGFkYXRhGAYgASgLMhwubWV0YWRhdGFfMi5Db250cmFjdE1ldGFkYXRh",
            "IqQBCg5TeW1ib2xDYXRlZ29yeRIKCgJpZBgBIAIoCRIMCgRuYW1lGAIgAigJ",
            "EhMKC2Rlc2NyaXB0aW9uGAMgASgJEhEKCXBhcmVudF9pZBgEIAEoCRISCgpj",
            "YW5fZmlsdGVyGAUgAigIEhMKC2V4Y2hhbmdlX2lkGAYgASgREhYKDmNvbnRy",
            "aWJ1dG9yX2lkGAcgASgJEg8KB2RlbGV0ZWQYCCABKAgiPwoZU3ltYm9sQ2F0",
            "ZWdvcnlMaXN0UmVxdWVzdBITCgtjYXRlZ29yeV9pZBgBIAEoCRINCgVkZXB0",
            "aBgCIAEoDSJYChhTeW1ib2xDYXRlZ29yeUxpc3RSZXBvcnQSPAoRc3ltYm9s",
            "X2NhdGVnb3JpZXMYASADKAsyIS5zeW1ib2xfYnJvd3NpbmdfMi5TeW1ib2xD",
            "YXRlZ29yeSIsChVTeW1ib2xDYXRlZ29yeVJlcXVlc3QSEwoLY2F0ZWdvcnlf",
            "aWQYASABKAkiUgoUU3ltYm9sQ2F0ZWdvcnlSZXBvcnQSOgoPc3ltYm9sX2Nh",
            "dGVnb3J5GAEgASgLMiEuc3ltYm9sX2Jyb3dzaW5nXzIuU3ltYm9sQ2F0ZWdv",
            "cnkiSwopU3ltYm9sQ2F0ZWdvcnlMaXN0QnlJbnN0cnVtZW50VHlwZVJlcXVl",
            "c3QSHgoWaW5zdHJ1bWVudF9jbGllbnRfdHlwZRgBIAEoDSJoCihTeW1ib2xD",
            "YXRlZ29yeUxpc3RCeUluc3RydW1lbnRUeXBlUmVwb3J0EjwKEXN5bWJvbF9j",
            "YXRlZ29yaWVzGAEgAygLMiEuc3ltYm9sX2Jyb3dzaW5nXzIuU3ltYm9sQ2F0",
            "ZWdvcnkiUgoRU3ltYm9sTGlzdFJlcXVlc3QSFAoMY2F0ZWdvcnlfaWRzGAEg",
            "AygJEg0KBWRlcHRoGAIgASgNEhgKEHBhcmVudF9zeW1ib2xfaWQYAyABKAki",
            "PgoQU3ltYm9sTGlzdFJlcG9ydBIqCgdzeW1ib2xzGAEgAygLMhkuc3ltYm9s",
            "X2Jyb3dzaW5nXzIuU3ltYm9sIiIKDVN5bWJvbFJlcXVlc3QSEQoJc3ltYm9s",
            "X2lkGAEgAigJIjkKDFN5bWJvbFJlcG9ydBIpCgZzeW1ib2wYASABKAsyGS5z",
            "eW1ib2xfYnJvd3NpbmdfMi5TeW1ib2wiJQoPUHJvZHVjdE1ldGFkYXRhEhIK",
            "CnByb2R1Y3RfaWQYASABKAkiggIKElByb2Nlc3NpbmdNZXRhZGF0YRIQCghj",
            "dXJyZW5jeRgBIAEoCRIRCgl0aWNrX3NpemUYAiABKAESEgoKdGlja192YWx1",
            "ZRgDIAEoARIsChZjb250cmFjdF9zaXplX2luX3VuaXRzGAQgASgLMgwuY3Fn",
            "LkRlY2ltYWwSKgoSY29udHJhY3Rfc2l6ZV91bml0GAUgASgLMg4uc2hhcmVk",
            "XzEuVGV4dBIrCiNjdXJyZW5jeV9yYXRlX2luc3RydW1lbnRfZ3JvdXBfbmFt",
            "ZRgGIAEoCRIsCiRjdXJyZW5jeV9oZWRnZV9pbnN0cnVtZW50X2dyb3VwX25h",
            "bWUYByABKAki2QMKEFNlY3VyaXR5TWV0YWRhdGESEwoLc2VjdXJpdHlfaWQY",
            "ASABKAkSEAoIY2ZpX2NvZGUYAiABKAkSFAoIY3VycmVuY3kYAyABKAlCAhgB",
            "EhUKCXRpY2tfc2l6ZRgEIAEoAUICGAESFgoKdGlja192YWx1ZRgFIAEoAUIC",
            "GAESFwoLcGVyaW9kX3R5cGUYBiABKA1CAhgBEhgKDHBlcmlvZF92YWx1ZRgH",
            "IAEoDUICGAESMAoWY29udHJhY3Rfc2l6ZV9pbl91bml0cxgIIAEoCzIMLmNx",
            "Zy5EZWNpbWFsQgIYARIuChJjb250cmFjdF9zaXplX3VuaXQYCSABKAsyDi5z",
            "aGFyZWRfMS5UZXh0QgIYARJHChZjb250cmlidXRvcl9wYXJhbWV0ZXJzGAog",
            "AygLMicubWV0YWRhdGFfYWRtaW5fMi5Db250cmlidXRvclBhcmFtZXRlcnMS",
            "EQoJc3ltYm9sX2lkGAsgASgJEiQKHHNvdXJjZV9pbnN0cnVtZW50X2dyb3Vw",
            "X25hbWUYDCABKAkSQgoTcHJvY2Vzc2luZ19tZXRhZGF0YRgNIAMoCzIlLnN5",
            "bWJvbF9icm93c2luZ18yLlByb2Nlc3NpbmdNZXRhZGF0YSJUChRQcm9kdWN0",
            "U2VhcmNoUmVxdWVzdBITCgtzZWFyY2hfdGVybRgBIAEoCRIUCgxjYXRlZ29y",
            "eV9pZHMYAiADKAkSEQoJcmVzZXJ2ZWQxGAMgASgIIkEKE1Byb2R1Y3RTZWFy",
            "Y2hSZXBvcnQSKgoHc3ltYm9scxgBIAMoCzIZLnN5bWJvbF9icm93c2luZ18y",
            "LlN5bWJvbCr3BAoUSW5zdHJ1bWVudENsaWVudFR5cGUSIgoeSU5TVFJVTUVO",
            "VF9DTElFTlRfVFlQRV9VTktOT1dOEAASKAokSU5TVFJVTUVOVF9DTElFTlRf",
            "VFlQRV9TUFJFQURfQlVORExFEAESKAokSU5TVFJVTUVOVF9DTElFTlRfVFlQ",
            "RV9TUFJFQURfQ09ORE9SEAISMgouSU5TVFJVTUVOVF9DTElFTlRfVFlQRV9T",
            "UFJFQURfRE9VQkxFX0JVVFRFUkZMWRADEjkKNUlOU1RSVU1FTlRfQ0xJRU5U",
            "X1RZUEVfU1BSRUFEX0ZVVFVSRVNfSU5URVJfQ09NTU9ESVRZEAQSKwonSU5T",
            "VFJVTUVOVF9DTElFTlRfVFlQRV9TUFJFQURfQlVUVEVSRkxZEAUSJgoiSU5T",
            "VFJVTUVOVF9DTElFTlRfVFlQRV9TUFJFQURfUEFDSxAGEjAKLElOU1RSVU1F",
            "TlRfQ0xJRU5UX1RZUEVfU1BSRUFEX1BBQ0tfQlVUVEVSRkxZEAcSNwozSU5T",
            "VFJVTUVOVF9DTElFTlRfVFlQRV9TUFJFQURfUkVEVUNFRF9USUNLX0NBTEVO",
            "REFSEAgSKgomSU5TVFJVTUVOVF9DTElFTlRfVFlQRV9TUFJFQURfQ0FMRU5E",
            "QVIQCRInCiNJTlNUUlVNRU5UX0NMSUVOVF9UWVBFX1NQUkVBRF9TVFJJUBAL",
            "EjIKLklOU1RSVU1FTlRfQ0xJRU5UX1RZUEVfU1BSRUFEX1JFVkVSU0VfQ0FM",
            "RU5EQVIQDBIvCitJTlNUUlVNRU5UX0NMSUVOVF9UWVBFX1NQUkVBRF9NT05U",
            "SF9WU19QQUNLEA4="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Metadata2.Metadata2Reflection.Descriptor, global::MetadataAdmin2.MetadataAdmin2Reflection.Descriptor, global::Cqg.DecimalReflection.Descriptor, global::Shared1.Shared1Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SymbolBrowsing2.InstrumentClientType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.Symbol), global::SymbolBrowsing2.Symbol.Parser, new[]{ "Id", "Name", "Description", "CfiCode", "HasChildSymbols", "Deleted", "LastTradingDate", "MaturityMonthYear", "InstrumentGroupName", "ParentSymbolId", "CategoryIds", "SourceSymbolId", "Rank", "ProductMetadata", "SecurityMetadata", "OptionMaturityMetadata", "ContractMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategory), global::SymbolBrowsing2.SymbolCategory.Parser, new[]{ "Id", "Name", "Description", "ParentId", "CanFilter", "ExchangeId", "ContributorId", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListRequest), global::SymbolBrowsing2.SymbolCategoryListRequest.Parser, new[]{ "CategoryId", "Depth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListReport), global::SymbolBrowsing2.SymbolCategoryListReport.Parser, new[]{ "SymbolCategories" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryRequest), global::SymbolBrowsing2.SymbolCategoryRequest.Parser, new[]{ "CategoryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryReport), global::SymbolBrowsing2.SymbolCategoryReport.Parser, new[]{ "SymbolCategory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListByInstrumentTypeRequest), global::SymbolBrowsing2.SymbolCategoryListByInstrumentTypeRequest.Parser, new[]{ "InstrumentClientType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListByInstrumentTypeReport), global::SymbolBrowsing2.SymbolCategoryListByInstrumentTypeReport.Parser, new[]{ "SymbolCategories" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolListRequest), global::SymbolBrowsing2.SymbolListRequest.Parser, new[]{ "CategoryIds", "Depth", "ParentSymbolId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolListReport), global::SymbolBrowsing2.SymbolListReport.Parser, new[]{ "Symbols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolRequest), global::SymbolBrowsing2.SymbolRequest.Parser, new[]{ "SymbolId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolReport), global::SymbolBrowsing2.SymbolReport.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ProductMetadata), global::SymbolBrowsing2.ProductMetadata.Parser, new[]{ "ProductId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ProcessingMetadata), global::SymbolBrowsing2.ProcessingMetadata.Parser, new[]{ "Currency", "TickSize", "TickValue", "ContractSizeInUnits", "ContractSizeUnit", "CurrencyRateInstrumentGroupName", "CurrencyHedgeInstrumentGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SecurityMetadata), global::SymbolBrowsing2.SecurityMetadata.Parser, new[]{ "SecurityId", "CfiCode", "Currency", "TickSize", "TickValue", "PeriodType", "PeriodValue", "ContractSizeInUnits", "ContractSizeUnit", "ContributorParameters", "SymbolId", "SourceInstrumentGroupName", "ProcessingMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ProductSearchRequest), global::SymbolBrowsing2.ProductSearchRequest.Parser, new[]{ "SearchTerm", "CategoryIds", "Reserved1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ProductSearchReport), global::SymbolBrowsing2.ProductSearchReport.Parser, new[]{ "Symbols" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Instrument client type.
  /// Values of this type are known to be stable in contrast to symbol category ids
  /// and so they can be hard-coded in client code.
  /// Only spread-related types are supported so far.
  /// </summary>
  public enum InstrumentClientType {
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_BUNDLE")] SpreadBundle = 1,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_CONDOR")] SpreadCondor = 2,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_DOUBLE_BUTTERFLY")] SpreadDoubleButterfly = 3,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_FUTURES_INTER_COMMODITY")] SpreadFuturesInterCommodity = 4,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_BUTTERFLY")] SpreadButterfly = 5,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_PACK")] SpreadPack = 6,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_PACK_BUTTERFLY")] SpreadPackButterfly = 7,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_REDUCED_TICK_CALENDAR")] SpreadReducedTickCalendar = 8,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_CALENDAR")] SpreadCalendar = 9,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_STRIP")] SpreadStrip = 11,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_REVERSE_CALENDAR")] SpreadReverseCalendar = 12,
    [pbr::OriginalName("INSTRUMENT_CLIENT_TYPE_SPREAD_MONTH_VS_PACK")] SpreadMonthVsPack = 14,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Symbol structure.
  /// It can represent either a product, a security, a maturity or a contract.
  /// So only one of corresponding *_metadata fields can be specified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Symbol : pb::IMessage<Symbol>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Symbol> _parser = new pb::MessageParser<Symbol>(() => new Symbol());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Symbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Symbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Symbol(Symbol other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      cfiCode_ = other.cfiCode_;
      hasChildSymbols_ = other.hasChildSymbols_;
      deleted_ = other.deleted_;
      lastTradingDate_ = other.lastTradingDate_;
      maturityMonthYear_ = other.maturityMonthYear_;
      instrumentGroupName_ = other.instrumentGroupName_;
      parentSymbolId_ = other.parentSymbolId_;
      categoryIds_ = other.categoryIds_.Clone();
      sourceSymbolId_ = other.sourceSymbolId_;
      rank_ = other.rank_;
      productMetadata_ = other.productMetadata_ != null ? other.productMetadata_.Clone() : null;
      securityMetadata_ = other.securityMetadata_ != null ? other.securityMetadata_.Clone() : null;
      optionMaturityMetadata_ = other.optionMaturityMetadata_ != null ? other.optionMaturityMetadata_.Clone() : null;
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Symbol Clone() {
      return new Symbol(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Symbol Identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Symbol readable name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Symbol description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 4;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
    /// Deprecated and should not be used. Use nested metadata messages.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "has_child_symbols" field.</summary>
    public const int HasChildSymbolsFieldNumber = 5;
    private readonly static bool HasChildSymbolsDefaultValue = false;

    private bool hasChildSymbols_;
    /// <summary>
    /// True if this symbol has child symbols (false for leafs of the symbol tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChildSymbols {
      get { if ((_hasBits0 & 1) != 0) { return hasChildSymbols_; } else { return HasChildSymbolsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hasChildSymbols_ = value;
      }
    }
    /// <summary>Gets whether the "has_child_symbols" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasChildSymbols {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "has_child_symbols" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasChildSymbols() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the symbol is either removed (e.g. expired) or
    /// no longer meets request filtering criterias (e.g. SymbolListRequest.category_id filter).
    /// Note: list of categories in category_id field (see below) may be cleared when symbol is removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "last_trading_date" field.</summary>
    public const int LastTradingDateFieldNumber = 8;
    private readonly static long LastTradingDateDefaultValue = 0L;

    private long lastTradingDate_;
    /// <summary>
    /// Last trading date for derivatives if applicable.
    /// (local exchange date in time format, use date part only).
    /// Deprecated and should not be used. Use nested metadata messages.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastTradingDate {
      get { if ((_hasBits0 & 4) != 0) { return lastTradingDate_; } else { return LastTradingDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lastTradingDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_trading_date" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradingDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "last_trading_date" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradingDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "maturity_month_year" field.</summary>
    public const int MaturityMonthYearFieldNumber = 9;
    private readonly static string MaturityMonthYearDefaultValue = "";

    private string maturityMonthYear_;
    /// <summary>
    /// Month letter and 2-digit year identifying the maturity month of the symbol.
    /// Note: look at comment for maturity_month_year from ContractMetadata for further info.
    /// Deprecated and should not be used. Use nested metadata messages.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityMonthYear {
      get { return maturityMonthYear_ ?? MaturityMonthYearDefaultValue; }
      set {
        maturityMonthYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturity_month_year" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityMonthYear {
      get { return maturityMonthYear_ != null; }
    }
    /// <summary>Clears the value of the "maturity_month_year" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityMonthYear() {
      maturityMonthYear_ = null;
    }

    /// <summary>Field number for the "instrument_group_name" field.</summary>
    public const int InstrumentGroupNameFieldNumber = 10;
    private readonly static string InstrumentGroupNameDefaultValue = "";

    private string instrumentGroupName_;
    /// <summary>
    /// Name of a group of symbols that share the same properties (e.g. commodity name for futures and options).
    /// Deprecated and should not be used. Use nested metadata messages.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentGroupName {
      get { return instrumentGroupName_ ?? InstrumentGroupNameDefaultValue; }
      set {
        instrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_name" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentGroupName {
      get { return instrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_name" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentGroupName() {
      instrumentGroupName_ = null;
    }

    /// <summary>Field number for the "parent_symbol_id" field.</summary>
    public const int ParentSymbolIdFieldNumber = 11;
    private readonly static string ParentSymbolIdDefaultValue = "";

    private string parentSymbolId_;
    /// <summary>
    /// ID of the parent symbol (if this is not the root symbol - product).
    /// If this field is empty, product_metadata field is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentSymbolId {
      get { return parentSymbolId_ ?? ParentSymbolIdDefaultValue; }
      set {
        parentSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentSymbolId {
      get { return parentSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "parent_symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentSymbolId() {
      parentSymbolId_ = null;
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of categories of this symbol, if any.
    /// See SymbolCategory and SymbolCategoryRequest messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    /// <summary>Field number for the "source_symbol_id" field.</summary>
    public const int SourceSymbolIdFieldNumber = 13;
    private readonly static string SourceSymbolIdDefaultValue = "";

    private string sourceSymbolId_;
    /// <summary>
    /// Deprecated and should not be used. Use SecurityMetadata.source_instrument_group_name or
    /// ContractMetadata.source_contract_id instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SourceSymbolId {
      get { return sourceSymbolId_ ?? SourceSymbolIdDefaultValue; }
      set {
        sourceSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source_symbol_id" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSourceSymbolId {
      get { return sourceSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "source_symbol_id" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSourceSymbolId() {
      sourceSymbolId_ = null;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 17;
    private readonly static uint RankDefaultValue = 0;

    private uint rank_;
    /// <summary>
    /// Rank value of the symbol for sorting peer symbols in user interfaces. Higher value means greater priority.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Rank {
      get { if ((_hasBits0 & 8) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRank {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRank() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "product_metadata" field.</summary>
    public const int ProductMetadataFieldNumber = 14;
    private global::SymbolBrowsing2.ProductMetadata productMetadata_;
    /// <summary>
    /// Meta-data of a product if this symbol describes one (aka Symbol Root Key).
    /// If this field is set, this symbol doesn't have a parent symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SymbolBrowsing2.ProductMetadata ProductMetadata {
      get { return productMetadata_; }
      set {
        productMetadata_ = value;
      }
    }

    /// <summary>Field number for the "security_metadata" field.</summary>
    public const int SecurityMetadataFieldNumber = 15;
    private global::SymbolBrowsing2.SecurityMetadata securityMetadata_;
    /// <summary>
    /// Meta-data of a security if this symbol describes one (aka Symbol Prefix Key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SymbolBrowsing2.SecurityMetadata SecurityMetadata {
      get { return securityMetadata_; }
      set {
        securityMetadata_ = value;
      }
    }

    /// <summary>Field number for the "option_maturity_metadata" field.</summary>
    public const int OptionMaturityMetadataFieldNumber = 16;
    private global::Metadata2.OptionMaturityMetadata optionMaturityMetadata_;
    /// <summary>
    /// Meta-data of options maturity group if this symbol describes one (aka Option Lead Key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.OptionMaturityMetadata OptionMaturityMetadata {
      get { return optionMaturityMetadata_; }
      set {
        optionMaturityMetadata_ = value;
      }
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 6;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Contract meta-data if a symbol is a specific contract (leaf of the symbol tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Symbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Symbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (CfiCode != other.CfiCode) return false;
      if (HasChildSymbols != other.HasChildSymbols) return false;
      if (Deleted != other.Deleted) return false;
      if (LastTradingDate != other.LastTradingDate) return false;
      if (MaturityMonthYear != other.MaturityMonthYear) return false;
      if (InstrumentGroupName != other.InstrumentGroupName) return false;
      if (ParentSymbolId != other.ParentSymbolId) return false;
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      if (SourceSymbolId != other.SourceSymbolId) return false;
      if (Rank != other.Rank) return false;
      if (!object.Equals(ProductMetadata, other.ProductMetadata)) return false;
      if (!object.Equals(SecurityMetadata, other.SecurityMetadata)) return false;
      if (!object.Equals(OptionMaturityMetadata, other.OptionMaturityMetadata)) return false;
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasHasChildSymbols) hash ^= HasChildSymbols.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasLastTradingDate) hash ^= LastTradingDate.GetHashCode();
      if (HasMaturityMonthYear) hash ^= MaturityMonthYear.GetHashCode();
      if (HasInstrumentGroupName) hash ^= InstrumentGroupName.GetHashCode();
      if (HasParentSymbolId) hash ^= ParentSymbolId.GetHashCode();
      hash ^= categoryIds_.GetHashCode();
      if (HasSourceSymbolId) hash ^= SourceSymbolId.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (productMetadata_ != null) hash ^= ProductMetadata.GetHashCode();
      if (securityMetadata_ != null) hash ^= SecurityMetadata.GetHashCode();
      if (optionMaturityMetadata_ != null) hash ^= OptionMaturityMetadata.GetHashCode();
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasHasChildSymbols) {
        output.WriteRawTag(40);
        output.WriteBool(HasChildSymbols);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        output.WriteRawTag(106);
        output.WriteString(SourceSymbolId);
      }
      if (productMetadata_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OptionMaturityMetadata);
      }
      if (HasRank) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasHasChildSymbols) {
        output.WriteRawTag(40);
        output.WriteBool(HasChildSymbols);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        output.WriteRawTag(106);
        output.WriteString(SourceSymbolId);
      }
      if (productMetadata_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OptionMaturityMetadata);
      }
      if (HasRank) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasHasChildSymbols) {
        size += 1 + 1;
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasLastTradingDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSymbolId);
      }
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceSymbolId);
      }
      if (HasRank) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (productMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionMaturityMetadata);
      }
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Symbol other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasHasChildSymbols) {
        HasChildSymbols = other.HasChildSymbols;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasLastTradingDate) {
        LastTradingDate = other.LastTradingDate;
      }
      if (other.HasMaturityMonthYear) {
        MaturityMonthYear = other.MaturityMonthYear;
      }
      if (other.HasInstrumentGroupName) {
        InstrumentGroupName = other.InstrumentGroupName;
      }
      if (other.HasParentSymbolId) {
        ParentSymbolId = other.ParentSymbolId;
      }
      categoryIds_.Add(other.categoryIds_);
      if (other.HasSourceSymbolId) {
        SourceSymbolId = other.SourceSymbolId;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.productMetadata_ != null) {
        if (productMetadata_ == null) {
          ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
        }
        ProductMetadata.MergeFrom(other.ProductMetadata);
      }
      if (other.securityMetadata_ != null) {
        if (securityMetadata_ == null) {
          SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
        }
        SecurityMetadata.MergeFrom(other.SecurityMetadata);
      }
      if (other.optionMaturityMetadata_ != null) {
        if (optionMaturityMetadata_ == null) {
          OptionMaturityMetadata = new global::Metadata2.OptionMaturityMetadata();
        }
        OptionMaturityMetadata.MergeFrom(other.OptionMaturityMetadata);
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            HasChildSymbols = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 98: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
          case 106: {
            SourceSymbolId = input.ReadString();
            break;
          }
          case 114: {
            if (productMetadata_ == null) {
              ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
            }
            input.ReadMessage(ProductMetadata);
            break;
          }
          case 122: {
            if (securityMetadata_ == null) {
              SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
            }
            input.ReadMessage(SecurityMetadata);
            break;
          }
          case 130: {
            if (optionMaturityMetadata_ == null) {
              OptionMaturityMetadata = new global::Metadata2.OptionMaturityMetadata();
            }
            input.ReadMessage(OptionMaturityMetadata);
            break;
          }
          case 136: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            HasChildSymbols = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 98: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
          case 106: {
            SourceSymbolId = input.ReadString();
            break;
          }
          case 114: {
            if (productMetadata_ == null) {
              ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
            }
            input.ReadMessage(ProductMetadata);
            break;
          }
          case 122: {
            if (securityMetadata_ == null) {
              SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
            }
            input.ReadMessage(SecurityMetadata);
            break;
          }
          case 130: {
            if (optionMaturityMetadata_ == null) {
              OptionMaturityMetadata = new global::Metadata2.OptionMaturityMetadata();
            }
            input.ReadMessage(OptionMaturityMetadata);
            break;
          }
          case 136: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Symbol category.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategory : pb::IMessage<SymbolCategory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategory> _parser = new pb::MessageParser<SymbolCategory>(() => new SymbolCategory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategory(SymbolCategory other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      parentId_ = other.parentId_;
      canFilter_ = other.canFilter_;
      exchangeId_ = other.exchangeId_;
      contributorId_ = other.contributorId_;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategory Clone() {
      return new SymbolCategory(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Category identifier.
    /// Note: this identifier is not guaranteed to be stable, so categories should be
    /// obtained e.g. via SymbolCategoryListRequest or SymbolCategoryListByInstrumentTypeRequest
    /// instead of being saved using this id between sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Category name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Category description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 4;
    private readonly static string ParentIdDefaultValue = "";

    private string parentId_;
    /// <summary>
    /// Category parent identifier. Omitted for root categories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentId {
      get { return parentId_ ?? ParentIdDefaultValue; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentId {
      get { return parentId_ != null; }
    }
    /// <summary>Clears the value of the "parent_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentId() {
      parentId_ = null;
    }

    /// <summary>Field number for the "can_filter" field.</summary>
    public const int CanFilterFieldNumber = 5;
    private readonly static bool CanFilterDefaultValue = false;

    private bool canFilter_;
    /// <summary>
    /// Indicates whether this category can be used as a filter for getting a list of symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanFilter {
      get { if ((_hasBits0 & 1) != 0) { return canFilter_; } else { return CanFilterDefaultValue; } }
      set {
        _hasBits0 |= 1;
        canFilter_ = value;
      }
    }
    /// <summary>Gets whether the "can_filter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanFilter {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "can_filter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanFilter() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 6;
    private readonly static int ExchangeIdDefaultValue = 0;

    private int exchangeId_;
    /// <summary>
    /// If the category is an exchange then this field defines exchange id.
    /// See ExchangeMetadata.exchange_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchangeId {
      get { if ((_hasBits0 & 2) != 0) { return exchangeId_; } else { return ExchangeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        exchangeId_ = value;
      }
    }
    /// <summary>Gets whether the "exchange_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchangeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "exchange_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchangeId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "contributor_id" field.</summary>
    public const int ContributorIdFieldNumber = 7;
    private readonly static string ContributorIdDefaultValue = "";

    private string contributorId_;
    /// <summary>
    /// If the category is a OTC contributor then this field defines contributor ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContributorId {
      get { return contributorId_ ?? ContributorIdDefaultValue; }
      set {
        contributorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contributor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorId {
      get { return contributorId_ != null; }
    }
    /// <summary>Clears the value of the "contributor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorId() {
      contributorId_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 8;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the category is removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 4) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ParentId != other.ParentId) return false;
      if (CanFilter != other.CanFilter) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (ContributorId != other.ContributorId) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasParentId) hash ^= ParentId.GetHashCode();
      if (HasCanFilter) hash ^= CanFilter.GetHashCode();
      if (HasExchangeId) hash ^= ExchangeId.GetHashCode();
      if (HasContributorId) hash ^= ContributorId.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasParentId) {
        output.WriteRawTag(34);
        output.WriteString(ParentId);
      }
      if (HasCanFilter) {
        output.WriteRawTag(40);
        output.WriteBool(CanFilter);
      }
      if (HasExchangeId) {
        output.WriteRawTag(48);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorId) {
        output.WriteRawTag(58);
        output.WriteString(ContributorId);
      }
      if (HasDeleted) {
        output.WriteRawTag(64);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasParentId) {
        output.WriteRawTag(34);
        output.WriteString(ParentId);
      }
      if (HasCanFilter) {
        output.WriteRawTag(40);
        output.WriteBool(CanFilter);
      }
      if (HasExchangeId) {
        output.WriteRawTag(48);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorId) {
        output.WriteRawTag(58);
        output.WriteString(ContributorId);
      }
      if (HasDeleted) {
        output.WriteRawTag(64);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasParentId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (HasCanFilter) {
        size += 1 + 1;
      }
      if (HasExchangeId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExchangeId);
      }
      if (HasContributorId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContributorId);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategory other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasParentId) {
        ParentId = other.ParentId;
      }
      if (other.HasCanFilter) {
        CanFilter = other.CanFilter;
      }
      if (other.HasExchangeId) {
        ExchangeId = other.ExchangeId;
      }
      if (other.HasContributorId) {
        ContributorId = other.ContributorId;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ParentId = input.ReadString();
            break;
          }
          case 40: {
            CanFilter = input.ReadBool();
            break;
          }
          case 48: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 58: {
            ContributorId = input.ReadString();
            break;
          }
          case 64: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ParentId = input.ReadString();
            break;
          }
          case 40: {
            CanFilter = input.ReadBool();
            break;
          }
          case 48: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 58: {
            ContributorId = input.ReadString();
            break;
          }
          case 64: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a symbol category [sub-]tree for a particular root. each category can have a list of sub-categories.
  /// A list of roots can be requested using an empty list of category IDs.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryListRequest : pb::IMessage<SymbolCategoryListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListRequest> _parser = new pb::MessageParser<SymbolCategoryListRequest>(() => new SymbolCategoryListRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListRequest(SymbolCategoryListRequest other) : this() {
      _hasBits0 = other._hasBits0;
      categoryId_ = other.categoryId_;
      depth_ = other.depth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListRequest Clone() {
      return new SymbolCategoryListRequest(this);
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private readonly static string CategoryIdDefaultValue = "";

    private string categoryId_;
    /// <summary>
    /// Category Identifier to request corresponding sub-tree.
    /// Do not specify category ID to get categories from roots.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CategoryId {
      get { return categoryId_ ?? CategoryIdDefaultValue; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCategoryId {
      get { return categoryId_ != null; }
    }
    /// <summary>Clears the value of the "category_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCategoryId() {
      categoryId_ = null;
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private readonly static uint DepthDefaultValue = 0;

    private uint depth_;
    /// <summary>
    /// Optional depth. One level is returned if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Depth {
      get { if ((_hasBits0 & 1) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepth() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      if (Depth != other.Depth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategoryId) hash ^= CategoryId.GetHashCode();
      if (HasDepth) hash ^= Depth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCategoryId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (HasDepth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Depth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryListRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasCategoryId) {
        CategoryId = other.CategoryId;
      }
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a symbol category tree for a particular root.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryListReport : pb::IMessage<SymbolCategoryListReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListReport> _parser = new pb::MessageParser<SymbolCategoryListReport>(() => new SymbolCategoryListReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryListReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListReport(SymbolCategoryListReport other) : this() {
      symbolCategories_ = other.symbolCategories_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListReport Clone() {
      return new SymbolCategoryListReport(this);
    }

    /// <summary>Field number for the "symbol_categories" field.</summary>
    public const int SymbolCategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.SymbolCategory> _repeated_symbolCategories_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.SymbolCategory.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> symbolCategories_ = new pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory>();
    /// <summary>
    /// List of categories linked to their parents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> SymbolCategories {
      get { return symbolCategories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryListReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolCategories_.Equals(other.symbolCategories_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolCategories_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbolCategories_.WriteTo(output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbolCategories_.WriteTo(ref output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbolCategories_.CalculateSize(_repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryListReport other) {
      if (other == null) {
        return;
      }
      symbolCategories_.Add(other.symbolCategories_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(ref input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a specific category by ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryRequest : pb::IMessage<SymbolCategoryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryRequest> _parser = new pb::MessageParser<SymbolCategoryRequest>(() => new SymbolCategoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryRequest(SymbolCategoryRequest other) : this() {
      categoryId_ = other.categoryId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryRequest Clone() {
      return new SymbolCategoryRequest(this);
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private readonly static string CategoryIdDefaultValue = "";

    private string categoryId_;
    /// <summary>
    /// Category Identifier to request corresponding category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CategoryId {
      get { return categoryId_ ?? CategoryIdDefaultValue; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCategoryId {
      get { return categoryId_ != null; }
    }
    /// <summary>Clears the value of the "category_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCategoryId() {
      categoryId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategoryId) hash ^= CategoryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCategoryId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasCategoryId) {
        CategoryId = other.CategoryId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a category.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryReport : pb::IMessage<SymbolCategoryReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryReport> _parser = new pb::MessageParser<SymbolCategoryReport>(() => new SymbolCategoryReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryReport(SymbolCategoryReport other) : this() {
      symbolCategory_ = other.symbolCategory_ != null ? other.symbolCategory_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryReport Clone() {
      return new SymbolCategoryReport(this);
    }

    /// <summary>Field number for the "symbol_category" field.</summary>
    public const int SymbolCategoryFieldNumber = 1;
    private global::SymbolBrowsing2.SymbolCategory symbolCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SymbolBrowsing2.SymbolCategory SymbolCategory {
      get { return symbolCategory_; }
      set {
        symbolCategory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SymbolCategory, other.SymbolCategory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (symbolCategory_ != null) hash ^= SymbolCategory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (symbolCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolCategory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (symbolCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolCategory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (symbolCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryReport other) {
      if (other == null) {
        return;
      }
      if (other.symbolCategory_ != null) {
        if (symbolCategory_ == null) {
          SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
        }
        SymbolCategory.MergeFrom(other.SymbolCategory);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbolCategory_ == null) {
              SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
            }
            input.ReadMessage(SymbolCategory);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (symbolCategory_ == null) {
              SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
            }
            input.ReadMessage(SymbolCategory);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a list of category symbols matching input instrument client type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryListByInstrumentTypeRequest : pb::IMessage<SymbolCategoryListByInstrumentTypeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListByInstrumentTypeRequest> _parser = new pb::MessageParser<SymbolCategoryListByInstrumentTypeRequest>(() => new SymbolCategoryListByInstrumentTypeRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryListByInstrumentTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeRequest(SymbolCategoryListByInstrumentTypeRequest other) : this() {
      _hasBits0 = other._hasBits0;
      instrumentClientType_ = other.instrumentClientType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeRequest Clone() {
      return new SymbolCategoryListByInstrumentTypeRequest(this);
    }

    /// <summary>Field number for the "instrument_client_type" field.</summary>
    public const int InstrumentClientTypeFieldNumber = 1;
    private readonly static uint InstrumentClientTypeDefaultValue = 0;

    private uint instrumentClientType_;
    /// <summary>
    /// Instrument client type.
    /// This field is associated with InstrumentClientType.Type enum.
    /// INSTRUMENT_CLIENT_TYPE_UNKNOWN is used if this field is empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint InstrumentClientType {
      get { if ((_hasBits0 & 1) != 0) { return instrumentClientType_; } else { return InstrumentClientTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        instrumentClientType_ = value;
      }
    }
    /// <summary>Gets whether the "instrument_client_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrumentClientType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "instrument_client_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrumentClientType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListByInstrumentTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryListByInstrumentTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentClientType != other.InstrumentClientType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInstrumentClientType) hash ^= InstrumentClientType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInstrumentClientType) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstrumentClientType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInstrumentClientType) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstrumentClientType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasInstrumentClientType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstrumentClientType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryListByInstrumentTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasInstrumentClientType) {
        InstrumentClientType = other.InstrumentClientType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentClientType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InstrumentClientType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of category symbols matching input instrument client type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolCategoryListByInstrumentTypeReport : pb::IMessage<SymbolCategoryListByInstrumentTypeReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListByInstrumentTypeReport> _parser = new pb::MessageParser<SymbolCategoryListByInstrumentTypeReport>(() => new SymbolCategoryListByInstrumentTypeReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolCategoryListByInstrumentTypeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeReport(SymbolCategoryListByInstrumentTypeReport other) : this() {
      symbolCategories_ = other.symbolCategories_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolCategoryListByInstrumentTypeReport Clone() {
      return new SymbolCategoryListByInstrumentTypeReport(this);
    }

    /// <summary>Field number for the "symbol_categories" field.</summary>
    public const int SymbolCategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.SymbolCategory> _repeated_symbolCategories_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.SymbolCategory.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> symbolCategories_ = new pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> SymbolCategories {
      get { return symbolCategories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListByInstrumentTypeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolCategoryListByInstrumentTypeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolCategories_.Equals(other.symbolCategories_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolCategories_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbolCategories_.WriteTo(output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbolCategories_.WriteTo(ref output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbolCategories_.CalculateSize(_repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolCategoryListByInstrumentTypeReport other) {
      if (other == null) {
        return;
      }
      symbolCategories_.Add(other.symbolCategories_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(ref input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a list of symbols according to a filter.
  /// At least one filter field has to be specified.
  /// Number of symbols in response is limited (default is 10000).
  /// Note: Symbols related to option strikes are not returned unless symbol id of
  /// corresponding option maturity symbol is specified as a parent_symbol_id in the request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolListRequest : pb::IMessage<SymbolListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolListRequest> _parser = new pb::MessageParser<SymbolListRequest>(() => new SymbolListRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListRequest(SymbolListRequest other) : this() {
      _hasBits0 = other._hasBits0;
      categoryIds_ = other.categoryIds_.Clone();
      depth_ = other.depth_;
      parentSymbolId_ = other.parentSymbolId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListRequest Clone() {
      return new SymbolListRequest(this);
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional category filter controlling how multiple symbol categories are applied in the filter.
    /// Categories within the same tree (having the same root) are applied by "OR" in the category filter
    /// (e.g. two exchanges, either matches). Otherwise categories are applied by "AND" (e.g. exchange and asset).
    /// See SymbolCategory and SymbolCategoryListRequest messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private readonly static uint DepthDefaultValue = 0;

    private uint depth_;
    /// <summary>
    /// Number of levels in the symbol tree to return from the top of the symbol tree
    /// (i.e. from product level) or from the parent symbol (if specified).
    /// Symbols from deeper levels are excluded from the results.
    /// One level is returned if the field is omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Depth {
      get { if ((_hasBits0 & 1) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "parent_symbol_id" field.</summary>
    public const int ParentSymbolIdFieldNumber = 3;
    private readonly static string ParentSymbolIdDefaultValue = "";

    private string parentSymbolId_;
    /// <summary>
    /// Parent symbol id filter to return only child symbols of this parent.
    /// If this field is specified, depth must be one or omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentSymbolId {
      get { return parentSymbolId_ ?? ParentSymbolIdDefaultValue; }
      set {
        parentSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentSymbolId {
      get { return parentSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "parent_symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentSymbolId() {
      parentSymbolId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      if (Depth != other.Depth) return false;
      if (ParentSymbolId != other.ParentSymbolId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categoryIds_.GetHashCode();
      if (HasDepth) hash ^= Depth.GetHashCode();
      if (HasParentSymbolId) hash ^= ParentSymbolId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(26);
        output.WriteString(ParentSymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(26);
        output.WriteString(ParentSymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (HasDepth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Depth);
      }
      if (HasParentSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSymbolId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolListRequest other) {
      if (other == null) {
        return;
      }
      categoryIds_.Add(other.categoryIds_);
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      if (other.HasParentSymbolId) {
        ParentSymbolId = other.ParentSymbolId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
          case 26: {
            ParentSymbolId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
          case 26: {
            ParentSymbolId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of found symbols.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolListReport : pb::IMessage<SymbolListReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolListReport> _parser = new pb::MessageParser<SymbolListReport>(() => new SymbolListReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolListReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListReport(SymbolListReport other) : this() {
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolListReport Clone() {
      return new SymbolListReport(this);
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.Symbol.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.Symbol> symbols_ = new pbc::RepeatedField<global::SymbolBrowsing2.Symbol>();
    /// <summary>
    /// List of symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SymbolBrowsing2.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolListReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolListReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolListReport other) {
      if (other == null) {
        return;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a specific symbol by ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolRequest : pb::IMessage<SymbolRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolRequest> _parser = new pb::MessageParser<SymbolRequest>(() => new SymbolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRequest(SymbolRequest other) : this() {
      symbolId_ = other.symbolId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolRequest Clone() {
      return new SymbolRequest(this);
    }

    /// <summary>Field number for the "symbol_id" field.</summary>
    public const int SymbolIdFieldNumber = 1;
    private readonly static string SymbolIdDefaultValue = "";

    private string symbolId_;
    /// <summary>
    /// ID of a symbol to request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SymbolId {
      get { return symbolId_ ?? SymbolIdDefaultValue; }
      set {
        symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbolId {
      get { return symbolId_ != null; }
    }
    /// <summary>Clears the value of the "symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbolId() {
      symbolId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolId != other.SymbolId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSymbolId) hash ^= SymbolId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSymbolId) {
        SymbolId = other.SymbolId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a symbol.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SymbolReport : pb::IMessage<SymbolReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolReport> _parser = new pb::MessageParser<SymbolReport>(() => new SymbolReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SymbolReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolReport(SymbolReport other) : this() {
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SymbolReport Clone() {
      return new SymbolReport(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private global::SymbolBrowsing2.Symbol symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SymbolBrowsing2.Symbol Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SymbolReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SymbolReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Symbol, other.Symbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (symbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (symbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SymbolReport other) {
      if (other == null) {
        return;
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          Symbol = new global::SymbolBrowsing2.Symbol();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbol_ == null) {
              Symbol = new global::SymbolBrowsing2.Symbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (symbol_ == null) {
              Symbol = new global::SymbolBrowsing2.Symbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ProductMetadata : pb::IMessage<ProductMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProductMetadata> _parser = new pb::MessageParser<ProductMetadata>(() => new ProductMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProductMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductMetadata(ProductMetadata other) : this() {
      productId_ = other.productId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductMetadata Clone() {
      return new ProductMetadata(this);
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private readonly static string ProductIdDefaultValue = "";

    private string productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductId {
      get { return productId_ ?? ProductIdDefaultValue; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "product_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductId {
      get { return productId_ != null; }
    }
    /// <summary>Clears the value of the "product_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductId() {
      productId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProductMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProductMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProductId) hash ^= ProductId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProductId) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProductId) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProductId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProductMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Metadata used for real-time and trading data processing for a group of contracts.
  /// Note that for some contracts tick_size, tick_value or contract_size_in_units values on
  /// ContractMetadata level might differ from corresponding values in ProcessingMetadata
  /// (e.g., tick_size and tick_value for VTS contracts or contract_size_in_units for some option contracts).
  /// In these cases ContractMetadata values should be used.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ProcessingMetadata : pb::IMessage<ProcessingMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProcessingMetadata> _parser = new pb::MessageParser<ProcessingMetadata>(() => new ProcessingMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProcessingMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProcessingMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProcessingMetadata(ProcessingMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      currency_ = other.currency_;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      contractSizeInUnits_ = other.contractSizeInUnits_ != null ? other.contractSizeInUnits_.Clone() : null;
      contractSizeUnit_ = other.contractSizeUnit_ != null ? other.contractSizeUnit_.Clone() : null;
      currencyRateInstrumentGroupName_ = other.currencyRateInstrumentGroupName_;
      currencyHedgeInstrumentGroupName_ = other.currencyHedgeInstrumentGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProcessingMetadata Clone() {
      return new ProcessingMetadata(this);
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 1;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    /// <summary>
    /// Currency code (ISO 4217 based).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 2;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Size or a single market tick in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickSize {
      get { if ((_hasBits0 & 1) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 3;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Tick money value in corresponding currency. See ProcessingMetadata.currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickValue {
      get { if ((_hasBits0 & 2) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "contract_size_in_units" field.</summary>
    public const int ContractSizeInUnitsFieldNumber = 4;
    private global::Cqg.Decimal contractSizeInUnits_;
    /// <summary>
    /// Contract size in the number of units (where defined). Unit is defined by contract_size_unit field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal ContractSizeInUnits {
      get { return contractSizeInUnits_; }
      set {
        contractSizeInUnits_ = value;
      }
    }

    /// <summary>Field number for the "contract_size_unit" field.</summary>
    public const int ContractSizeUnitFieldNumber = 5;
    private global::Shared1.Text contractSizeUnit_;
    /// <summary>
    /// Unit label for the contract size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Shared1.Text ContractSizeUnit {
      get { return contractSizeUnit_; }
      set {
        contractSizeUnit_ = value;
      }
    }

    /// <summary>Field number for the "currency_rate_instrument_group_name" field.</summary>
    public const int CurrencyRateInstrumentGroupNameFieldNumber = 6;
    private readonly static string CurrencyRateInstrumentGroupNameDefaultValue = "";

    private string currencyRateInstrumentGroupName_;
    /// <summary>
    /// Security whose contracts should be used to fill PublishContract.currency_rate_contract_id.
    /// Use InstrumentGroupRequest to query contracts by group name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyRateInstrumentGroupName {
      get { return currencyRateInstrumentGroupName_ ?? CurrencyRateInstrumentGroupNameDefaultValue; }
      set {
        currencyRateInstrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency_rate_instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrencyRateInstrumentGroupName {
      get { return currencyRateInstrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "currency_rate_instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrencyRateInstrumentGroupName() {
      currencyRateInstrumentGroupName_ = null;
    }

    /// <summary>Field number for the "currency_hedge_instrument_group_name" field.</summary>
    public const int CurrencyHedgeInstrumentGroupNameFieldNumber = 7;
    private readonly static string CurrencyHedgeInstrumentGroupNameDefaultValue = "";

    private string currencyHedgeInstrumentGroupName_;
    /// <summary>
    /// Security whose contracts should be used to fill PublishContract.currency_hedge_contractd_id.
    /// Use InstrumentGroupRequest to query contracts by group name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyHedgeInstrumentGroupName {
      get { return currencyHedgeInstrumentGroupName_ ?? CurrencyHedgeInstrumentGroupNameDefaultValue; }
      set {
        currencyHedgeInstrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency_hedge_instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrencyHedgeInstrumentGroupName {
      get { return currencyHedgeInstrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "currency_hedge_instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrencyHedgeInstrumentGroupName() {
      currencyHedgeInstrumentGroupName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProcessingMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProcessingMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!object.Equals(ContractSizeInUnits, other.ContractSizeInUnits)) return false;
      if (!object.Equals(ContractSizeUnit, other.ContractSizeUnit)) return false;
      if (CurrencyRateInstrumentGroupName != other.CurrencyRateInstrumentGroupName) return false;
      if (CurrencyHedgeInstrumentGroupName != other.CurrencyHedgeInstrumentGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (contractSizeInUnits_ != null) hash ^= ContractSizeInUnits.GetHashCode();
      if (contractSizeUnit_ != null) hash ^= ContractSizeUnit.GetHashCode();
      if (HasCurrencyRateInstrumentGroupName) hash ^= CurrencyRateInstrumentGroupName.GetHashCode();
      if (HasCurrencyHedgeInstrumentGroupName) hash ^= CurrencyHedgeInstrumentGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCurrency) {
        output.WriteRawTag(10);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(17);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(25);
        output.WriteDouble(TickValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ContractSizeUnit);
      }
      if (HasCurrencyRateInstrumentGroupName) {
        output.WriteRawTag(50);
        output.WriteString(CurrencyRateInstrumentGroupName);
      }
      if (HasCurrencyHedgeInstrumentGroupName) {
        output.WriteRawTag(58);
        output.WriteString(CurrencyHedgeInstrumentGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCurrency) {
        output.WriteRawTag(10);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(17);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(25);
        output.WriteDouble(TickValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ContractSizeUnit);
      }
      if (HasCurrencyRateInstrumentGroupName) {
        output.WriteRawTag(50);
        output.WriteString(CurrencyRateInstrumentGroupName);
      }
      if (HasCurrencyHedgeInstrumentGroupName) {
        output.WriteRawTag(58);
        output.WriteString(CurrencyHedgeInstrumentGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (contractSizeInUnits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeUnit);
      }
      if (HasCurrencyRateInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyRateInstrumentGroupName);
      }
      if (HasCurrencyHedgeInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyHedgeInstrumentGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProcessingMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      if (other.contractSizeInUnits_ != null) {
        if (contractSizeInUnits_ == null) {
          ContractSizeInUnits = new global::Cqg.Decimal();
        }
        ContractSizeInUnits.MergeFrom(other.ContractSizeInUnits);
      }
      if (other.contractSizeUnit_ != null) {
        if (contractSizeUnit_ == null) {
          ContractSizeUnit = new global::Shared1.Text();
        }
        ContractSizeUnit.MergeFrom(other.ContractSizeUnit);
      }
      if (other.HasCurrencyRateInstrumentGroupName) {
        CurrencyRateInstrumentGroupName = other.CurrencyRateInstrumentGroupName;
      }
      if (other.HasCurrencyHedgeInstrumentGroupName) {
        CurrencyHedgeInstrumentGroupName = other.CurrencyHedgeInstrumentGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Currency = input.ReadString();
            break;
          }
          case 17: {
            TickSize = input.ReadDouble();
            break;
          }
          case 25: {
            TickValue = input.ReadDouble();
            break;
          }
          case 34: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 42: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 50: {
            CurrencyRateInstrumentGroupName = input.ReadString();
            break;
          }
          case 58: {
            CurrencyHedgeInstrumentGroupName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Currency = input.ReadString();
            break;
          }
          case 17: {
            TickSize = input.ReadDouble();
            break;
          }
          case 25: {
            TickValue = input.ReadDouble();
            break;
          }
          case 34: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 42: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 50: {
            CurrencyRateInstrumentGroupName = input.ReadString();
            break;
          }
          case 58: {
            CurrencyHedgeInstrumentGroupName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SecurityMetadata : pb::IMessage<SecurityMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SecurityMetadata> _parser = new pb::MessageParser<SecurityMetadata>(() => new SecurityMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SecurityMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SecurityMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SecurityMetadata(SecurityMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      securityId_ = other.securityId_;
      cfiCode_ = other.cfiCode_;
      currency_ = other.currency_;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      periodType_ = other.periodType_;
      periodValue_ = other.periodValue_;
      contractSizeInUnits_ = other.contractSizeInUnits_ != null ? other.contractSizeInUnits_.Clone() : null;
      contractSizeUnit_ = other.contractSizeUnit_ != null ? other.contractSizeUnit_.Clone() : null;
      contributorParameters_ = other.contributorParameters_.Clone();
      symbolId_ = other.symbolId_;
      sourceInstrumentGroupName_ = other.sourceInstrumentGroupName_;
      processingMetadata_ = other.processingMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SecurityMetadata Clone() {
      return new SecurityMetadata(this);
    }

    /// <summary>Field number for the "security_id" field.</summary>
    public const int SecurityIdFieldNumber = 1;
    private readonly static string SecurityIdDefaultValue = "";

    private string securityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityId {
      get { return securityId_ ?? SecurityIdDefaultValue; }
      set {
        securityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "security_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecurityId {
      get { return securityId_ != null; }
    }
    /// <summary>Clears the value of the "security_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecurityId() {
      securityId_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 2;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    /// <summary>
    /// Deprecated and should not be used. Use ProcessingMetadata.currency instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 4;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Deprecated and should not be used. Use ProcessingMetadata.tick_size instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickSize {
      get { if ((_hasBits0 & 1) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 5;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Deprecated and should not be used. Use ProcessingMetadata.tick_value instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TickValue {
      get { if ((_hasBits0 & 2) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "period_type" field.</summary>
    public const int PeriodTypeFieldNumber = 6;
    private readonly static uint PeriodTypeDefaultValue = 0;

    private uint periodType_;
    /// <summary>
    /// Deprecated and should not be used.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PeriodType {
      get { if ((_hasBits0 & 4) != 0) { return periodType_; } else { return PeriodTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        periodType_ = value;
      }
    }
    /// <summary>Gets whether the "period_type" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPeriodType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "period_type" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPeriodType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "period_value" field.</summary>
    public const int PeriodValueFieldNumber = 7;
    private readonly static uint PeriodValueDefaultValue = 0;

    private uint periodValue_;
    /// <summary>
    /// Deprecated and should not be used.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PeriodValue {
      get { if ((_hasBits0 & 8) != 0) { return periodValue_; } else { return PeriodValueDefaultValue; } }
      set {
        _hasBits0 |= 8;
        periodValue_ = value;
      }
    }
    /// <summary>Gets whether the "period_value" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPeriodValue {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "period_value" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPeriodValue() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "contract_size_in_units" field.</summary>
    public const int ContractSizeInUnitsFieldNumber = 8;
    private global::Cqg.Decimal contractSizeInUnits_;
    /// <summary>
    /// Deprecated and should not be used. Use ProcessingMetadata.contract_size_in_units instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal ContractSizeInUnits {
      get { return contractSizeInUnits_; }
      set {
        contractSizeInUnits_ = value;
      }
    }

    /// <summary>Field number for the "contract_size_unit" field.</summary>
    public const int ContractSizeUnitFieldNumber = 9;
    private global::Shared1.Text contractSizeUnit_;
    /// <summary>
    /// Deprecated and should not be used. Use ProcessingMetadata.contract_size_unit instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Shared1.Text ContractSizeUnit {
      get { return contractSizeUnit_; }
      set {
        contractSizeUnit_ = value;
      }
    }

    /// <summary>Field number for the "contributor_parameters" field.</summary>
    public const int ContributorParametersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::MetadataAdmin2.ContributorParameters> _repeated_contributorParameters_codec
        = pb::FieldCodec.ForMessage(82, global::MetadataAdmin2.ContributorParameters.Parser);
    private readonly pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> contributorParameters_ = new pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters>();
    /// <summary>
    /// Optional custom security parameters per associated OTC contributor (if any).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> ContributorParameters {
      get { return contributorParameters_; }
    }

    /// <summary>Field number for the "symbol_id" field.</summary>
    public const int SymbolIdFieldNumber = 11;
    private readonly static string SymbolIdDefaultValue = "";

    private string symbolId_;
    /// <summary>
    /// ID of the symbol the security represents (Symbol.id attribute).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SymbolId {
      get { return symbolId_ ?? SymbolIdDefaultValue; }
      set {
        symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbolId {
      get { return symbolId_ != null; }
    }
    /// <summary>Clears the value of the "symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbolId() {
      symbolId_ = null;
    }

    /// <summary>Field number for the "source_instrument_group_name" field.</summary>
    public const int SourceInstrumentGroupNameFieldNumber = 12;
    private readonly static string SourceInstrumentGroupNameDefaultValue = "";

    private string sourceInstrumentGroupName_;
    /// <summary>
    /// If this security represents a list of double-quoted contracts, the field contains identifier
    /// to request list of corresponding source instruments (see InstrumentGroupRequest).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SourceInstrumentGroupName {
      get { return sourceInstrumentGroupName_ ?? SourceInstrumentGroupNameDefaultValue; }
      set {
        sourceInstrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source_instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSourceInstrumentGroupName {
      get { return sourceInstrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "source_instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSourceInstrumentGroupName() {
      sourceInstrumentGroupName_ = null;
    }

    /// <summary>Field number for the "processing_metadata" field.</summary>
    public const int ProcessingMetadataFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.ProcessingMetadata> _repeated_processingMetadata_codec
        = pb::FieldCodec.ForMessage(106, global::SymbolBrowsing2.ProcessingMetadata.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.ProcessingMetadata> processingMetadata_ = new pbc::RepeatedField<global::SymbolBrowsing2.ProcessingMetadata>();
    /// <summary>
    /// Metadata used for real-time and trading data processing. 
    /// There might be different metadata properties for different contracts within the security.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SymbolBrowsing2.ProcessingMetadata> ProcessingMetadata {
      get { return processingMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SecurityMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SecurityMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecurityId != other.SecurityId) return false;
      if (CfiCode != other.CfiCode) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (PeriodType != other.PeriodType) return false;
      if (PeriodValue != other.PeriodValue) return false;
      if (!object.Equals(ContractSizeInUnits, other.ContractSizeInUnits)) return false;
      if (!object.Equals(ContractSizeUnit, other.ContractSizeUnit)) return false;
      if(!contributorParameters_.Equals(other.contributorParameters_)) return false;
      if (SymbolId != other.SymbolId) return false;
      if (SourceInstrumentGroupName != other.SourceInstrumentGroupName) return false;
      if(!processingMetadata_.Equals(other.processingMetadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSecurityId) hash ^= SecurityId.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (HasPeriodType) hash ^= PeriodType.GetHashCode();
      if (HasPeriodValue) hash ^= PeriodValue.GetHashCode();
      if (contractSizeInUnits_ != null) hash ^= ContractSizeInUnits.GetHashCode();
      if (contractSizeUnit_ != null) hash ^= ContractSizeUnit.GetHashCode();
      hash ^= contributorParameters_.GetHashCode();
      if (HasSymbolId) hash ^= SymbolId.GetHashCode();
      if (HasSourceInstrumentGroupName) hash ^= SourceInstrumentGroupName.GetHashCode();
      hash ^= processingMetadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSecurityId) {
        output.WriteRawTag(10);
        output.WriteString(SecurityId);
      }
      if (HasCfiCode) {
        output.WriteRawTag(18);
        output.WriteString(CfiCode);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(33);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(41);
        output.WriteDouble(TickValue);
      }
      if (HasPeriodType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ContractSizeUnit);
      }
      contributorParameters_.WriteTo(output, _repeated_contributorParameters_codec);
      if (HasSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(SymbolId);
      }
      if (HasSourceInstrumentGroupName) {
        output.WriteRawTag(98);
        output.WriteString(SourceInstrumentGroupName);
      }
      processingMetadata_.WriteTo(output, _repeated_processingMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSecurityId) {
        output.WriteRawTag(10);
        output.WriteString(SecurityId);
      }
      if (HasCfiCode) {
        output.WriteRawTag(18);
        output.WriteString(CfiCode);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(33);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(41);
        output.WriteDouble(TickValue);
      }
      if (HasPeriodType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ContractSizeUnit);
      }
      contributorParameters_.WriteTo(ref output, _repeated_contributorParameters_codec);
      if (HasSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(SymbolId);
      }
      if (HasSourceInstrumentGroupName) {
        output.WriteRawTag(98);
        output.WriteString(SourceInstrumentGroupName);
      }
      processingMetadata_.WriteTo(ref output, _repeated_processingMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityId);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (HasPeriodType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodType);
      }
      if (HasPeriodValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeUnit);
      }
      size += contributorParameters_.CalculateSize(_repeated_contributorParameters_codec);
      if (HasSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
      }
      if (HasSourceInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceInstrumentGroupName);
      }
      size += processingMetadata_.CalculateSize(_repeated_processingMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SecurityMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasSecurityId) {
        SecurityId = other.SecurityId;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      if (other.HasPeriodType) {
        PeriodType = other.PeriodType;
      }
      if (other.HasPeriodValue) {
        PeriodValue = other.PeriodValue;
      }
      if (other.contractSizeInUnits_ != null) {
        if (contractSizeInUnits_ == null) {
          ContractSizeInUnits = new global::Cqg.Decimal();
        }
        ContractSizeInUnits.MergeFrom(other.ContractSizeInUnits);
      }
      if (other.contractSizeUnit_ != null) {
        if (contractSizeUnit_ == null) {
          ContractSizeUnit = new global::Shared1.Text();
        }
        ContractSizeUnit.MergeFrom(other.ContractSizeUnit);
      }
      contributorParameters_.Add(other.contributorParameters_);
      if (other.HasSymbolId) {
        SymbolId = other.SymbolId;
      }
      if (other.HasSourceInstrumentGroupName) {
        SourceInstrumentGroupName = other.SourceInstrumentGroupName;
      }
      processingMetadata_.Add(other.processingMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SecurityId = input.ReadString();
            break;
          }
          case 18: {
            CfiCode = input.ReadString();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            TickSize = input.ReadDouble();
            break;
          }
          case 41: {
            TickValue = input.ReadDouble();
            break;
          }
          case 48: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 56: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 66: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 74: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 82: {
            contributorParameters_.AddEntriesFrom(input, _repeated_contributorParameters_codec);
            break;
          }
          case 90: {
            SymbolId = input.ReadString();
            break;
          }
          case 98: {
            SourceInstrumentGroupName = input.ReadString();
            break;
          }
          case 106: {
            processingMetadata_.AddEntriesFrom(input, _repeated_processingMetadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SecurityId = input.ReadString();
            break;
          }
          case 18: {
            CfiCode = input.ReadString();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            TickSize = input.ReadDouble();
            break;
          }
          case 41: {
            TickValue = input.ReadDouble();
            break;
          }
          case 48: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 56: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 66: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 74: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 82: {
            contributorParameters_.AddEntriesFrom(ref input, _repeated_contributorParameters_codec);
            break;
          }
          case 90: {
            SymbolId = input.ReadString();
            break;
          }
          case 98: {
            SourceInstrumentGroupName = input.ReadString();
            break;
          }
          case 106: {
            processingMetadata_.AddEntriesFrom(ref input, _repeated_processingMetadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a list of product symbols matching a search criteria (see Symbol.product_metadata).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ProductSearchRequest : pb::IMessage<ProductSearchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProductSearchRequest> _parser = new pb::MessageParser<ProductSearchRequest>(() => new ProductSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProductSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchRequest(ProductSearchRequest other) : this() {
      _hasBits0 = other._hasBits0;
      searchTerm_ = other.searchTerm_;
      categoryIds_ = other.categoryIds_.Clone();
      reserved1_ = other.reserved1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchRequest Clone() {
      return new ProductSearchRequest(this);
    }

    /// <summary>Field number for the "search_term" field.</summary>
    public const int SearchTermFieldNumber = 1;
    private readonly static string SearchTermDefaultValue = "";

    private string searchTerm_;
    /// <summary>
    /// Term to search matched product symbols on.
    /// Search term needs to be filled and its length must be greater than 3 (by default) if category_id filter is empty.
    /// Searching is done on the text associated to the being searched product symbols.
    /// Matching is supported only by "starts with" pattern.
    /// Multi-word input (whitespace delimited) is applied by "or".
    /// I.e. it matches a symbol if any word from the search term matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SearchTerm {
      get { return searchTerm_ ?? SearchTermDefaultValue; }
      set {
        searchTerm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "search_term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchTerm {
      get { return searchTerm_ != null; }
    }
    /// <summary>Clears the value of the "search_term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchTerm() {
      searchTerm_ = null;
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional category filter controlling how multiple symbol categories are applied in the filter.
    /// Categories within the same tree (having the same root) are applied by "OR" in the category filter
    /// (e.g. two exchanges, either matches). Otherwise categories are applied by "AND" (e.g. exchange and asset).
    /// See SymbolCategory and SymbolCategoryListRequest messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    /// <summary>Field number for the "reserved1" field.</summary>
    public const int Reserved1FieldNumber = 3;
    private readonly static bool Reserved1DefaultValue = false;

    private bool reserved1_;
    /// <summary>
    /// Reserved field number (do not reuse).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Reserved1 {
      get { if ((_hasBits0 & 1) != 0) { return reserved1_; } else { return Reserved1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        reserved1_ = value;
      }
    }
    /// <summary>Gets whether the "reserved1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReserved1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reserved1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReserved1() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProductSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProductSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchTerm != other.SearchTerm) return false;
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      if (Reserved1 != other.Reserved1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSearchTerm) hash ^= SearchTerm.GetHashCode();
      hash ^= categoryIds_.GetHashCode();
      if (HasReserved1) hash ^= Reserved1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSearchTerm) {
        output.WriteRawTag(10);
        output.WriteString(SearchTerm);
      }
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (HasReserved1) {
        output.WriteRawTag(24);
        output.WriteBool(Reserved1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSearchTerm) {
        output.WriteRawTag(10);
        output.WriteString(SearchTerm);
      }
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (HasReserved1) {
        output.WriteRawTag(24);
        output.WriteBool(Reserved1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSearchTerm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchTerm);
      }
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (HasReserved1) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProductSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSearchTerm) {
        SearchTerm = other.SearchTerm;
      }
      categoryIds_.Add(other.categoryIds_);
      if (other.HasReserved1) {
        Reserved1 = other.Reserved1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SearchTerm = input.ReadString();
            break;
          }
          case 18: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
          case 24: {
            Reserved1 = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SearchTerm = input.ReadString();
            break;
          }
          case 18: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
          case 24: {
            Reserved1 = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of found product symbols.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ProductSearchReport : pb::IMessage<ProductSearchReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProductSearchReport> _parser = new pb::MessageParser<ProductSearchReport>(() => new ProductSearchReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProductSearchReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchReport(ProductSearchReport other) : this() {
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductSearchReport Clone() {
      return new ProductSearchReport(this);
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.Symbol.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.Symbol> symbols_ = new pbc::RepeatedField<global::SymbolBrowsing2.Symbol>();
    /// <summary>
    /// List of product symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SymbolBrowsing2.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProductSearchReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProductSearchReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProductSearchReport other) {
      if (other == null) {
        return;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
