// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/order_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Order2 {

  /// <summary>Holder for reflection information generated from WebAPI/order_2.proto</summary>
  public static partial class Order2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/order_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Order2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRXZWJBUEkvb3JkZXJfMi5wcm90bxIHb3JkZXJfMhoXV2ViQVBJL21ldGFk",
            "YXRhXzIucHJvdG8aF1dlYkFQSS9zdHJhdGVneV8yLnByb3RvGh1XZWJBUEkv",
            "dXNlcl9hdHRyaWJ1dGVfMi5wcm90bxoUY29tbW9uL2RlY2ltYWwucHJvdG8a",
            "FWNvbW1vbi9zaGFyZWRfMS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVz",
            "dGFtcC5wcm90byJ4ChJPcmRlclJlcXVlc3RSZWplY3QSEgoKcmVxdWVzdF9p",
            "ZBgBIAIoDRITCgtyZWplY3RfY29kZRgCIAIoDRIYCgx0ZXh0X21lc3NhZ2UY",
            "AyABKAlCAhgBEh8KB2RldGFpbHMYBCABKAsyDi5zaGFyZWRfMS5UZXh0IsgN",
            "CgtPcmRlclN0YXR1cxIYChBzdWJzY3JpcHRpb25faWRzGAEgAygNEhMKC2lz",
            "X3NuYXBzaG90GAIgASgIEg4KBnN0YXR1cxgDIAIoDRIQCghvcmRlcl9pZBgE",
            "IAIoCRIWCg5jaGFpbl9vcmRlcl9pZBgFIAIoCRIVCg1leGVjX29yZGVyX2lk",
            "GAYgASgJEh0KFWRldGFpbGVkX2RvbV9vcmRlcl9pZBgkIAEoCRIbCg9zdGF0",
            "dXNfdXRjX3RpbWUYByABKBJCAhgBEjgKFHN0YXR1c191dGNfdGltZXN0YW1w",
            "GBggAigLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIfChNzdWJtaXNz",
            "aW9uX3V0Y190aW1lGAggASgSQgIYARI8ChhzdWJtaXNzaW9uX3V0Y190aW1l",
            "c3RhbXAYGSACKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhsKD3Vp",
            "bnQzMl9maWxsX3F0eRgJIAEoDUICGAESHgoIZmlsbF9xdHkYHCABKAsyDC5j",
            "cWcuRGVjaW1hbBIQCghmaWxsX2NudBgKIAIoDRIdChVzY2FsZWRfYXZnX2Zp",
            "bGxfcHJpY2UYCyACKBISHgoWYXZnX2ZpbGxfcHJpY2VfY29ycmVjdBgbIAIo",
            "ARIeChJhY3RpdmVfYXRfdXRjX3RpbWUYDCABKBJCAhgBEjsKF2FjdGl2ZV9h",
            "dF91dGNfdGltZXN0YW1wGBogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIgChR1aW50MzJfcmVtYWluaW5nX3F0eRgNIAEoDUICGAESIwoNcmVt",
            "YWluaW5nX3F0eRgdIAEoCzIMLmNxZy5EZWNpbWFsEh0KBW9yZGVyGA4gASgL",
            "Mg4ub3JkZXJfMi5PcmRlchI4ChR0cmFuc2FjdGlvbl9zdGF0dXNlcxgPIAMo",
            "CzIaLm9yZGVyXzIuVHJhbnNhY3Rpb25TdGF0dXMSOAoUcmVqZWN0X3V0Y190",
            "aW1lc3RhbXAYHiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhYK",
            "DnJlamVjdF9tZXNzYWdlGB8gASgJEjgKFGNhbmNlbF91dGNfdGltZXN0YW1w",
            "GCAgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI2ChJmaWxsX3V0",
            "Y190aW1lc3RhbXAYISABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EiYKGmhhc19maWxsX3dpdGhfbW9kaWZpZWRfcXR5GCIgASgIQgIYARIoChxo",
            "YXNfZmlsbF93aXRoX21vZGlmaWVkX3ByaWNlGCMgASgIQgIYARIXCg9lbnRl",
            "cmVkX2J5X3VzZXIYECACKAkSHAoUZmlyc3Rfc3RhdGVtZW50X2RhdGUYESAC",
            "KBISGwoTbGFzdF9zdGF0ZW1lbnRfZGF0ZRgSIAEoEhI3ChFjb250cmFjdF9t",
            "ZXRhZGF0YRgTIAMoCzIcLm1ldGFkYXRhXzIuQ29udHJhY3RNZXRhZGF0YRIS",
            "CgphY2NvdW50X2lkGBQgAigREkEKGGNvbXBvdW5kX29yZGVyX3N0cnVjdHVy",
            "ZRgVIAEoCzIfLm9yZGVyXzIuQ29tcG91bmRPcmRlclN0cnVjdHVyZRISCgpo",
            "YW5nX2NvdW50GBYgASgNEkQKE3N0cmF0ZWd5X3Byb3BlcnRpZXMYFyABKAsy",
            "Jy5zdHJhdGVneV8yLlN5bnRoZXRpY1N0cmF0ZWd5UHJvcGVydGllcxIcChRj",
            "cm9zc190cmFuc2FjdGlvbl9pZBglIAEoCRI3ChlleGNoYW5nZV9leHRyYV9h",
            "dHRyaWJ1dGVzGCYgAygLMhQuc2hhcmVkXzEuTmFtZWRWYWx1ZRIsCg9maWxs",
            "X2NvbW1pc3Npb24YJyABKAsyEy5vcmRlcl8yLkNvbW1pc3Npb24SGQoRcm91",
            "dGVfY2xfb3JkZXJfaWQYKCABKAkSIAoYbWlmaWRfZXhlY3V0aW9uX2RlY2lz",
            "aW9uGCkgASgJEigKIG1pZmlkX2V4ZWN1dGlvbl9kZWNpc2lvbl9pc19hbGdv",
            "GCogASgIEiEKGW1pZmlkX2ludmVzdG1lbnRfZGVjaXNpb24YKyABKAkSKQoh",
            "bWlmaWRfaW52ZXN0bWVudF9kZWNpc2lvbl9pc19hbGdvGCwgASgIEhoKEnNl",
            "bmRlcl9sb2NhdGlvbl9pZBgtIAEoCRIaChJzZW5kZXJfb3BlcmF0b3JfaWQY",
            "LiABKAkSEwoLb3BlcmF0b3JfaWQYLyABKAkizhEKEVRyYW5zYWN0aW9uU3Rh",
            "dHVzEg4KBnN0YXR1cxgBIAIoDRIQCgh0cmFuc19pZBgCIAIoBBIaCg50cmFu",
            "c191dGNfdGltZRgDIAEoEkICGAESNwoTdHJhbnNfdXRjX3RpbWVzdGFtcBgo",
            "IAIoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFAoMcmVmX3RyYW5z",
            "X2lkGAQgASgEEhgKEG9yaWdfY2xfb3JkZXJfaWQYBSABKAkSEwoLY2xfb3Jk",
            "ZXJfaWQYBiACKAkSGwoPdWludDMyX2ZpbGxfcXR5GAcgASgNQgIYARIeCghm",
            "aWxsX3F0eRg0IAEoCzIMLmNxZy5EZWNpbWFsEhkKEXNjYWxlZF9maWxsX3By",
            "aWNlGAggASgSEh4KBnRyYWRlcxgJIAMoCzIOLm9yZGVyXzIuVHJhZGUSNwoS",
            "c3RyYXRlZ3lfbGVnX2ZpbGxzGCYgAygLMhsuc3RyYXRlZ3lfMi5TdHJhdGVn",
            "eUxlZ0ZpbGwSMQoOc3ludGhldGljX2hhbmcYJyABKAsyGS5zdHJhdGVneV8y",
            "LlN5bnRoZXRpY0hhbmcSIQoVdWludDMyX3ByZXZfb3JkZXJfcXR5GAogASgN",
            "QgIYARIkCg5wcmV2X29yZGVyX3F0eRg1IAEoCzIMLmNxZy5EZWNpbWFsEhwK",
            "EHVpbnQzMl9vcmRlcl9xdHkYCyABKA1CAhgBEh8KCW9yZGVyX3F0eRg2IAEo",
            "CzIMLmNxZy5EZWNpbWFsEh8KF3NjYWxlZF9wcmV2X2xpbWl0X3ByaWNlGAwg",
            "ASgSEhoKEnNjYWxlZF9saW1pdF9wcmljZRgNIAEoEhIeChZzY2FsZWRfcHJl",
            "dl9zdG9wX3ByaWNlGA4gASgSEhkKEXNjYWxlZF9zdG9wX3ByaWNlGA8gASgS",
            "EiMKF3VpbnQzMl9wcmV2X3Zpc2libGVfcXR5GBAgASgNQgIYARImChBwcmV2",
            "X3Zpc2libGVfcXR5GDcgASgLMgwuY3FnLkRlY2ltYWwSHgoSdWludDMyX3Zp",
            "c2libGVfcXR5GBEgASgNQgIYARIhCgt2aXNpYmxlX3F0eRg4IAEoCzIMLmNx",
            "Zy5EZWNpbWFsEicKG3VpbnQzMl9wcmV2X21pbl92aXNpYmxlX3F0eRgSIAEo",
            "DUICGAESKgoUcHJldl9taW5fdmlzaWJsZV9xdHkYOSABKAsyDC5jcWcuRGVj",
            "aW1hbBIiChZ1aW50MzJfbWluX3Zpc2libGVfcXR5GBMgASgNQgIYARIlCg9t",
            "aW5fdmlzaWJsZV9xdHkYOiABKAsyDC5jcWcuRGVjaW1hbBIgChR1aW50MzJf",
            "cHJldl9maWxsX3F0eRgUIAEoDUICGAESIwoNcHJldl9maWxsX3F0eRg7IAEo",
            "CzIMLmNxZy5EZWNpbWFsEh4KFnNjYWxlZF9wcmV2X2ZpbGxfcHJpY2UYFSAB",
            "KBISFwoPcHJldl9vcmRlcl90eXBlGBYgASgNEhIKCm9yZGVyX3R5cGUYFyAB",
            "KA0SHgoWcHJldl9leGVjX2luc3RydWN0aW9ucxgYIAMoDRIZChFleGVjX2lu",
            "c3RydWN0aW9ucxgZIAMoDRIVCg1wcmV2X2R1cmF0aW9uGBogASgNEhAKCGR1",
            "cmF0aW9uGBsgASgNEhsKE3ByZXZfZ29vZF90aHJ1X2RhdGUYHCABKBISFgoO",
            "Z29vZF90aHJ1X2RhdGUYHSABKBISEwoLcmVqZWN0X2NvZGUYHiABKA0SGQoR",
            "ZmlsbF9jb3VudGVycGFydHkYHyABKAkSGQoRcm91dGVfY2xfb3JkZXJfaWQY",
            "ICABKAkSFAoMdGV4dF9tZXNzYWdlGCEgASgJEiMKF3ByZXZfZ29vZF90aHJ1",
            "X3V0Y190aW1lGCIgASgSQgIYARJAChxwcmV2X2dvb2RfdGhydV91dGNfdGlt",
            "ZXN0YW1wGCkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIeChJn",
            "b29kX3RocnVfdXRjX3RpbWUYIyABKBJCAhgBEjsKF2dvb2RfdGhydV91dGNf",
            "dGltZXN0YW1wGCogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIV",
            "Cg1pc19hZ2dyZXNzaXZlGEAgASgIEiYKHmNsaWVudF9yZWd1bGF0b3J5X2Fs",
            "Z29yaXRobV9pZBgkIAEoDRIpCiFlZmZlY3RpdmVfcmVndWxhdG9yeV9hbGdv",
            "cml0aG1faWQYJSABKA0SGgoSbWlmaWRfYWxnb3JpdGhtX2lkGCsgASgJEh8K",
            "F21pZmlkX2FsZ29yaXRobV9pZF90eXBlGCwgASgNEiIKGm1pZmlkX2FwcGxp",
            "ZWRfYWxnb3JpdGhtX2lkGC0gASgJEicKH21pZmlkX2FwcGxpZWRfYWxnb3Jp",
            "dGhtX2lkX3R5cGUYLiABKA0SIAoYbWlmaWRfZXhlY3V0aW9uX2RlY2lzaW9u",
            "GC8gASgJEigKIG1pZmlkX2V4ZWN1dGlvbl9kZWNpc2lvbl9pc19hbGdvGEMg",
            "ASgIEhkKEW9wZW5fY2xvc2VfZWZmZWN0GDAgASgNEhgKEHNwZWN1bGF0aW9u",
            "X3R5cGUYMSABKA0SLgoib2Jzb2xldGVfcHJldl9kaXNjcmV0aW9uYXJ5X29m",
            "ZnNldBgyIAEoDUICGAESKQodb2Jzb2xldGVfZGlzY3JldGlvbmFyeV9vZmZz",
            "ZXQYMyABKA1CAhgBEiwKD2ZpbGxfY29tbWlzc2lvbhg8IAEoCzITLm9yZGVy",
            "XzIuQ29tbWlzc2lvbhIhChltaWZpZF9pbnZlc3RtZW50X2RlY2lzaW9uGD0g",
            "ASgJEikKIW1pZmlkX2ludmVzdG1lbnRfZGVjaXNpb25faXNfYWxnbxg+IAEo",
            "CBIdChVleGVjdXRpb25fc291cmNlX2NvZGUYPyABKAkSFAoMaXNfYXV0b21h",
            "dGVkGEEgASgIEhYKDnRyYWRlX21hdGNoX2lkGEIgASgJItUDCgVUcmFkZRIQ",
            "Cgh0cmFkZV9pZBgBIAIoCRITCgtjb250cmFjdF9pZBgCIAIoDRIWCg5zdGF0",
            "ZW1lbnRfZGF0ZRgDIAIoEhIaCg50cmFkZV91dGNfdGltZRgEIAEoEkICGAES",
            "NwoTdHJhZGVfdXRjX3RpbWVzdGFtcBgMIAIoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASEgoKdHJhZGVfZGF0ZRgFIAIoEhIUCgxzY2FsZWRfcHJp",
            "Y2UYBiACKBISFQoNcHJpY2VfY29ycmVjdBgNIAIoARIMCgRzaWRlGAcgAigN",
            "EhYKCnVpbnQzMl9xdHkYCCABKA1CAhgBEhkKA3F0eRgQIAEoCzIMLmNxZy5E",
            "ZWNpbWFsEhoKEnRyYWRlX2NvdW50ZXJwYXJ0eRgJIAEoCRIVCg1pc19hZ2dy",
            "ZXNzaXZlGAogASgIEhgKEGxlZ19leGVjdXRpb25faWQYCyABKAkSGQoRb3Bl",
            "bl9jbG9zZV9lZmZlY3QYDiABKA0SGAoQc3BlY3VsYXRpb25fdHlwZRgPIAEo",
            "DRIWCg50cmFkZV9tYXRjaF9pZBgRIAEoCRIcChRzcGVjaWZpY19jb250cmFj",
            "dF9pZBgSIAEoDSI9CgpDb21taXNzaW9uEhsKE2NvbW1pc3Npb25fY3VycmVu",
            "Y3kYASACKAkSEgoKY29tbWlzc2lvbhgCIAIoASLLAQoWQ29tcG91bmRPcmRl",
            "clN0cnVjdHVyZRIMCgR0eXBlGAEgAigNEhYKDmNsX2NvbXBvdW5kX2lkGAIg",
            "AigJEkQKFmNvbXBvdW5kX29yZGVyX2VudHJpZXMYAyADKAsyJC5vcmRlcl8y",
            "LkNvbXBvdW5kT3JkZXJTdHJ1Y3R1cmVFbnRyeRIVCg1wcm9maXRfb2Zmc2V0",
            "GAQgASgREhMKC2xvc3Nfb2Zmc2V0GAUgASgREhkKEXN0b3BfbGltaXRfb2Zm",
            "c2V0GAYgASgRIngKG0NvbXBvdW5kT3JkZXJTdHJ1Y3R1cmVFbnRyeRIWCg5j",
            "aGFpbl9vcmRlcl9pZBgBIAEoCRJBChhjb21wb3VuZF9vcmRlcl9zdHJ1Y3R1",
            "cmUYAiABKAsyHy5vcmRlcl8yLkNvbXBvdW5kT3JkZXJTdHJ1Y3R1cmUi2hIK",
            "BU9yZGVyEhIKCmFjY291bnRfaWQYASACKBESGQoNd2hlbl91dGNfdGltZRgC",
            "IAEoEkICGAESNgoSd2hlbl91dGNfdGltZXN0YW1wGBsgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBITCgtjb250cmFjdF9pZBgDIAIoDRITCgtj",
            "bF9vcmRlcl9pZBgEIAIoCRISCgpvcmRlcl90eXBlGAUgAigNEhkKEWV4ZWNf",
            "aW5zdHJ1Y3Rpb25zGAYgAygNEhAKCGR1cmF0aW9uGAcgAigNEhYKDmdvb2Rf",
            "dGhydV9kYXRlGAggASgSEgwKBHNpZGUYCSABKA0SGgoSc2NhbGVkX2xpbWl0",
            "X3ByaWNlGAogASgSEhkKEXNjYWxlZF9zdG9wX3ByaWNlGAsgASgSEhYKCnVp",
            "bnQzMl9xdHkYDCABKA1CAhgBEh4KEnVpbnQzMl92aXNpYmxlX3F0eRgNIAEo",
            "DUICGAESIgoWdWludDMyX21pbl92aXNpYmxlX3F0eRgOIAEoDUICGAESGQoD",
            "cXR5GCIgASgLMgwuY3FnLkRlY2ltYWwSIQoLdmlzaWJsZV9xdHkYIyABKAsy",
            "DC5jcWcuRGVjaW1hbBIlCg9taW5fdmlzaWJsZV9xdHkYJCABKAsyDC5jcWcu",
            "RGVjaW1hbBIVCglpc19tYW51YWwYDyABKAhCAhgBEhQKCGlzX2Nsb3NlGBAg",
            "ASgIQgIYARIVCg1pc19hZ2dyZXNzaXZlGBEgASgIEhsKE3NjYWxlZF90cmFp",
            "bF9vZmZzZXQYEiABKBESFAoMdHJhaWxpbmdfcGVnGBMgASgNEh4KEnVpbnQz",
            "Ml90cmlnZ2VyX3F0eRgUIAEoDUICGAESIQoLdHJpZ2dlcl9xdHkYJSABKAsy",
            "DC5jcWcuRGVjaW1hbBIfChNhY3RpdmF0aW9uX3V0Y190aW1lGBUgASgSQgIY",
            "ARI8ChhhY3RpdmF0aW9uX3V0Y190aW1lc3RhbXAYHCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEh8KE3N1c3BlbnNpb25fdXRjX3RpbWUYFiAB",
            "KBJCAhgBEjwKGHN1c3BlbnNpb25fdXRjX3RpbWVzdGFtcBgdIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOAoPdXNlcl9hdHRyaWJ1dGVzGBcg",
            "AygLMh8udXNlcl9hdHRyaWJ1dGVfMi5Vc2VyQXR0cmlidXRlEi4KEGV4dHJh",
            "X2F0dHJpYnV0ZXMYJiADKAsyFC5zaGFyZWRfMS5OYW1lZFZhbHVlEhUKDWFs",
            "Z29fc3RyYXRlZ3kYJyABKAkSHgoSZ29vZF90aHJ1X3V0Y190aW1lGBggASgS",
            "QgIYARI7Chdnb29kX3RocnVfdXRjX3RpbWVzdGFtcBgeIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASJwoZaXNfdXNlcl9hdHRyaWJ1dGVfY2hl",
            "Y2tlZBgZIAEoCDoEdHJ1ZRJKChtzdHJhdGVneV90cmFkaW5nX3BhcmFtZXRl",
            "cnMYGiABKAsyJS5zdHJhdGVneV8yLlN0cmF0ZWd5VHJhZGluZ1BhcmFtZXRl",
            "cnMSHgoWb3Blbl9jbG9zZV9pbnN0cnVjdGlvbhgfIAEoDRIYChBzcGVjdWxh",
            "dGlvbl90eXBlGCAgASgNEikKHW9ic29sZXRlX2Rpc2NyZXRpb25hcnlfb2Zm",
            "c2V0GCEgASgNQgIYARIWCg5jb250cmlidXRvcl9pZBgoIAEoCRIdChVleGVj",
            "dXRpb25fc291cmNlX2NvZGUYKSABKAkSPQoWY3Jvc3Nfb3JkZXJfcGFyYW1l",
            "dGVycxgqIAEoCzIdLm9yZGVyXzIuQ3Jvc3NPcmRlclBhcmFtZXRlcnMSHwoX",
            "ZXh0ZXJuYWxfYWNjb3VudF9udW1iZXIYKyABKAkiIwoEU2lkZRIMCghTSURF",
            "X0JVWRABEg0KCVNJREVfU0VMTBACInEKCU9yZGVyVHlwZRISCg5PUkRFUl9U",
            "WVBFX01LVBABEhIKDk9SREVSX1RZUEVfTE1UEAISEgoOT1JERVJfVFlQRV9T",
            "VFAQAxISCg5PUkRFUl9UWVBFX1NUTBAEEhQKEE9SREVSX1RZUEVfQ1JPU1MQ",
            "BSLrAgoPRXhlY0luc3RydWN0aW9uEhgKFEVYRUNfSU5TVFJVQ1RJT05fQU9O",
            "EAESHAoYRVhFQ19JTlNUUlVDVElPTl9JQ0VCRVJHEAISFwoTRVhFQ19JTlNU",
            "UlVDVElPTl9RVBADEhoKFkVYRUNfSU5TVFJVQ1RJT05fVFJBSUwQBBIbChdF",
            "WEVDX0lOU1RSVUNUSU9OX0ZVTkFSSRAFEhgKFEVYRUNfSU5TVFJVQ1RJT05f",
            "TUlUEAYSGAoURVhFQ19JTlNUUlVDVElPTl9NTE0QBxIdChlFWEVDX0lOU1RS",
            "VUNUSU9OX1BPU1RPTkxZEAgSKAokT0JTT0xFVEVfRVhFQ19JTlNUUlVDVElP",
            "Tl9ESVNDUkVUSU9OEAkSGAoURVhFQ19JTlNUUlVDVElPTl9NVEwQChIcChhF",
            "WEVDX0lOU1RSVUNUSU9OX0FVQ1RJT04QCxIZChVFWEVDX0lOU1RSVUNUSU9O",
            "X05PTkUQDCKsAQoIRHVyYXRpb24SEAoMRFVSQVRJT05fREFZEAESEAoMRFVS",
            "QVRJT05fR1RDEAISEAoMRFVSQVRJT05fR1REEAMSEAoMRFVSQVRJT05fR1RU",
            "EAQSEAoMRFVSQVRJT05fRkFLEAUSEAoMRFVSQVRJT05fRk9LEAYSEAoMRFVS",
            "QVRJT05fQVRPEAcSEAoMRFVSQVRJT05fQVRDEAgSEAoMRFVSQVRJT05fR0ZB",
            "EAkiXQoLVHJhaWxpbmdQZWcSGAoUVFJBSUxJTkdfUEVHX0JFU1RCSUQQARIY",
            "ChRUUkFJTElOR19QRUdfQkVTVEFTSxACEhoKFlRSQUlMSU5HX1BFR19MQVNU",
            "VFJBREUQAyKFAQoUT3BlbkNsb3NlSW5zdHJ1Y3Rpb24SHwobT1BFTl9DTE9T",
            "RV9JTlNUUlVDVElPTl9PUEVOEAESIAocT1BFTl9DTE9TRV9JTlNUUlVDVElP",
            "Tl9DTE9TRRACEioKJk9QRU5fQ0xPU0VfSU5TVFJVQ1RJT05fQ0xPU0VfWUVT",
            "VEVSREFZEAMi9ggKDE9yZGVyUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgAigN",
            "EiQKCW5ld19vcmRlchgCIAEoCzIRLm9yZGVyXzIuTmV3T3JkZXISKgoMbW9k",
            "aWZ5X29yZGVyGAMgASgLMhQub3JkZXJfMi5Nb2RpZnlPcmRlchIqCgxjYW5j",
            "ZWxfb3JkZXIYBCABKAsyFC5vcmRlcl8yLkNhbmNlbE9yZGVyEjMKEWNhbmNl",
            "bF9hbGxfb3JkZXJzGA4gASgLMhgub3JkZXJfMi5DYW5jZWxBbGxPcmRlcnMS",
            "LAoNbGlxdWlkYXRlX2FsbBgUIAEoCzIVLm9yZGVyXzIuTGlxdWlkYXRlQWxs",
            "EiAKB2dvX2ZsYXQYFSABKAsyDy5vcmRlcl8yLkdvRmxhdBIsCg1zdXNwZW5k",
            "X29yZGVyGAogASgLMhUub3JkZXJfMi5TdXNwZW5kT3JkZXISLgoOYWN0aXZh",
            "dGVfb3JkZXIYBSABKAsyFi5vcmRlcl8yLkFjdGl2YXRlT3JkZXISRgoWbW9k",
            "aWZ5X3VzZXJfYXR0cmlidXRlcxgGIAEoCzImLnVzZXJfYXR0cmlidXRlXzIu",
            "TW9kaWZ5VXNlckF0dHJpYnV0ZXMSNQoSbmV3X2NvbXBvdW5kX29yZGVyGAgg",
            "ASgLMhkub3JkZXJfMi5OZXdDb21wb3VuZE9yZGVyEjsKE3N5bnRoZXRpY19s",
            "aXF1aWRhdGUYCyABKAsyHi5zdHJhdGVneV8yLlN5bnRoZXRpY0xpcXVpZGF0",
            "ZRI3ChFzeW50aGV0aWNfc2NyYXRjaBgMIAEoCzIcLnN0cmF0ZWd5XzIuU3lu",
            "dGhldGljU2NyYXRjaBInCglnb19tYXJrZXQYDSABKAsyFC5zdHJhdGVneV8y",
            "LkdvTWFya2V0EiwKDWFwcHJvdmVfb3JkZXIYFiABKAsyFS5vcmRlcl8yLkFw",
            "cHJvdmVPcmRlchIZChFvbl9iZWhhbGZfb2ZfdXNlchgHIAEoCRImCh5jbGll",
            "bnRfcmVndWxhdG9yeV9hbGdvcml0aG1faWQYCSABKA0SGgoSbWlmaWRfYWxn",
            "b3JpdGhtX2lkGA8gASgJEh8KF21pZmlkX2FsZ29yaXRobV9pZF90eXBlGBAg",
            "ASgNEjcKKG92ZXJyaWRlX2V4ZWN1dGlvbl93aXRoaW5fZmlybV93aXRoX25v",
            "cmUYESABKAg6BWZhbHNlEiQKHG1pZmlkX2ludmVzdG1lbnRfZGVjaXNpb25f",
            "aWQYEiABKAkSKQohbWlmaWRfaW52ZXN0bWVudF9kZWNpc2lvbl9pZF90eXBl",
            "GBMgASgNEiMKG21pZmlkX2V4ZWN1dGlvbl9kZWNpc2lvbl9pZBgYIAEoCRIo",
            "CiBtaWZpZF9leGVjdXRpb25fZGVjaXNpb25faWRfdHlwZRgZIAEoDRIUCgxp",
            "c19hdXRvbWF0ZWQYFyABKAgSGgoSc2VuZGVyX2xvY2F0aW9uX2lkGBogASgJ",
            "EhoKEnNlbmRlcl9vcGVyYXRvcl9pZBgbIAEoCSI6CghOZXdPcmRlchIdCgVv",
            "cmRlchgBIAIoCzIOLm9yZGVyXzIuT3JkZXISDwoHc3VzcGVuZBgCIAEoCCKw",
            "BwoLTW9kaWZ5T3JkZXISEAoIb3JkZXJfaWQYASACKAkSEgoKYWNjb3VudF9p",
            "ZBgCIAIoERIYChBvcmlnX2NsX29yZGVyX2lkGAMgAigJEhMKC2NsX29yZGVy",
            "X2lkGAQgAigJEhkKDXdoZW5fdXRjX3RpbWUYBSABKBJCAhgBEjYKEndoZW5f",
            "dXRjX3RpbWVzdGFtcBgSIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASFgoKdWludDMyX3F0eRgGIAEoDUICGAESHgoSdWludDMyX3Zpc2libGVf",
            "cXR5GAcgASgNQgIYARIiChZ1aW50MzJfbWluX3Zpc2libGVfcXR5GAggASgN",
            "QgIYARIZCgNxdHkYFyABKAsyDC5jcWcuRGVjaW1hbBIhCgt2aXNpYmxlX3F0",
            "eRgYIAEoCzIMLmNxZy5EZWNpbWFsEiUKD21pbl92aXNpYmxlX3F0eRgZIAEo",
            "CzIMLmNxZy5EZWNpbWFsEhoKEnNjYWxlZF9saW1pdF9wcmljZRgJIAEoEhIZ",
            "ChFzY2FsZWRfc3RvcF9wcmljZRgKIAEoEhIfChNhY3RpdmF0aW9uX3V0Y190",
            "aW1lGAsgASgSQgIYARI8ChhhY3RpdmF0aW9uX3V0Y190aW1lc3RhbXAYEyAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEh4KFnJlbW92ZV9hY3Rp",
            "dmF0aW9uX3RpbWUYDCABKAgSHwoTc3VzcGVuc2lvbl91dGNfdGltZRgNIAEo",
            "EkICGAESPAoYc3VzcGVuc2lvbl91dGNfdGltZXN0YW1wGBQgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIiChpyZW1vdmVfc3VzcGVuc2lvbl91",
            "dGNfdGltZRgOIAEoCBIQCghkdXJhdGlvbhgPIAEoDRIWCg5nb29kX3RocnVf",
            "ZGF0ZRgQIAEoEhIeChJnb29kX3RocnVfdXRjX3RpbWUYESABKBJCAhgBEjsK",
            "F2dvb2RfdGhydV91dGNfdGltZXN0YW1wGBUgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIpCh1vYnNvbGV0ZV9kaXNjcmV0aW9uYXJ5X29mZnNl",
            "dBgWIAEoDUICGAESLgoQZXh0cmFfYXR0cmlidXRlcxgaIAMoCzIULnNoYXJl",
            "ZF8xLk5hbWVkVmFsdWUSHQoVZXhlY3V0aW9uX3NvdXJjZV9jb2RlGBsgASgJ",
            "IuUBCgtDYW5jZWxPcmRlchIQCghvcmRlcl9pZBgBIAIoCRISCgphY2NvdW50",
            "X2lkGAIgAigREhgKEG9yaWdfY2xfb3JkZXJfaWQYAyACKAkSEwoLY2xfb3Jk",
            "ZXJfaWQYBCACKAkSGQoNd2hlbl91dGNfdGltZRgFIAEoEkICGAESNgoSd2hl",
            "bl91dGNfdGltZXN0YW1wGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIuChBleHRyYV9hdHRyaWJ1dGVzGAcgAygLMhQuc2hhcmVkXzEuTmFt",
            "ZWRWYWx1ZSKaAQoSQWNjb3VudE9yZGVyRmlsdGVyEhIKCmFjY291bnRfaWQY",
            "ASACKBESEgoEbWluZRgCIAEoCDoEdHJ1ZRIYCglzdXNwZW5kZWQYAyABKAg6",
            "BWZhbHNlEgwKBHNpZGUYBCABKA0SEwoLY29udHJhY3RfaWQYBSABKA0SHwoQ",
            "Y3VycmVudF9kYXlfb25seRgGIAEoCDoFZmFsc2UitQEKD0NhbmNlbEFsbE9y",
            "ZGVycxIZCg13aGVuX3V0Y190aW1lGAEgASgSQgIYARI2ChJ3aGVuX3V0Y190",
            "aW1lc3RhbXAYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMK",
            "C2NsX29yZGVyX2lkGAIgASgJEjoKFWFjY291bnRfb3JkZXJfZmlsdGVycxgD",
            "IAMoCzIbLm9yZGVyXzIuQWNjb3VudE9yZGVyRmlsdGVyIoYCCg1BY3RpdmF0",
            "ZU9yZGVyEhAKCG9yZGVyX2lkGAEgAigJEhIKCmFjY291bnRfaWQYAiACKBES",
            "GAoQb3JpZ19jbF9vcmRlcl9pZBgDIAIoCRITCgtjbF9vcmRlcl9pZBgEIAIo",
            "CRIZCg13aGVuX3V0Y190aW1lGAUgASgSQgIYARI2ChJ3aGVuX3V0Y190aW1l",
            "c3RhbXAYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KEGV4",
            "dHJhX2F0dHJpYnV0ZXMYByADKAsyFC5zaGFyZWRfMS5OYW1lZFZhbHVlEh0K",
            "FWV4ZWN1dGlvbl9zb3VyY2VfY29kZRgIIAEoCSJoChBOZXdDb21wb3VuZE9y",
            "ZGVyEi4KDmNvbXBvdW5kX29yZGVyGAEgAigLMhYub3JkZXJfMi5Db21wb3Vu",
            "ZE9yZGVyEiQKFnBhcnRpYWxfZmlsbHNfaGFuZGxpbmcYAiABKAg6BHRydWUi",
            "ggIKDUNvbXBvdW5kT3JkZXISDAoEdHlwZRgBIAIoDRIWCg5jbF9jb21wb3Vu",
            "ZF9pZBgCIAIoCRI7ChZjb21wb3VuZF9vcmRlcl9lbnRyaWVzGAMgAygLMhsu",
            "b3JkZXJfMi5Db21wb3VuZE9yZGVyRW50cnkSGgoScHJvZml0X3RpY2tfb2Zm",
            "c2V0GAQgASgREhgKEGxvc3NfdGlja19vZmZzZXQYBSABKBESHgoWc3RvcF9s",
            "aW1pdF90aWNrX29mZnNldBgGIAEoESI4CgRUeXBlEgwKCFRZUEVfT1BPEAES",
            "DAoIVFlQRV9PQ08QAhIUChBUWVBFX0lOREVQRU5ERU5UEAMiMAoIVXNlT3Jk",
            "ZXISEAoIb3JkZXJfaWQYASACKAkSEgoKYWNjb3VudF9pZBgCIAIoESKJAQoS",
            "Q29tcG91bmRPcmRlckVudHJ5Eh0KBW9yZGVyGAEgASgLMg4ub3JkZXJfMi5P",
            "cmRlchIuCg5jb21wb3VuZF9vcmRlchgCIAEoCzIWLm9yZGVyXzIuQ29tcG91",
            "bmRPcmRlchIkCgl1c2Vfb3JkZXIYAyABKAsyES5vcmRlcl8yLlVzZU9yZGVy",
            "IsUCCgxTdXNwZW5kT3JkZXISEAoIb3JkZXJfaWQYASACKAkSEgoKYWNjb3Vu",
            "dF9pZBgCIAIoERIYChBvcmlnX2NsX29yZGVyX2lkGAMgAigJEhMKC2NsX29y",
            "ZGVyX2lkGAQgAigJEhkKDXdoZW5fdXRjX3RpbWUYBSABKBJCAhgBEjYKEndo",
            "ZW5fdXRjX3RpbWVzdGFtcBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASHwoTYWN0aXZhdGlvbl91dGNfdGltZRgGIAEoEkICGAESPAoYYWN0",
            "aXZhdGlvbl91dGNfdGltZXN0YW1wGAggASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIuChBleHRyYV9hdHRyaWJ1dGVzGAkgAygLMhQuc2hhcmVk",
            "XzEuTmFtZWRWYWx1ZSJsChVBY2NvdW50UG9zaXRpb25GaWx0ZXISEgoKYWNj",
            "b3VudF9pZBgBIAIoERITCgtjb250cmFjdF9pZBgCIAEoDRIQCghpc19zaG9y",
            "dBgDIAEoCBIYChBjdXJyZW50X2RheV9vbmx5GAQgASgIIqcBCgxMaXF1aWRh",
            "dGVBbGwSQAoYYWNjb3VudF9wb3NpdGlvbl9maWx0ZXJzGAEgAygLMh4ub3Jk",
            "ZXJfMi5BY2NvdW50UG9zaXRpb25GaWx0ZXISNgoSd2hlbl91dGNfdGltZXN0",
            "YW1wGAIgAigLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIdChVleGVj",
            "dXRpb25fc291cmNlX2NvZGUYAyABKAkidAoGR29GbGF0EhMKC2FjY291bnRf",
            "aWRzGAEgAygREjYKEndoZW5fdXRjX3RpbWVzdGFtcBgCIAIoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASHQoVZXhlY3V0aW9uX3NvdXJjZV9jb2Rl",
            "GAMgASgJIkIKF09yZGVyRW50aXRsZW1lbnRSZXF1ZXN0EhMKC2NvbnRyYWN0",
            "X2lkGAEgAigNEhIKCmFjY291bnRfaWQYAiACKBEiTwoWT3JkZXJFbnRpdGxl",
            "bWVudFJlcG9ydBI1ChJvcmRlcl9lbnRpdGxlbWVudHMYASADKAsyGS5vcmRl",
            "cl8yLk9yZGVyRW50aXRsZW1lbnQioQEKEE9yZGVyRW50aXRsZW1lbnQSEgoK",
            "b3JkZXJfdHlwZRgBIAIoDRIUCgxpc19zeW50aGV0aWMYAiACKAgSEAoIZHVy",
            "YXRpb24YAyACKA0SGAoQZXhlY19pbnN0cnVjdGlvbhgEIAIoDRIeChZhbGdv",
            "X3N0cmF0ZWd5X3JlcXVpcmVkGAUgASgIEhcKD2FsZ29fc3RyYXRlZ2llcxgG",
            "IAMoCSKhAQoUQ3Jvc3NPcmRlclBhcmFtZXRlcnMSMQoQc2lkZV9hbGxvY2F0",
            "aW9ucxgBIAMoCzIXLm9yZGVyXzIuU2lkZUFsbG9jYXRpb24SDQoFcHJpY2UY",
            "AiABKAESFgoOdHJhbnNhY3Rpb25faWQYAyABKAkSLwoPbGVnX2FsbG9jYXRp",
            "b25zGAQgAygLMhYub3JkZXJfMi5MZWdBbGxvY2F0aW9uIsIBCg5TaWRlQWxs",
            "b2NhdGlvbhIPCgdzaWRlX2lkGAEgASgSEhIKCmFjY291bnRfaWQYAiABKBES",
            "MgoQZXh0ZXJuYWxfYWNjb3VudBgDIAEoCzIYLm9yZGVyXzIuRXh0ZXJuYWxB",
            "Y2NvdW50EhkKA3F0eRgEIAEoCzIMLmNxZy5EZWNpbWFsEgwKBHNpZGUYBSAB",
            "KA0SLgoQZXh0cmFfYXR0cmlidXRlcxgGIAMoCzIULnNoYXJlZF8xLk5hbWVk",
            "VmFsdWUiigEKDUxlZ0FsbG9jYXRpb24SEwoLY29udHJhY3RfaWQYASABKA0S",
            "GQoDcXR5GAIgASgLMgwuY3FnLkRlY2ltYWwSDQoFcHJpY2UYAyABKAESDAoE",
            "c2lkZRgEIAEoDRIUCgxsZWdfYWxsb2NfaWQYBSABKBISFgoOdHJhZGVfbWF0",
            "Y2hfaWQYBiABKAkiewoPRXh0ZXJuYWxBY2NvdW50Eh8KF2V4dGVybmFsX2Fj",
            "Y291bnRfbnVtYmVyGAEgASgJEhQKDGFjY291bnRfdHlwZRgCIAEoCRIWCg5h",
            "Y2NvdW50X29yaWdpbhgDIAEoCRIZChFnaXZlX3VwX21lbWJlcl9pZBgEIAEo",
            "CSKrAgoMQXBwcm92ZU9yZGVyEhAKCG9yZGVyX2lkGAEgASgJEhIKCmFjY291",
            "bnRfaWQYAiABKBESDgoGYWN0aW9uGAMgASgNEjYKEndoZW5fdXRjX3RpbWVz",
            "dGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMAoPc2lk",
            "ZV9hbGxvY2F0aW9uGAUgASgLMhcub3JkZXJfMi5TaWRlQWxsb2NhdGlvbhIu",
            "ChBleHRyYV9hdHRyaWJ1dGVzGAYgAygLMhQuc2hhcmVkXzEuTmFtZWRWYWx1",
            "ZSJLCgZBY3Rpb24SIAocQVBQUk9WRV9PUkRFUl9BQ1RJT05fQVBQUk9WRRAA",
            "Eh8KG0FQUFJPVkVfT1JERVJfQUNUSU9OX1JFSkVDVBABIkAKEk9yZGVyU3Rh",
            "dHVzUmVxdWVzdBIWCg5jaGFpbl9vcmRlcl9pZBgBIAEoCRISCgphY2NvdW50",
            "X2lkGAIgASgRIj8KEU9yZGVyU3RhdHVzUmVwb3J0EioKDG9yZGVyX3N0YXR1",
            "cxgBIAEoCzIULm9yZGVyXzIuT3JkZXJTdGF0dXMqbwoPU3BlY3VsYXRpb25U",
            "eXBlEiAKHFNQRUNVTEFUSU9OX1RZUEVfU1BFQ1VMQVRJT04QARIeChpTUEVD",
            "VUxBVElPTl9UWVBFX0FSQklUUkFHRRACEhoKFlNQRUNVTEFUSU9OX1RZUEVf",
            "SEVER0UQAypdChRNaUZJREFsZ29yaXRobUlkVHlwZRIkCiBNSUZJRF9BTEdP",
            "UklUSE1fSURfVFlQRV9FWFRFUk5BTBABEh8KG01JRklEX0FMR09SSVRITV9J",
            "RF9UWVBFX0NRRxACKsQBCh1NaUZJREludmVzdG1lbnREZWNpc2lvbklkVHlw",
            "ZRI4CjRNSUZJRF9JTlZFU1RNRU5UX0RFQ0lTSU9OX0lEX1RZUEVfRVhURVJO",
            "QUxfVFJBREVSX0lEEAESNgoyTUlGSURfSU5WRVNUTUVOVF9ERUNJU0lPTl9J",
            "RF9UWVBFX0VYVEVSTkFMX0FMR09fSUQQAhIxCi1NSUZJRF9JTlZFU1RNRU5U",
            "X0RFQ0lTSU9OX0lEX1RZUEVfQ1FHX0FMR09fSUQQAyqOAQocTWlGSURFeGVj",
            "dXRpb25EZWNpc2lvbklkVHlwZRI3CjNNSUZJRF9FWEVDVVRJT05fREVDSVNJ",
            "T05fSURfVFlQRV9FWFRFUk5BTF9UUkFERVJfSUQQARI1CjFNSUZJRF9FWEVD",
            "VVRJT05fREVDSVNJT05fSURfVFlQRV9FWFRFUk5BTF9BTEdPX0lEEAI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Metadata2.Metadata2Reflection.Descriptor, global::Strategy2.Strategy2Reflection.Descriptor, global::UserAttribute2.UserAttribute2Reflection.Descriptor, global::Cqg.DecimalReflection.Descriptor, global::Shared1.Shared1Reflection.Descriptor, global::Google.Protobuf.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Order2.SpeculationType), typeof(global::Order2.MiFIDAlgorithmIdType), typeof(global::Order2.MiFIDInvestmentDecisionIdType), typeof(global::Order2.MiFIDExecutionDecisionIdType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderRequestReject), global::Order2.OrderRequestReject.Parser, new[]{ "RequestId", "RejectCode", "TextMessage", "Details" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderStatus), global::Order2.OrderStatus.Parser, new[]{ "SubscriptionIds", "IsSnapshot", "Status", "OrderId", "ChainOrderId", "ExecOrderId", "DetailedDomOrderId", "StatusUtcTime", "StatusUtcTimestamp", "SubmissionUtcTime", "SubmissionUtcTimestamp", "Uint32FillQty", "FillQty", "FillCnt", "ScaledAvgFillPrice", "AvgFillPriceCorrect", "ActiveAtUtcTime", "ActiveAtUtcTimestamp", "Uint32RemainingQty", "RemainingQty", "Order", "TransactionStatuses", "RejectUtcTimestamp", "RejectMessage", "CancelUtcTimestamp", "FillUtcTimestamp", "HasFillWithModifiedQty", "HasFillWithModifiedPrice", "EnteredByUser", "FirstStatementDate", "LastStatementDate", "ContractMetadata", "AccountId", "CompoundOrderStructure", "HangCount", "StrategyProperties", "CrossTransactionId", "ExchangeExtraAttributes", "FillCommission", "RouteClOrderId", "MifidExecutionDecision", "MifidExecutionDecisionIsAlgo", "MifidInvestmentDecision", "MifidInvestmentDecisionIsAlgo", "SenderLocationId", "SenderOperatorId", "OperatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.TransactionStatus), global::Order2.TransactionStatus.Parser, new[]{ "Status", "TransId", "TransUtcTime", "TransUtcTimestamp", "RefTransId", "OrigClOrderId", "ClOrderId", "Uint32FillQty", "FillQty", "ScaledFillPrice", "Trades", "StrategyLegFills", "SyntheticHang", "Uint32PrevOrderQty", "PrevOrderQty", "Uint32OrderQty", "OrderQty", "ScaledPrevLimitPrice", "ScaledLimitPrice", "ScaledPrevStopPrice", "ScaledStopPrice", "Uint32PrevVisibleQty", "PrevVisibleQty", "Uint32VisibleQty", "VisibleQty", "Uint32PrevMinVisibleQty", "PrevMinVisibleQty", "Uint32MinVisibleQty", "MinVisibleQty", "Uint32PrevFillQty", "PrevFillQty", "ScaledPrevFillPrice", "PrevOrderType", "OrderType", "PrevExecInstructions", "ExecInstructions", "PrevDuration", "Duration", "PrevGoodThruDate", "GoodThruDate", "RejectCode", "FillCounterparty", "RouteClOrderId", "TextMessage", "PrevGoodThruUtcTime", "PrevGoodThruUtcTimestamp", "GoodThruUtcTime", "GoodThruUtcTimestamp", "IsAggressive", "ClientRegulatoryAlgorithmId", "EffectiveRegulatoryAlgorithmId", "MifidAlgorithmId", "MifidAlgorithmIdType", "MifidAppliedAlgorithmId", "MifidAppliedAlgorithmIdType", "MifidExecutionDecision", "MifidExecutionDecisionIsAlgo", "OpenCloseEffect", "SpeculationType", "ObsoletePrevDiscretionaryOffset", "ObsoleteDiscretionaryOffset", "FillCommission", "MifidInvestmentDecision", "MifidInvestmentDecisionIsAlgo", "ExecutionSourceCode", "IsAutomated", "TradeMatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.Trade), global::Order2.Trade.Parser, new[]{ "TradeId", "ContractId", "StatementDate", "TradeUtcTime", "TradeUtcTimestamp", "TradeDate", "ScaledPrice", "PriceCorrect", "Side", "Uint32Qty", "Qty", "TradeCounterparty", "IsAggressive", "LegExecutionId", "OpenCloseEffect", "SpeculationType", "TradeMatchId", "SpecificContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.Commission), global::Order2.Commission.Parser, new[]{ "CommissionCurrency", "Commission_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CompoundOrderStructure), global::Order2.CompoundOrderStructure.Parser, new[]{ "Type", "ClCompoundId", "CompoundOrderEntries", "ProfitOffset", "LossOffset", "StopLimitOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CompoundOrderStructureEntry), global::Order2.CompoundOrderStructureEntry.Parser, new[]{ "ChainOrderId", "CompoundOrderStructure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.Order), global::Order2.Order.Parser, new[]{ "AccountId", "WhenUtcTime", "WhenUtcTimestamp", "ContractId", "ClOrderId", "OrderType", "ExecInstructions", "Duration", "GoodThruDate", "Side", "ScaledLimitPrice", "ScaledStopPrice", "Uint32Qty", "Uint32VisibleQty", "Uint32MinVisibleQty", "Qty", "VisibleQty", "MinVisibleQty", "IsManual", "IsClose", "IsAggressive", "ScaledTrailOffset", "TrailingPeg", "Uint32TriggerQty", "TriggerQty", "ActivationUtcTime", "ActivationUtcTimestamp", "SuspensionUtcTime", "SuspensionUtcTimestamp", "UserAttributes", "ExtraAttributes", "AlgoStrategy", "GoodThruUtcTime", "GoodThruUtcTimestamp", "IsUserAttributeChecked", "StrategyTradingParameters", "OpenCloseInstruction", "SpeculationType", "ObsoleteDiscretionaryOffset", "ContributorId", "ExecutionSourceCode", "CrossOrderParameters", "ExternalAccountNumber" }, null, new[]{ typeof(global::Order2.Order.Types.Side), typeof(global::Order2.Order.Types.OrderType), typeof(global::Order2.Order.Types.ExecInstruction), typeof(global::Order2.Order.Types.Duration), typeof(global::Order2.Order.Types.TrailingPeg), typeof(global::Order2.Order.Types.OpenCloseInstruction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderRequest), global::Order2.OrderRequest.Parser, new[]{ "RequestId", "NewOrder", "ModifyOrder", "CancelOrder", "CancelAllOrders", "LiquidateAll", "GoFlat", "SuspendOrder", "ActivateOrder", "ModifyUserAttributes", "NewCompoundOrder", "SyntheticLiquidate", "SyntheticScratch", "GoMarket", "ApproveOrder", "OnBehalfOfUser", "ClientRegulatoryAlgorithmId", "MifidAlgorithmId", "MifidAlgorithmIdType", "OverrideExecutionWithinFirmWithNore", "MifidInvestmentDecisionId", "MifidInvestmentDecisionIdType", "MifidExecutionDecisionId", "MifidExecutionDecisionIdType", "IsAutomated", "SenderLocationId", "SenderOperatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.NewOrder), global::Order2.NewOrder.Parser, new[]{ "Order", "Suspend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.ModifyOrder), global::Order2.ModifyOrder.Parser, new[]{ "OrderId", "AccountId", "OrigClOrderId", "ClOrderId", "WhenUtcTime", "WhenUtcTimestamp", "Uint32Qty", "Uint32VisibleQty", "Uint32MinVisibleQty", "Qty", "VisibleQty", "MinVisibleQty", "ScaledLimitPrice", "ScaledStopPrice", "ActivationUtcTime", "ActivationUtcTimestamp", "RemoveActivationTime", "SuspensionUtcTime", "SuspensionUtcTimestamp", "RemoveSuspensionUtcTime", "Duration", "GoodThruDate", "GoodThruUtcTime", "GoodThruUtcTimestamp", "ObsoleteDiscretionaryOffset", "ExtraAttributes", "ExecutionSourceCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CancelOrder), global::Order2.CancelOrder.Parser, new[]{ "OrderId", "AccountId", "OrigClOrderId", "ClOrderId", "WhenUtcTime", "WhenUtcTimestamp", "ExtraAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.AccountOrderFilter), global::Order2.AccountOrderFilter.Parser, new[]{ "AccountId", "Mine", "Suspended", "Side", "ContractId", "CurrentDayOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CancelAllOrders), global::Order2.CancelAllOrders.Parser, new[]{ "WhenUtcTime", "WhenUtcTimestamp", "ClOrderId", "AccountOrderFilters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.ActivateOrder), global::Order2.ActivateOrder.Parser, new[]{ "OrderId", "AccountId", "OrigClOrderId", "ClOrderId", "WhenUtcTime", "WhenUtcTimestamp", "ExtraAttributes", "ExecutionSourceCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.NewCompoundOrder), global::Order2.NewCompoundOrder.Parser, new[]{ "CompoundOrder", "PartialFillsHandling" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CompoundOrder), global::Order2.CompoundOrder.Parser, new[]{ "Type", "ClCompoundId", "CompoundOrderEntries", "ProfitTickOffset", "LossTickOffset", "StopLimitTickOffset" }, null, new[]{ typeof(global::Order2.CompoundOrder.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.UseOrder), global::Order2.UseOrder.Parser, new[]{ "OrderId", "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CompoundOrderEntry), global::Order2.CompoundOrderEntry.Parser, new[]{ "Order", "CompoundOrder", "UseOrder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.SuspendOrder), global::Order2.SuspendOrder.Parser, new[]{ "OrderId", "AccountId", "OrigClOrderId", "ClOrderId", "WhenUtcTime", "WhenUtcTimestamp", "ActivationUtcTime", "ActivationUtcTimestamp", "ExtraAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.AccountPositionFilter), global::Order2.AccountPositionFilter.Parser, new[]{ "AccountId", "ContractId", "IsShort", "CurrentDayOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.LiquidateAll), global::Order2.LiquidateAll.Parser, new[]{ "AccountPositionFilters", "WhenUtcTimestamp", "ExecutionSourceCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.GoFlat), global::Order2.GoFlat.Parser, new[]{ "AccountIds", "WhenUtcTimestamp", "ExecutionSourceCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderEntitlementRequest), global::Order2.OrderEntitlementRequest.Parser, new[]{ "ContractId", "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderEntitlementReport), global::Order2.OrderEntitlementReport.Parser, new[]{ "OrderEntitlements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderEntitlement), global::Order2.OrderEntitlement.Parser, new[]{ "OrderType", "IsSynthetic", "Duration", "ExecInstruction", "AlgoStrategyRequired", "AlgoStrategies" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.CrossOrderParameters), global::Order2.CrossOrderParameters.Parser, new[]{ "SideAllocations", "Price", "TransactionId", "LegAllocations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.SideAllocation), global::Order2.SideAllocation.Parser, new[]{ "SideId", "AccountId", "ExternalAccount", "Qty", "Side", "ExtraAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.LegAllocation), global::Order2.LegAllocation.Parser, new[]{ "ContractId", "Qty", "Price", "Side", "LegAllocId", "TradeMatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.ExternalAccount), global::Order2.ExternalAccount.Parser, new[]{ "ExternalAccountNumber", "AccountType", "AccountOrigin", "GiveUpMemberId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.ApproveOrder), global::Order2.ApproveOrder.Parser, new[]{ "OrderId", "AccountId", "Action", "WhenUtcTimestamp", "SideAllocation", "ExtraAttributes" }, null, new[]{ typeof(global::Order2.ApproveOrder.Types.Action) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderStatusRequest), global::Order2.OrderStatusRequest.Parser, new[]{ "ChainOrderId", "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Order2.OrderStatusReport), global::Order2.OrderStatusReport.Parser, new[]{ "OrderStatus" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Specifies what kind of strategy an order, a trade or a position belongs to.
  /// </summary>
  public enum SpeculationType {
    /// <summary>
    /// Speculation strategy.
    /// </summary>
    [pbr::OriginalName("SPECULATION_TYPE_SPECULATION")] Speculation = 1,
    /// <summary>
    /// Arbitrage strategy.
    /// </summary>
    [pbr::OriginalName("SPECULATION_TYPE_ARBITRAGE")] Arbitrage = 2,
    /// <summary>
    /// Hedging strategy.
    /// </summary>
    [pbr::OriginalName("SPECULATION_TYPE_HEDGE")] Hedge = 3,
  }

  /// <summary>
  /// MiFID algorithm ID type.
  /// </summary>
  public enum MiFIDAlgorithmIdType {
    /// <summary>
    /// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
    /// Non-CQG WebAPI clients should always use this type.
    /// </summary>
    [pbr::OriginalName("MIFID_ALGORITHM_ID_TYPE_EXTERNAL")] External = 1,
    /// <summary>
    /// CQG internal MiFID Algo ID.
    /// </summary>
    [pbr::OriginalName("MIFID_ALGORITHM_ID_TYPE_CQG")] Cqg = 2,
  }

  /// <summary>
  /// MiFID investment decision ID type.
  /// </summary>
  public enum MiFIDInvestmentDecisionIdType {
    /// <summary>
    /// Trader MiFID short code.
    /// </summary>
    [pbr::OriginalName("MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_TRADER_ID")] ExternalTraderId = 1,
    /// <summary>
    /// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
    /// </summary>
    [pbr::OriginalName("MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_ALGO_ID")] ExternalAlgoId = 2,
    /// <summary>
    /// CQG internal MiFID Algo ID.
    /// </summary>
    [pbr::OriginalName("MIFID_INVESTMENT_DECISION_ID_TYPE_CQG_ALGO_ID")] CqgAlgoId = 3,
  }

  /// <summary>
  /// MiFID execution decision ID type.
  /// </summary>
  public enum MiFIDExecutionDecisionIdType {
    /// <summary>
    /// Trader MiFID short code.
    /// </summary>
    [pbr::OriginalName("MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_TRADER_ID")] ExternalTraderId = 1,
    /// <summary>
    /// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
    /// </summary>
    [pbr::OriginalName("MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_ALGO_ID")] ExternalAlgoId = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Low-level order request reject. It is sent only if direct order status updates are impossible.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderRequestReject : pb::IMessage<OrderRequestReject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRequestReject> _parser = new pb::MessageParser<OrderRequestReject>(() => new OrderRequestReject());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderRequestReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequestReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequestReject(OrderRequestReject other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      rejectCode_ = other.rejectCode_;
      textMessage_ = other.textMessage_;
      details_ = other.details_ != null ? other.details_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequestReject Clone() {
      return new OrderRequestReject(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of the order request this reject corresponds to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reject_code" field.</summary>
    public const int RejectCodeFieldNumber = 2;
    private readonly static uint RejectCodeDefaultValue = 0;

    private uint rejectCode_;
    /// <summary>
    /// If order request is rejected, this is rejection code.
    /// See https://help.cqg.com/apihelp/#!Documents/rejectcodesfixconnectorderrouting.htm for the list of values.
    /// Client implementation must be ready to get new values in this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RejectCode {
      get { if ((_hasBits0 & 2) != 0) { return rejectCode_; } else { return RejectCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rejectCode_ = value;
      }
    }
    /// <summary>Gets whether the "reject_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRejectCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reject_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRejectCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 3;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Note: use 'details' instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 4;
    private global::Shared1.Text details_;
    /// <summary>
    /// Optional reject details message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Shared1.Text Details {
      get { return details_; }
      set {
        details_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderRequestReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderRequestReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (RejectCode != other.RejectCode) return false;
      if (TextMessage != other.TextMessage) return false;
      if (!object.Equals(Details, other.Details)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasRejectCode) hash ^= RejectCode.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (details_ != null) hash ^= Details.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasRejectCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(RejectCode);
      }
      if (HasTextMessage) {
        output.WriteRawTag(26);
        output.WriteString(TextMessage);
      }
      if (details_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasRejectCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(RejectCode);
      }
      if (HasTextMessage) {
        output.WriteRawTag(26);
        output.WriteString(TextMessage);
      }
      if (details_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasRejectCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RejectCode);
      }
      if (HasTextMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (details_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderRequestReject other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasRejectCode) {
        RejectCode = other.RejectCode;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.details_ != null) {
        if (details_ == null) {
          Details = new global::Shared1.Text();
        }
        Details.MergeFrom(other.Details);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            RejectCode = input.ReadUInt32();
            break;
          }
          case 26: {
            TextMessage = input.ReadString();
            break;
          }
          case 34: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            RejectCode = input.ReadUInt32();
            break;
          }
          case 26: {
            TextMessage = input.ReadString();
            break;
          }
          case 34: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Status of order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderStatus : pb::IMessage<OrderStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderStatus> _parser = new pb::MessageParser<OrderStatus>(() => new OrderStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatus(OrderStatus other) : this() {
      _hasBits0 = other._hasBits0;
      subscriptionIds_ = other.subscriptionIds_.Clone();
      isSnapshot_ = other.isSnapshot_;
      status_ = other.status_;
      orderId_ = other.orderId_;
      chainOrderId_ = other.chainOrderId_;
      execOrderId_ = other.execOrderId_;
      detailedDomOrderId_ = other.detailedDomOrderId_;
      statusUtcTime_ = other.statusUtcTime_;
      statusUtcTimestamp_ = other.statusUtcTimestamp_ != null ? other.statusUtcTimestamp_.Clone() : null;
      submissionUtcTime_ = other.submissionUtcTime_;
      submissionUtcTimestamp_ = other.submissionUtcTimestamp_ != null ? other.submissionUtcTimestamp_.Clone() : null;
      uint32FillQty_ = other.uint32FillQty_;
      fillQty_ = other.fillQty_ != null ? other.fillQty_.Clone() : null;
      fillCnt_ = other.fillCnt_;
      scaledAvgFillPrice_ = other.scaledAvgFillPrice_;
      avgFillPriceCorrect_ = other.avgFillPriceCorrect_;
      activeAtUtcTime_ = other.activeAtUtcTime_;
      activeAtUtcTimestamp_ = other.activeAtUtcTimestamp_ != null ? other.activeAtUtcTimestamp_.Clone() : null;
      uint32RemainingQty_ = other.uint32RemainingQty_;
      remainingQty_ = other.remainingQty_ != null ? other.remainingQty_.Clone() : null;
      order_ = other.order_ != null ? other.order_.Clone() : null;
      transactionStatuses_ = other.transactionStatuses_.Clone();
      rejectUtcTimestamp_ = other.rejectUtcTimestamp_ != null ? other.rejectUtcTimestamp_.Clone() : null;
      rejectMessage_ = other.rejectMessage_;
      cancelUtcTimestamp_ = other.cancelUtcTimestamp_ != null ? other.cancelUtcTimestamp_.Clone() : null;
      fillUtcTimestamp_ = other.fillUtcTimestamp_ != null ? other.fillUtcTimestamp_.Clone() : null;
      hasFillWithModifiedQty_ = other.hasFillWithModifiedQty_;
      hasFillWithModifiedPrice_ = other.hasFillWithModifiedPrice_;
      enteredByUser_ = other.enteredByUser_;
      firstStatementDate_ = other.firstStatementDate_;
      lastStatementDate_ = other.lastStatementDate_;
      contractMetadata_ = other.contractMetadata_.Clone();
      accountId_ = other.accountId_;
      compoundOrderStructure_ = other.compoundOrderStructure_ != null ? other.compoundOrderStructure_.Clone() : null;
      hangCount_ = other.hangCount_;
      strategyProperties_ = other.strategyProperties_ != null ? other.strategyProperties_.Clone() : null;
      crossTransactionId_ = other.crossTransactionId_;
      exchangeExtraAttributes_ = other.exchangeExtraAttributes_.Clone();
      fillCommission_ = other.fillCommission_ != null ? other.fillCommission_.Clone() : null;
      routeClOrderId_ = other.routeClOrderId_;
      mifidExecutionDecision_ = other.mifidExecutionDecision_;
      mifidExecutionDecisionIsAlgo_ = other.mifidExecutionDecisionIsAlgo_;
      mifidInvestmentDecision_ = other.mifidInvestmentDecision_;
      mifidInvestmentDecisionIsAlgo_ = other.mifidInvestmentDecisionIsAlgo_;
      senderLocationId_ = other.senderLocationId_;
      senderOperatorId_ = other.senderOperatorId_;
      operatorId_ = other.operatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatus Clone() {
      return new OrderStatus(this);
    }

    /// <summary>Field number for the "subscription_ids" field.</summary>
    public const int SubscriptionIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_subscriptionIds_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> subscriptionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of trade subscription IDs this status is related to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> SubscriptionIds {
      get { return subscriptionIds_; }
    }

    /// <summary>Field number for the "is_snapshot" field.</summary>
    public const int IsSnapshotFieldNumber = 2;
    private readonly static bool IsSnapshotDefaultValue = false;

    private bool isSnapshot_;
    /// <summary>
    /// True if this is a snapshot related message.
    /// Since snapshot might be sent in several messages (including none),
    /// client should use TradeSnapshotCompletion message as
    /// an indicator of complete snapshot delivery for a particular subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSnapshot {
      get { if ((_hasBits0 & 1) != 0) { return isSnapshot_; } else { return IsSnapshotDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isSnapshot_ = value;
      }
    }
    /// <summary>Gets whether the "is_snapshot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSnapshot {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_snapshot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSnapshot() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    /// <summary>
    /// This field is associated with shared_1.OrderStatus.Status enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 4;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order ID assigned by server.
    /// It is changed by server after each modify request acknowledgment.
    /// Some fields and nested messages of OrderStatus message may be different
    /// for different accounts for the same order (i.e. same order_id).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "chain_order_id" field.</summary>
    public const int ChainOrderIdFieldNumber = 5;
    private readonly static string ChainOrderIdDefaultValue = "";

    private string chainOrderId_;
    /// <summary>
    /// Order ID assigned by server to originally placed order. It stays the same regardless of modification requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChainOrderId {
      get { return chainOrderId_ ?? ChainOrderIdDefaultValue; }
      set {
        chainOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "chain_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChainOrderId {
      get { return chainOrderId_ != null; }
    }
    /// <summary>Clears the value of the "chain_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChainOrderId() {
      chainOrderId_ = null;
    }

    /// <summary>Field number for the "exec_order_id" field.</summary>
    public const int ExecOrderIdFieldNumber = 6;
    private readonly static string ExecOrderIdDefaultValue = "";

    private string execOrderId_;
    /// <summary>
    /// Order ID assigned by execution system (e.g. exchange).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecOrderId {
      get { return execOrderId_ ?? ExecOrderIdDefaultValue; }
      set {
        execOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exec_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecOrderId {
      get { return execOrderId_ != null; }
    }
    /// <summary>Clears the value of the "exec_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecOrderId() {
      execOrderId_ = null;
    }

    /// <summary>Field number for the "detailed_dom_order_id" field.</summary>
    public const int DetailedDomOrderIdFieldNumber = 36;
    private readonly static string DetailedDomOrderIdDefaultValue = "";

    private string detailedDomOrderId_;
    /// <summary>
    /// Id used to determine a user's order in Detailed DOM.
    /// Is unique for an exchange. contract_id + detailed_dom_order_id pair is unique among all orders of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DetailedDomOrderId {
      get { return detailedDomOrderId_ ?? DetailedDomOrderIdDefaultValue; }
      set {
        detailedDomOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "detailed_dom_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDetailedDomOrderId {
      get { return detailedDomOrderId_ != null; }
    }
    /// <summary>Clears the value of the "detailed_dom_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDetailedDomOrderId() {
      detailedDomOrderId_ = null;
    }

    /// <summary>Field number for the "status_utc_time" field.</summary>
    public const int StatusUtcTimeFieldNumber = 7;
    private readonly static long StatusUtcTimeDefaultValue = 0L;

    private long statusUtcTime_;
    /// <summary>
    /// Note: use status_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StatusUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return statusUtcTime_; } else { return StatusUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        statusUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "status_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatusUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "status_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatusUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "status_utc_timestamp" field.</summary>
    public const int StatusUtcTimestampFieldNumber = 24;
    private global::Google.Protobuf.Timestamp statusUtcTimestamp_;
    /// <summary>
    /// Last order change time from server perspective (UTC).
    /// It is not guaranteed that order status (e.g. from different order chain) which comes later has bigger timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp StatusUtcTimestamp {
      get { return statusUtcTimestamp_; }
      set {
        statusUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "submission_utc_time" field.</summary>
    public const int SubmissionUtcTimeFieldNumber = 8;
    private readonly static long SubmissionUtcTimeDefaultValue = 0L;

    private long submissionUtcTime_;
    /// <summary>
    /// Note: use submission_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SubmissionUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return submissionUtcTime_; } else { return SubmissionUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        submissionUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "submission_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubmissionUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "submission_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubmissionUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "submission_utc_timestamp" field.</summary>
    public const int SubmissionUtcTimestampFieldNumber = 25;
    private global::Google.Protobuf.Timestamp submissionUtcTimestamp_;
    /// <summary>
    /// Time when original order was submitted to the execution system by server (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp SubmissionUtcTimestamp {
      get { return submissionUtcTimestamp_; }
      set {
        submissionUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "uint32_fill_qty" field.</summary>
    public const int Uint32FillQtyFieldNumber = 9;
    private readonly static uint Uint32FillQtyDefaultValue = 0;

    private uint uint32FillQty_;
    /// <summary>
    /// Note: use fill_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32FillQty {
      get { if ((_hasBits0 & 16) != 0) { return uint32FillQty_; } else { return Uint32FillQtyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uint32FillQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_fill_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32FillQty {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uint32_fill_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32FillQty() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "fill_qty" field.</summary>
    public const int FillQtyFieldNumber = 28;
    private global::Cqg.Decimal fillQty_;
    /// <summary>
    /// Filled quantity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal FillQty {
      get { return fillQty_; }
      set {
        fillQty_ = value;
      }
    }

    /// <summary>Field number for the "fill_cnt" field.</summary>
    public const int FillCntFieldNumber = 10;
    private readonly static uint FillCntDefaultValue = 0;

    private uint fillCnt_;
    /// <summary>
    /// Number of fill events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FillCnt {
      get { if ((_hasBits0 & 32) != 0) { return fillCnt_; } else { return FillCntDefaultValue; } }
      set {
        _hasBits0 |= 32;
        fillCnt_ = value;
      }
    }
    /// <summary>Gets whether the "fill_cnt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFillCnt {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "fill_cnt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFillCnt() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scaled_avg_fill_price" field.</summary>
    public const int ScaledAvgFillPriceFieldNumber = 11;
    private readonly static long ScaledAvgFillPriceDefaultValue = 0L;

    private long scaledAvgFillPrice_;
    /// <summary>
    /// Average fill price.
    /// NOTE: this price is aligned by ContractMetadata.correct_price_scale so don't use it for OTE/UPL calculation but
    /// use prices from individual TRADE elements. See also avg_fill_price_correct field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledAvgFillPrice {
      get { if ((_hasBits0 & 64) != 0) { return scaledAvgFillPrice_; } else { return ScaledAvgFillPriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scaledAvgFillPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_avg_fill_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledAvgFillPrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scaled_avg_fill_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledAvgFillPrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "avg_fill_price_correct" field.</summary>
    public const int AvgFillPriceCorrectFieldNumber = 27;
    private readonly static double AvgFillPriceCorrectDefaultValue = 0D;

    private double avgFillPriceCorrect_;
    /// <summary>
    /// Average fill price in correct price format.
    /// Could have higher precision than avg_fill_price multiplied by correct_price_scale.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPriceCorrect {
      get { if ((_hasBits0 & 8192) != 0) { return avgFillPriceCorrect_; } else { return AvgFillPriceCorrectDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        avgFillPriceCorrect_ = value;
      }
    }
    /// <summary>Gets whether the "avg_fill_price_correct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAvgFillPriceCorrect {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "avg_fill_price_correct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAvgFillPriceCorrect() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "active_at_utc_time" field.</summary>
    public const int ActiveAtUtcTimeFieldNumber = 12;
    private readonly static long ActiveAtUtcTimeDefaultValue = 0L;

    private long activeAtUtcTime_;
    /// <summary>
    /// Note: use active_at_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActiveAtUtcTime {
      get { if ((_hasBits0 & 128) != 0) { return activeAtUtcTime_; } else { return ActiveAtUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        activeAtUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "active_at_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveAtUtcTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "active_at_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveAtUtcTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "active_at_utc_timestamp" field.</summary>
    public const int ActiveAtUtcTimestampFieldNumber = 26;
    private global::Google.Protobuf.Timestamp activeAtUtcTimestamp_;
    /// <summary>
    /// Time when order should be submitted to execution system as assigned by server (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp ActiveAtUtcTimestamp {
      get { return activeAtUtcTimestamp_; }
      set {
        activeAtUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "uint32_remaining_qty" field.</summary>
    public const int Uint32RemainingQtyFieldNumber = 13;
    private readonly static uint Uint32RemainingQtyDefaultValue = 0;

    private uint uint32RemainingQty_;
    /// <summary>
    /// Note: use remaining_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32RemainingQty {
      get { if ((_hasBits0 & 256) != 0) { return uint32RemainingQty_; } else { return Uint32RemainingQtyDefaultValue; } }
      set {
        _hasBits0 |= 256;
        uint32RemainingQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_remaining_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32RemainingQty {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "uint32_remaining_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32RemainingQty() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "remaining_qty" field.</summary>
    public const int RemainingQtyFieldNumber = 29;
    private global::Cqg.Decimal remainingQty_;
    /// <summary>
    /// Remaining (unfilled) order quantity. It is not always equal
    /// to order size minus filled size (for example, busted orders violate that).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal RemainingQty {
      get { return remainingQty_; }
      set {
        remainingQty_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 14;
    private global::Order2.Order order_;
    /// <summary>
    /// Order with updated attributes. Server may not send it if order attributes remained the same since last update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "transaction_statuses" field.</summary>
    public const int TransactionStatusesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Order2.TransactionStatus> _repeated_transactionStatuses_codec
        = pb::FieldCodec.ForMessage(122, global::Order2.TransactionStatus.Parser);
    private readonly pbc::RepeatedField<global::Order2.TransactionStatus> transactionStatuses_ = new pbc::RepeatedField<global::Order2.TransactionStatus>();
    /// <summary>
    /// List of [last] transactions.
    /// In case of initial snapshot (if last_orders_update_utc_time was not set in TradeSubscription)
    /// all available transactions are sent. This list can be empty if this status is sent to update order attributes only
    /// (e.g. to update prices of trailing orders).
    /// It is guaranteed that this list is sorted by transaction identifier (TransactionStatus.trans_id).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.TransactionStatus> TransactionStatuses {
      get { return transactionStatuses_; }
    }

    /// <summary>Field number for the "reject_utc_timestamp" field.</summary>
    public const int RejectUtcTimestampFieldNumber = 30;
    private global::Google.Protobuf.Timestamp rejectUtcTimestamp_;
    /// <summary>
    /// Time of the latest REJECTED, REJECT_CANCEL or REJECT_MODIFY transaction, if any (UTC).
    /// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp RejectUtcTimestamp {
      get { return rejectUtcTimestamp_; }
      set {
        rejectUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "reject_message" field.</summary>
    public const int RejectMessageFieldNumber = 31;
    private readonly static string RejectMessageDefaultValue = "";

    private string rejectMessage_;
    /// <summary>
    /// Message of the latest REJECTED, REJECT_CANCEL or REJECT_MODIFY transaction, if any.
    /// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RejectMessage {
      get { return rejectMessage_ ?? RejectMessageDefaultValue; }
      set {
        rejectMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reject_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRejectMessage {
      get { return rejectMessage_ != null; }
    }
    /// <summary>Clears the value of the "reject_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRejectMessage() {
      rejectMessage_ = null;
    }

    /// <summary>Field number for the "cancel_utc_timestamp" field.</summary>
    public const int CancelUtcTimestampFieldNumber = 32;
    private global::Google.Protobuf.Timestamp cancelUtcTimestamp_;
    /// <summary>
    /// Time of the latest ACK_CANCEL transaction, if any (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp CancelUtcTimestamp {
      get { return cancelUtcTimestamp_; }
      set {
        cancelUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "fill_utc_timestamp" field.</summary>
    public const int FillUtcTimestampFieldNumber = 33;
    private global::Google.Protobuf.Timestamp fillUtcTimestamp_;
    /// <summary>
    /// Time of the latest FILL transaction, if any (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp FillUtcTimestamp {
      get { return fillUtcTimestamp_; }
      set {
        fillUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "has_fill_with_modified_qty" field.</summary>
    public const int HasFillWithModifiedQtyFieldNumber = 34;
    private readonly static bool HasFillWithModifiedQtyDefaultValue = false;

    private bool hasFillWithModifiedQty_;
    /// <summary>
    /// Whether there is FILL_CORRECT with updated quantity. Canceled and busted fills are ignored.
    /// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFillWithModifiedQty {
      get { if ((_hasBits0 & 16384) != 0) { return hasFillWithModifiedQty_; } else { return HasFillWithModifiedQtyDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        hasFillWithModifiedQty_ = value;
      }
    }
    /// <summary>Gets whether the "has_fill_with_modified_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasFillWithModifiedQty {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "has_fill_with_modified_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasFillWithModifiedQty() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "has_fill_with_modified_price" field.</summary>
    public const int HasFillWithModifiedPriceFieldNumber = 35;
    private readonly static bool HasFillWithModifiedPriceDefaultValue = false;

    private bool hasFillWithModifiedPrice_;
    /// <summary>
    /// Whether there is FILL_CORRECT with updated price. Canceled and busted fills are ignored.
    /// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFillWithModifiedPrice {
      get { if ((_hasBits0 & 32768) != 0) { return hasFillWithModifiedPrice_; } else { return HasFillWithModifiedPriceDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        hasFillWithModifiedPrice_ = value;
      }
    }
    /// <summary>Gets whether the "has_fill_with_modified_price" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasFillWithModifiedPrice {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "has_fill_with_modified_price" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasFillWithModifiedPrice() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "entered_by_user" field.</summary>
    public const int EnteredByUserFieldNumber = 16;
    private readonly static string EnteredByUserDefaultValue = "";

    private string enteredByUser_;
    /// <summary>
    /// User who placed the order, or user on whose behalf the order was placed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EnteredByUser {
      get { return enteredByUser_ ?? EnteredByUserDefaultValue; }
      set {
        enteredByUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "entered_by_user" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnteredByUser {
      get { return enteredByUser_ != null; }
    }
    /// <summary>Clears the value of the "entered_by_user" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnteredByUser() {
      enteredByUser_ = null;
    }

    /// <summary>Field number for the "first_statement_date" field.</summary>
    public const int FirstStatementDateFieldNumber = 17;
    private readonly static long FirstStatementDateDefaultValue = 0L;

    private long firstStatementDate_;
    /// <summary>
    /// Statement date when this order was submitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstStatementDate {
      get { if ((_hasBits0 & 512) != 0) { return firstStatementDate_; } else { return FirstStatementDateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        firstStatementDate_ = value;
      }
    }
    /// <summary>Gets whether the "first_statement_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstStatementDate {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "first_statement_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstStatementDate() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "last_statement_date" field.</summary>
    public const int LastStatementDateFieldNumber = 18;
    private readonly static long LastStatementDateDefaultValue = 0L;

    private long lastStatementDate_;
    /// <summary>
    /// Last statement date this order belongs to. It is set when order is cleaned by a statement report or other event
    /// so that order is not 'current' any longer. For example, canceled synthetic strategy leg orders without fills
    /// may be cleared before the end of 'current' day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastStatementDate {
      get { if ((_hasBits0 & 1024) != 0) { return lastStatementDate_; } else { return LastStatementDateDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        lastStatementDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_statement_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastStatementDate {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "last_statement_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastStatementDate() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Metadata2.ContractMetadata> _repeated_contractMetadata_codec
        = pb::FieldCodec.ForMessage(154, global::Metadata2.ContractMetadata.Parser);
    private readonly pbc::RepeatedField<global::Metadata2.ContractMetadata> contractMetadata_ = new pbc::RepeatedField<global::Metadata2.ContractMetadata>();
    /// <summary>
    /// Multiple OrderStatus and PositionStatus messages in a single ServerMsg can reference the same contract.
    /// If the contract is unknown to the client before this ServerMsg,
    /// contract meta-data will be added in at least one of them.
    /// If in your code you process orders first and positions second then during processing orders you may
    /// encounter order with yet unknown contract_id.
    /// In this case you should look for matching contract metadata in positions.
    /// The opposite is also true: contract metadata for positions can be in order status messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Metadata2.ContractMetadata> ContractMetadata {
      get { return contractMetadata_; }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 20;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Id of an account for this order status.
    /// Some fields and nested messages of OrderStatus message may be different
    /// for different accounts for the same order (i.e. same order_id).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 2048) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "compound_order_structure" field.</summary>
    public const int CompoundOrderStructureFieldNumber = 21;
    private global::Order2.CompoundOrderStructure compoundOrderStructure_;
    /// <summary>
    /// If the order is part of a compound order then this field describe the structure of the compound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CompoundOrderStructure CompoundOrderStructure {
      get { return compoundOrderStructure_; }
      set {
        compoundOrderStructure_ = value;
      }
    }

    /// <summary>Field number for the "hang_count" field.</summary>
    public const int HangCountFieldNumber = 22;
    private readonly static uint HangCountDefaultValue = 0;

    private uint hangCount_;
    /// <summary>
    /// The number of active (not resolved) hangs on this synthetic strategy order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HangCount {
      get { if ((_hasBits0 & 4096) != 0) { return hangCount_; } else { return HangCountDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        hangCount_ = value;
      }
    }
    /// <summary>Gets whether the "hang_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHangCount {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "hang_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHangCount() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "strategy_properties" field.</summary>
    public const int StrategyPropertiesFieldNumber = 23;
    private global::Strategy2.SyntheticStrategyProperties strategyProperties_;
    /// <summary>
    /// Synthetic order's outright properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.SyntheticStrategyProperties StrategyProperties {
      get { return strategyProperties_; }
      set {
        strategyProperties_ = value;
      }
    }

    /// <summary>Field number for the "cross_transaction_id" field.</summary>
    public const int CrossTransactionIdFieldNumber = 37;
    private readonly static string CrossTransactionIdDefaultValue = "";

    private string crossTransactionId_;
    /// <summary>
    /// Cross transaction ID assigned by exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CrossTransactionId {
      get { return crossTransactionId_ ?? CrossTransactionIdDefaultValue; }
      set {
        crossTransactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cross_transaction_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCrossTransactionId {
      get { return crossTransactionId_ != null; }
    }
    /// <summary>Clears the value of the "cross_transaction_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCrossTransactionId() {
      crossTransactionId_ = null;
    }

    /// <summary>Field number for the "exchange_extra_attributes" field.</summary>
    public const int ExchangeExtraAttributesFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_exchangeExtraAttributes_codec
        = pb::FieldCodec.ForMessage(306, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> exchangeExtraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// Exchange specific extra attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExchangeExtraAttributes {
      get { return exchangeExtraAttributes_; }
    }

    /// <summary>Field number for the "fill_commission" field.</summary>
    public const int FillCommissionFieldNumber = 39;
    private global::Order2.Commission fillCommission_;
    /// <summary>
    /// Cumulative commission charged for the order fills.
    /// CQG trade routing system might not provide this information for some contracts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.Commission FillCommission {
      get { return fillCommission_; }
      set {
        fillCommission_ = value;
      }
    }

    /// <summary>Field number for the "route_cl_order_id" field.</summary>
    public const int RouteClOrderIdFieldNumber = 40;
    private readonly static string RouteClOrderIdDefaultValue = "";

    private string routeClOrderId_;
    /// <summary>
    /// Order identifier assigned by server when sending the order to execution system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RouteClOrderId {
      get { return routeClOrderId_ ?? RouteClOrderIdDefaultValue; }
      set {
        routeClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "route_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRouteClOrderId {
      get { return routeClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "route_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRouteClOrderId() {
      routeClOrderId_ = null;
    }

    /// <summary>Field number for the "mifid_execution_decision" field.</summary>
    public const int MifidExecutionDecisionFieldNumber = 41;
    private readonly static string MifidExecutionDecisionDefaultValue = "";

    private string mifidExecutionDecision_;
    /// <summary>
    /// Actual value of MiFID Execution Within Firm associated with
    /// initial or acknowledged modify order request of this order chain for execution in this account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidExecutionDecision {
      get { return mifidExecutionDecision_ ?? MifidExecutionDecisionDefaultValue; }
      set {
        mifidExecutionDecision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecision {
      get { return mifidExecutionDecision_ != null; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecision() {
      mifidExecutionDecision_ = null;
    }

    /// <summary>Field number for the "mifid_execution_decision_is_algo" field.</summary>
    public const int MifidExecutionDecisionIsAlgoFieldNumber = 42;
    private readonly static bool MifidExecutionDecisionIsAlgoDefaultValue = false;

    private bool mifidExecutionDecisionIsAlgo_;
    /// <summary>
    /// Indicates whether MiFID Execution decision identifies a person (false) or algorithm (true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MifidExecutionDecisionIsAlgo {
      get { if ((_hasBits0 & 65536) != 0) { return mifidExecutionDecisionIsAlgo_; } else { return MifidExecutionDecisionIsAlgoDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        mifidExecutionDecisionIsAlgo_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision_is_algo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecisionIsAlgo {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision_is_algo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecisionIsAlgo() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "mifid_investment_decision" field.</summary>
    public const int MifidInvestmentDecisionFieldNumber = 43;
    private readonly static string MifidInvestmentDecisionDefaultValue = "";

    private string mifidInvestmentDecision_;
    /// <summary>
    /// Actual value of MiFID Investment Decision Within Firm associated with
    /// initial or acknowledged modify order request of this order chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidInvestmentDecision {
      get { return mifidInvestmentDecision_ ?? MifidInvestmentDecisionDefaultValue; }
      set {
        mifidInvestmentDecision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecision {
      get { return mifidInvestmentDecision_ != null; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecision() {
      mifidInvestmentDecision_ = null;
    }

    /// <summary>Field number for the "mifid_investment_decision_is_algo" field.</summary>
    public const int MifidInvestmentDecisionIsAlgoFieldNumber = 44;
    private readonly static bool MifidInvestmentDecisionIsAlgoDefaultValue = false;

    private bool mifidInvestmentDecisionIsAlgo_;
    /// <summary>
    /// Indicates whether MiFID investment decision identifies a person (false) or algorithm (true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MifidInvestmentDecisionIsAlgo {
      get { if ((_hasBits0 & 131072) != 0) { return mifidInvestmentDecisionIsAlgo_; } else { return MifidInvestmentDecisionIsAlgoDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        mifidInvestmentDecisionIsAlgo_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision_is_algo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecisionIsAlgo {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision_is_algo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecisionIsAlgo() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "sender_location_id" field.</summary>
    public const int SenderLocationIdFieldNumber = 45;
    private readonly static string SenderLocationIdDefaultValue = "";

    private string senderLocationId_;
    /// <summary>
    /// Message originator location (i.e. geographic location and/or desk, trader etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SenderLocationId {
      get { return senderLocationId_ ?? SenderLocationIdDefaultValue; }
      set {
        senderLocationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_location_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSenderLocationId {
      get { return senderLocationId_ != null; }
    }
    /// <summary>Clears the value of the "sender_location_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSenderLocationId() {
      senderLocationId_ = null;
    }

    /// <summary>Field number for the "sender_operator_id" field.</summary>
    public const int SenderOperatorIdFieldNumber = 46;
    private readonly static string SenderOperatorIdDefaultValue = "";

    private string senderOperatorId_;
    /// <summary>
    /// Message originator identifier (desk, trader etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SenderOperatorId {
      get { return senderOperatorId_ ?? SenderOperatorIdDefaultValue; }
      set {
        senderOperatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_operator_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSenderOperatorId {
      get { return senderOperatorId_ != null; }
    }
    /// <summary>Clears the value of the "sender_operator_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSenderOperatorId() {
      senderOperatorId_ = null;
    }

    /// <summary>Field number for the "operator_id" field.</summary>
    public const int OperatorIdFieldNumber = 47;
    private readonly static string OperatorIdDefaultValue = "";

    private string operatorId_;
    /// <summary>
    /// Applied effective value of message originator identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OperatorId {
      get { return operatorId_ ?? OperatorIdDefaultValue; }
      set {
        operatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "operator_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperatorId {
      get { return operatorId_ != null; }
    }
    /// <summary>Clears the value of the "operator_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperatorId() {
      operatorId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subscriptionIds_.Equals(other.subscriptionIds_)) return false;
      if (IsSnapshot != other.IsSnapshot) return false;
      if (Status != other.Status) return false;
      if (OrderId != other.OrderId) return false;
      if (ChainOrderId != other.ChainOrderId) return false;
      if (ExecOrderId != other.ExecOrderId) return false;
      if (DetailedDomOrderId != other.DetailedDomOrderId) return false;
      if (StatusUtcTime != other.StatusUtcTime) return false;
      if (!object.Equals(StatusUtcTimestamp, other.StatusUtcTimestamp)) return false;
      if (SubmissionUtcTime != other.SubmissionUtcTime) return false;
      if (!object.Equals(SubmissionUtcTimestamp, other.SubmissionUtcTimestamp)) return false;
      if (Uint32FillQty != other.Uint32FillQty) return false;
      if (!object.Equals(FillQty, other.FillQty)) return false;
      if (FillCnt != other.FillCnt) return false;
      if (ScaledAvgFillPrice != other.ScaledAvgFillPrice) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPriceCorrect, other.AvgFillPriceCorrect)) return false;
      if (ActiveAtUtcTime != other.ActiveAtUtcTime) return false;
      if (!object.Equals(ActiveAtUtcTimestamp, other.ActiveAtUtcTimestamp)) return false;
      if (Uint32RemainingQty != other.Uint32RemainingQty) return false;
      if (!object.Equals(RemainingQty, other.RemainingQty)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      if(!transactionStatuses_.Equals(other.transactionStatuses_)) return false;
      if (!object.Equals(RejectUtcTimestamp, other.RejectUtcTimestamp)) return false;
      if (RejectMessage != other.RejectMessage) return false;
      if (!object.Equals(CancelUtcTimestamp, other.CancelUtcTimestamp)) return false;
      if (!object.Equals(FillUtcTimestamp, other.FillUtcTimestamp)) return false;
      if (HasFillWithModifiedQty != other.HasFillWithModifiedQty) return false;
      if (HasFillWithModifiedPrice != other.HasFillWithModifiedPrice) return false;
      if (EnteredByUser != other.EnteredByUser) return false;
      if (FirstStatementDate != other.FirstStatementDate) return false;
      if (LastStatementDate != other.LastStatementDate) return false;
      if(!contractMetadata_.Equals(other.contractMetadata_)) return false;
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(CompoundOrderStructure, other.CompoundOrderStructure)) return false;
      if (HangCount != other.HangCount) return false;
      if (!object.Equals(StrategyProperties, other.StrategyProperties)) return false;
      if (CrossTransactionId != other.CrossTransactionId) return false;
      if(!exchangeExtraAttributes_.Equals(other.exchangeExtraAttributes_)) return false;
      if (!object.Equals(FillCommission, other.FillCommission)) return false;
      if (RouteClOrderId != other.RouteClOrderId) return false;
      if (MifidExecutionDecision != other.MifidExecutionDecision) return false;
      if (MifidExecutionDecisionIsAlgo != other.MifidExecutionDecisionIsAlgo) return false;
      if (MifidInvestmentDecision != other.MifidInvestmentDecision) return false;
      if (MifidInvestmentDecisionIsAlgo != other.MifidInvestmentDecisionIsAlgo) return false;
      if (SenderLocationId != other.SenderLocationId) return false;
      if (SenderOperatorId != other.SenderOperatorId) return false;
      if (OperatorId != other.OperatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subscriptionIds_.GetHashCode();
      if (HasIsSnapshot) hash ^= IsSnapshot.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasChainOrderId) hash ^= ChainOrderId.GetHashCode();
      if (HasExecOrderId) hash ^= ExecOrderId.GetHashCode();
      if (HasDetailedDomOrderId) hash ^= DetailedDomOrderId.GetHashCode();
      if (HasStatusUtcTime) hash ^= StatusUtcTime.GetHashCode();
      if (statusUtcTimestamp_ != null) hash ^= StatusUtcTimestamp.GetHashCode();
      if (HasSubmissionUtcTime) hash ^= SubmissionUtcTime.GetHashCode();
      if (submissionUtcTimestamp_ != null) hash ^= SubmissionUtcTimestamp.GetHashCode();
      if (HasUint32FillQty) hash ^= Uint32FillQty.GetHashCode();
      if (fillQty_ != null) hash ^= FillQty.GetHashCode();
      if (HasFillCnt) hash ^= FillCnt.GetHashCode();
      if (HasScaledAvgFillPrice) hash ^= ScaledAvgFillPrice.GetHashCode();
      if (HasAvgFillPriceCorrect) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPriceCorrect);
      if (HasActiveAtUtcTime) hash ^= ActiveAtUtcTime.GetHashCode();
      if (activeAtUtcTimestamp_ != null) hash ^= ActiveAtUtcTimestamp.GetHashCode();
      if (HasUint32RemainingQty) hash ^= Uint32RemainingQty.GetHashCode();
      if (remainingQty_ != null) hash ^= RemainingQty.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      hash ^= transactionStatuses_.GetHashCode();
      if (rejectUtcTimestamp_ != null) hash ^= RejectUtcTimestamp.GetHashCode();
      if (HasRejectMessage) hash ^= RejectMessage.GetHashCode();
      if (cancelUtcTimestamp_ != null) hash ^= CancelUtcTimestamp.GetHashCode();
      if (fillUtcTimestamp_ != null) hash ^= FillUtcTimestamp.GetHashCode();
      if (HasHasFillWithModifiedQty) hash ^= HasFillWithModifiedQty.GetHashCode();
      if (HasHasFillWithModifiedPrice) hash ^= HasFillWithModifiedPrice.GetHashCode();
      if (HasEnteredByUser) hash ^= EnteredByUser.GetHashCode();
      if (HasFirstStatementDate) hash ^= FirstStatementDate.GetHashCode();
      if (HasLastStatementDate) hash ^= LastStatementDate.GetHashCode();
      hash ^= contractMetadata_.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (compoundOrderStructure_ != null) hash ^= CompoundOrderStructure.GetHashCode();
      if (HasHangCount) hash ^= HangCount.GetHashCode();
      if (strategyProperties_ != null) hash ^= StrategyProperties.GetHashCode();
      if (HasCrossTransactionId) hash ^= CrossTransactionId.GetHashCode();
      hash ^= exchangeExtraAttributes_.GetHashCode();
      if (fillCommission_ != null) hash ^= FillCommission.GetHashCode();
      if (HasRouteClOrderId) hash ^= RouteClOrderId.GetHashCode();
      if (HasMifidExecutionDecision) hash ^= MifidExecutionDecision.GetHashCode();
      if (HasMifidExecutionDecisionIsAlgo) hash ^= MifidExecutionDecisionIsAlgo.GetHashCode();
      if (HasMifidInvestmentDecision) hash ^= MifidInvestmentDecision.GetHashCode();
      if (HasMifidInvestmentDecisionIsAlgo) hash ^= MifidInvestmentDecisionIsAlgo.GetHashCode();
      if (HasSenderLocationId) hash ^= SenderLocationId.GetHashCode();
      if (HasSenderOperatorId) hash ^= SenderOperatorId.GetHashCode();
      if (HasOperatorId) hash ^= OperatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      subscriptionIds_.WriteTo(output, _repeated_subscriptionIds_codec);
      if (HasIsSnapshot) {
        output.WriteRawTag(16);
        output.WriteBool(IsSnapshot);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
      if (HasOrderId) {
        output.WriteRawTag(34);
        output.WriteString(OrderId);
      }
      if (HasChainOrderId) {
        output.WriteRawTag(42);
        output.WriteString(ChainOrderId);
      }
      if (HasExecOrderId) {
        output.WriteRawTag(50);
        output.WriteString(ExecOrderId);
      }
      if (HasStatusUtcTime) {
        output.WriteRawTag(56);
        output.WriteSInt64(StatusUtcTime);
      }
      if (HasSubmissionUtcTime) {
        output.WriteRawTag(64);
        output.WriteSInt64(SubmissionUtcTime);
      }
      if (HasUint32FillQty) {
        output.WriteRawTag(72);
        output.WriteUInt32(Uint32FillQty);
      }
      if (HasFillCnt) {
        output.WriteRawTag(80);
        output.WriteUInt32(FillCnt);
      }
      if (HasScaledAvgFillPrice) {
        output.WriteRawTag(88);
        output.WriteSInt64(ScaledAvgFillPrice);
      }
      if (HasActiveAtUtcTime) {
        output.WriteRawTag(96);
        output.WriteSInt64(ActiveAtUtcTime);
      }
      if (HasUint32RemainingQty) {
        output.WriteRawTag(104);
        output.WriteUInt32(Uint32RemainingQty);
      }
      if (order_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Order);
      }
      transactionStatuses_.WriteTo(output, _repeated_transactionStatuses_codec);
      if (HasEnteredByUser) {
        output.WriteRawTag(130, 1);
        output.WriteString(EnteredByUser);
      }
      if (HasFirstStatementDate) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(FirstStatementDate);
      }
      if (HasLastStatementDate) {
        output.WriteRawTag(144, 1);
        output.WriteSInt64(LastStatementDate);
      }
      contractMetadata_.WriteTo(output, _repeated_contractMetadata_codec);
      if (HasAccountId) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(AccountId);
      }
      if (compoundOrderStructure_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CompoundOrderStructure);
      }
      if (HasHangCount) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(HangCount);
      }
      if (strategyProperties_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(StrategyProperties);
      }
      if (statusUtcTimestamp_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(StatusUtcTimestamp);
      }
      if (submissionUtcTimestamp_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SubmissionUtcTimestamp);
      }
      if (activeAtUtcTimestamp_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ActiveAtUtcTimestamp);
      }
      if (HasAvgFillPriceCorrect) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(AvgFillPriceCorrect);
      }
      if (fillQty_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(FillQty);
      }
      if (remainingQty_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(RemainingQty);
      }
      if (rejectUtcTimestamp_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(RejectUtcTimestamp);
      }
      if (HasRejectMessage) {
        output.WriteRawTag(250, 1);
        output.WriteString(RejectMessage);
      }
      if (cancelUtcTimestamp_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CancelUtcTimestamp);
      }
      if (fillUtcTimestamp_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(FillUtcTimestamp);
      }
      if (HasHasFillWithModifiedQty) {
        output.WriteRawTag(144, 2);
        output.WriteBool(HasFillWithModifiedQty);
      }
      if (HasHasFillWithModifiedPrice) {
        output.WriteRawTag(152, 2);
        output.WriteBool(HasFillWithModifiedPrice);
      }
      if (HasDetailedDomOrderId) {
        output.WriteRawTag(162, 2);
        output.WriteString(DetailedDomOrderId);
      }
      if (HasCrossTransactionId) {
        output.WriteRawTag(170, 2);
        output.WriteString(CrossTransactionId);
      }
      exchangeExtraAttributes_.WriteTo(output, _repeated_exchangeExtraAttributes_codec);
      if (fillCommission_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(FillCommission);
      }
      if (HasRouteClOrderId) {
        output.WriteRawTag(194, 2);
        output.WriteString(RouteClOrderId);
      }
      if (HasMifidExecutionDecision) {
        output.WriteRawTag(202, 2);
        output.WriteString(MifidExecutionDecision);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        output.WriteRawTag(208, 2);
        output.WriteBool(MifidExecutionDecisionIsAlgo);
      }
      if (HasMifidInvestmentDecision) {
        output.WriteRawTag(218, 2);
        output.WriteString(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        output.WriteRawTag(224, 2);
        output.WriteBool(MifidInvestmentDecisionIsAlgo);
      }
      if (HasSenderLocationId) {
        output.WriteRawTag(234, 2);
        output.WriteString(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        output.WriteRawTag(242, 2);
        output.WriteString(SenderOperatorId);
      }
      if (HasOperatorId) {
        output.WriteRawTag(250, 2);
        output.WriteString(OperatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      subscriptionIds_.WriteTo(ref output, _repeated_subscriptionIds_codec);
      if (HasIsSnapshot) {
        output.WriteRawTag(16);
        output.WriteBool(IsSnapshot);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
      if (HasOrderId) {
        output.WriteRawTag(34);
        output.WriteString(OrderId);
      }
      if (HasChainOrderId) {
        output.WriteRawTag(42);
        output.WriteString(ChainOrderId);
      }
      if (HasExecOrderId) {
        output.WriteRawTag(50);
        output.WriteString(ExecOrderId);
      }
      if (HasStatusUtcTime) {
        output.WriteRawTag(56);
        output.WriteSInt64(StatusUtcTime);
      }
      if (HasSubmissionUtcTime) {
        output.WriteRawTag(64);
        output.WriteSInt64(SubmissionUtcTime);
      }
      if (HasUint32FillQty) {
        output.WriteRawTag(72);
        output.WriteUInt32(Uint32FillQty);
      }
      if (HasFillCnt) {
        output.WriteRawTag(80);
        output.WriteUInt32(FillCnt);
      }
      if (HasScaledAvgFillPrice) {
        output.WriteRawTag(88);
        output.WriteSInt64(ScaledAvgFillPrice);
      }
      if (HasActiveAtUtcTime) {
        output.WriteRawTag(96);
        output.WriteSInt64(ActiveAtUtcTime);
      }
      if (HasUint32RemainingQty) {
        output.WriteRawTag(104);
        output.WriteUInt32(Uint32RemainingQty);
      }
      if (order_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Order);
      }
      transactionStatuses_.WriteTo(ref output, _repeated_transactionStatuses_codec);
      if (HasEnteredByUser) {
        output.WriteRawTag(130, 1);
        output.WriteString(EnteredByUser);
      }
      if (HasFirstStatementDate) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(FirstStatementDate);
      }
      if (HasLastStatementDate) {
        output.WriteRawTag(144, 1);
        output.WriteSInt64(LastStatementDate);
      }
      contractMetadata_.WriteTo(ref output, _repeated_contractMetadata_codec);
      if (HasAccountId) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(AccountId);
      }
      if (compoundOrderStructure_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CompoundOrderStructure);
      }
      if (HasHangCount) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(HangCount);
      }
      if (strategyProperties_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(StrategyProperties);
      }
      if (statusUtcTimestamp_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(StatusUtcTimestamp);
      }
      if (submissionUtcTimestamp_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SubmissionUtcTimestamp);
      }
      if (activeAtUtcTimestamp_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ActiveAtUtcTimestamp);
      }
      if (HasAvgFillPriceCorrect) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(AvgFillPriceCorrect);
      }
      if (fillQty_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(FillQty);
      }
      if (remainingQty_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(RemainingQty);
      }
      if (rejectUtcTimestamp_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(RejectUtcTimestamp);
      }
      if (HasRejectMessage) {
        output.WriteRawTag(250, 1);
        output.WriteString(RejectMessage);
      }
      if (cancelUtcTimestamp_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CancelUtcTimestamp);
      }
      if (fillUtcTimestamp_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(FillUtcTimestamp);
      }
      if (HasHasFillWithModifiedQty) {
        output.WriteRawTag(144, 2);
        output.WriteBool(HasFillWithModifiedQty);
      }
      if (HasHasFillWithModifiedPrice) {
        output.WriteRawTag(152, 2);
        output.WriteBool(HasFillWithModifiedPrice);
      }
      if (HasDetailedDomOrderId) {
        output.WriteRawTag(162, 2);
        output.WriteString(DetailedDomOrderId);
      }
      if (HasCrossTransactionId) {
        output.WriteRawTag(170, 2);
        output.WriteString(CrossTransactionId);
      }
      exchangeExtraAttributes_.WriteTo(ref output, _repeated_exchangeExtraAttributes_codec);
      if (fillCommission_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(FillCommission);
      }
      if (HasRouteClOrderId) {
        output.WriteRawTag(194, 2);
        output.WriteString(RouteClOrderId);
      }
      if (HasMifidExecutionDecision) {
        output.WriteRawTag(202, 2);
        output.WriteString(MifidExecutionDecision);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        output.WriteRawTag(208, 2);
        output.WriteBool(MifidExecutionDecisionIsAlgo);
      }
      if (HasMifidInvestmentDecision) {
        output.WriteRawTag(218, 2);
        output.WriteString(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        output.WriteRawTag(224, 2);
        output.WriteBool(MifidInvestmentDecisionIsAlgo);
      }
      if (HasSenderLocationId) {
        output.WriteRawTag(234, 2);
        output.WriteString(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        output.WriteRawTag(242, 2);
        output.WriteString(SenderOperatorId);
      }
      if (HasOperatorId) {
        output.WriteRawTag(250, 2);
        output.WriteString(OperatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += subscriptionIds_.CalculateSize(_repeated_subscriptionIds_codec);
      if (HasIsSnapshot) {
        size += 1 + 1;
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasChainOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainOrderId);
      }
      if (HasExecOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecOrderId);
      }
      if (HasDetailedDomOrderId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DetailedDomOrderId);
      }
      if (HasStatusUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StatusUtcTime);
      }
      if (statusUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusUtcTimestamp);
      }
      if (HasSubmissionUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SubmissionUtcTime);
      }
      if (submissionUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubmissionUtcTimestamp);
      }
      if (HasUint32FillQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32FillQty);
      }
      if (fillQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillQty);
      }
      if (HasFillCnt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FillCnt);
      }
      if (HasScaledAvgFillPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledAvgFillPrice);
      }
      if (HasAvgFillPriceCorrect) {
        size += 2 + 8;
      }
      if (HasActiveAtUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ActiveAtUtcTime);
      }
      if (activeAtUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActiveAtUtcTimestamp);
      }
      if (HasUint32RemainingQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32RemainingQty);
      }
      if (remainingQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemainingQty);
      }
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      size += transactionStatuses_.CalculateSize(_repeated_transactionStatuses_codec);
      if (rejectUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RejectUtcTimestamp);
      }
      if (HasRejectMessage) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectMessage);
      }
      if (cancelUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CancelUtcTimestamp);
      }
      if (fillUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillUtcTimestamp);
      }
      if (HasHasFillWithModifiedQty) {
        size += 2 + 1;
      }
      if (HasHasFillWithModifiedPrice) {
        size += 2 + 1;
      }
      if (HasEnteredByUser) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EnteredByUser);
      }
      if (HasFirstStatementDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(FirstStatementDate);
      }
      if (HasLastStatementDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(LastStatementDate);
      }
      size += contractMetadata_.CalculateSize(_repeated_contractMetadata_codec);
      if (HasAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (compoundOrderStructure_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CompoundOrderStructure);
      }
      if (HasHangCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HangCount);
      }
      if (strategyProperties_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrategyProperties);
      }
      if (HasCrossTransactionId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CrossTransactionId);
      }
      size += exchangeExtraAttributes_.CalculateSize(_repeated_exchangeExtraAttributes_codec);
      if (fillCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillCommission);
      }
      if (HasRouteClOrderId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RouteClOrderId);
      }
      if (HasMifidExecutionDecision) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidExecutionDecision);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        size += 2 + 1;
      }
      if (HasMifidInvestmentDecision) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        size += 2 + 1;
      }
      if (HasSenderLocationId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SenderOperatorId);
      }
      if (HasOperatorId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OperatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderStatus other) {
      if (other == null) {
        return;
      }
      subscriptionIds_.Add(other.subscriptionIds_);
      if (other.HasIsSnapshot) {
        IsSnapshot = other.IsSnapshot;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasChainOrderId) {
        ChainOrderId = other.ChainOrderId;
      }
      if (other.HasExecOrderId) {
        ExecOrderId = other.ExecOrderId;
      }
      if (other.HasDetailedDomOrderId) {
        DetailedDomOrderId = other.DetailedDomOrderId;
      }
      if (other.HasStatusUtcTime) {
        StatusUtcTime = other.StatusUtcTime;
      }
      if (other.statusUtcTimestamp_ != null) {
        if (statusUtcTimestamp_ == null) {
          StatusUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        StatusUtcTimestamp.MergeFrom(other.StatusUtcTimestamp);
      }
      if (other.HasSubmissionUtcTime) {
        SubmissionUtcTime = other.SubmissionUtcTime;
      }
      if (other.submissionUtcTimestamp_ != null) {
        if (submissionUtcTimestamp_ == null) {
          SubmissionUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        SubmissionUtcTimestamp.MergeFrom(other.SubmissionUtcTimestamp);
      }
      if (other.HasUint32FillQty) {
        Uint32FillQty = other.Uint32FillQty;
      }
      if (other.fillQty_ != null) {
        if (fillQty_ == null) {
          FillQty = new global::Cqg.Decimal();
        }
        FillQty.MergeFrom(other.FillQty);
      }
      if (other.HasFillCnt) {
        FillCnt = other.FillCnt;
      }
      if (other.HasScaledAvgFillPrice) {
        ScaledAvgFillPrice = other.ScaledAvgFillPrice;
      }
      if (other.HasAvgFillPriceCorrect) {
        AvgFillPriceCorrect = other.AvgFillPriceCorrect;
      }
      if (other.HasActiveAtUtcTime) {
        ActiveAtUtcTime = other.ActiveAtUtcTime;
      }
      if (other.activeAtUtcTimestamp_ != null) {
        if (activeAtUtcTimestamp_ == null) {
          ActiveAtUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        ActiveAtUtcTimestamp.MergeFrom(other.ActiveAtUtcTimestamp);
      }
      if (other.HasUint32RemainingQty) {
        Uint32RemainingQty = other.Uint32RemainingQty;
      }
      if (other.remainingQty_ != null) {
        if (remainingQty_ == null) {
          RemainingQty = new global::Cqg.Decimal();
        }
        RemainingQty.MergeFrom(other.RemainingQty);
      }
      if (other.order_ != null) {
        if (order_ == null) {
          Order = new global::Order2.Order();
        }
        Order.MergeFrom(other.Order);
      }
      transactionStatuses_.Add(other.transactionStatuses_);
      if (other.rejectUtcTimestamp_ != null) {
        if (rejectUtcTimestamp_ == null) {
          RejectUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        RejectUtcTimestamp.MergeFrom(other.RejectUtcTimestamp);
      }
      if (other.HasRejectMessage) {
        RejectMessage = other.RejectMessage;
      }
      if (other.cancelUtcTimestamp_ != null) {
        if (cancelUtcTimestamp_ == null) {
          CancelUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        CancelUtcTimestamp.MergeFrom(other.CancelUtcTimestamp);
      }
      if (other.fillUtcTimestamp_ != null) {
        if (fillUtcTimestamp_ == null) {
          FillUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        FillUtcTimestamp.MergeFrom(other.FillUtcTimestamp);
      }
      if (other.HasHasFillWithModifiedQty) {
        HasFillWithModifiedQty = other.HasFillWithModifiedQty;
      }
      if (other.HasHasFillWithModifiedPrice) {
        HasFillWithModifiedPrice = other.HasFillWithModifiedPrice;
      }
      if (other.HasEnteredByUser) {
        EnteredByUser = other.EnteredByUser;
      }
      if (other.HasFirstStatementDate) {
        FirstStatementDate = other.FirstStatementDate;
      }
      if (other.HasLastStatementDate) {
        LastStatementDate = other.LastStatementDate;
      }
      contractMetadata_.Add(other.contractMetadata_);
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.compoundOrderStructure_ != null) {
        if (compoundOrderStructure_ == null) {
          CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
        }
        CompoundOrderStructure.MergeFrom(other.CompoundOrderStructure);
      }
      if (other.HasHangCount) {
        HangCount = other.HangCount;
      }
      if (other.strategyProperties_ != null) {
        if (strategyProperties_ == null) {
          StrategyProperties = new global::Strategy2.SyntheticStrategyProperties();
        }
        StrategyProperties.MergeFrom(other.StrategyProperties);
      }
      if (other.HasCrossTransactionId) {
        CrossTransactionId = other.CrossTransactionId;
      }
      exchangeExtraAttributes_.Add(other.exchangeExtraAttributes_);
      if (other.fillCommission_ != null) {
        if (fillCommission_ == null) {
          FillCommission = new global::Order2.Commission();
        }
        FillCommission.MergeFrom(other.FillCommission);
      }
      if (other.HasRouteClOrderId) {
        RouteClOrderId = other.RouteClOrderId;
      }
      if (other.HasMifidExecutionDecision) {
        MifidExecutionDecision = other.MifidExecutionDecision;
      }
      if (other.HasMifidExecutionDecisionIsAlgo) {
        MifidExecutionDecisionIsAlgo = other.MifidExecutionDecisionIsAlgo;
      }
      if (other.HasMifidInvestmentDecision) {
        MifidInvestmentDecision = other.MifidInvestmentDecision;
      }
      if (other.HasMifidInvestmentDecisionIsAlgo) {
        MifidInvestmentDecisionIsAlgo = other.MifidInvestmentDecisionIsAlgo;
      }
      if (other.HasSenderLocationId) {
        SenderLocationId = other.SenderLocationId;
      }
      if (other.HasSenderOperatorId) {
        SenderOperatorId = other.SenderOperatorId;
      }
      if (other.HasOperatorId) {
        OperatorId = other.OperatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            subscriptionIds_.AddEntriesFrom(input, _repeated_subscriptionIds_codec);
            break;
          }
          case 16: {
            IsSnapshot = input.ReadBool();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
          case 34: {
            OrderId = input.ReadString();
            break;
          }
          case 42: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 50: {
            ExecOrderId = input.ReadString();
            break;
          }
          case 56: {
            StatusUtcTime = input.ReadSInt64();
            break;
          }
          case 64: {
            SubmissionUtcTime = input.ReadSInt64();
            break;
          }
          case 72: {
            Uint32FillQty = input.ReadUInt32();
            break;
          }
          case 80: {
            FillCnt = input.ReadUInt32();
            break;
          }
          case 88: {
            ScaledAvgFillPrice = input.ReadSInt64();
            break;
          }
          case 96: {
            ActiveAtUtcTime = input.ReadSInt64();
            break;
          }
          case 104: {
            Uint32RemainingQty = input.ReadUInt32();
            break;
          }
          case 114: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 122: {
            transactionStatuses_.AddEntriesFrom(input, _repeated_transactionStatuses_codec);
            break;
          }
          case 130: {
            EnteredByUser = input.ReadString();
            break;
          }
          case 136: {
            FirstStatementDate = input.ReadSInt64();
            break;
          }
          case 144: {
            LastStatementDate = input.ReadSInt64();
            break;
          }
          case 154: {
            contractMetadata_.AddEntriesFrom(input, _repeated_contractMetadata_codec);
            break;
          }
          case 160: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 170: {
            if (compoundOrderStructure_ == null) {
              CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
            }
            input.ReadMessage(CompoundOrderStructure);
            break;
          }
          case 176: {
            HangCount = input.ReadUInt32();
            break;
          }
          case 186: {
            if (strategyProperties_ == null) {
              StrategyProperties = new global::Strategy2.SyntheticStrategyProperties();
            }
            input.ReadMessage(StrategyProperties);
            break;
          }
          case 194: {
            if (statusUtcTimestamp_ == null) {
              StatusUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(StatusUtcTimestamp);
            break;
          }
          case 202: {
            if (submissionUtcTimestamp_ == null) {
              SubmissionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SubmissionUtcTimestamp);
            break;
          }
          case 210: {
            if (activeAtUtcTimestamp_ == null) {
              ActiveAtUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActiveAtUtcTimestamp);
            break;
          }
          case 217: {
            AvgFillPriceCorrect = input.ReadDouble();
            break;
          }
          case 226: {
            if (fillQty_ == null) {
              FillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(FillQty);
            break;
          }
          case 234: {
            if (remainingQty_ == null) {
              RemainingQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(RemainingQty);
            break;
          }
          case 242: {
            if (rejectUtcTimestamp_ == null) {
              RejectUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(RejectUtcTimestamp);
            break;
          }
          case 250: {
            RejectMessage = input.ReadString();
            break;
          }
          case 258: {
            if (cancelUtcTimestamp_ == null) {
              CancelUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(CancelUtcTimestamp);
            break;
          }
          case 266: {
            if (fillUtcTimestamp_ == null) {
              FillUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(FillUtcTimestamp);
            break;
          }
          case 272: {
            HasFillWithModifiedQty = input.ReadBool();
            break;
          }
          case 280: {
            HasFillWithModifiedPrice = input.ReadBool();
            break;
          }
          case 290: {
            DetailedDomOrderId = input.ReadString();
            break;
          }
          case 298: {
            CrossTransactionId = input.ReadString();
            break;
          }
          case 306: {
            exchangeExtraAttributes_.AddEntriesFrom(input, _repeated_exchangeExtraAttributes_codec);
            break;
          }
          case 314: {
            if (fillCommission_ == null) {
              FillCommission = new global::Order2.Commission();
            }
            input.ReadMessage(FillCommission);
            break;
          }
          case 322: {
            RouteClOrderId = input.ReadString();
            break;
          }
          case 330: {
            MifidExecutionDecision = input.ReadString();
            break;
          }
          case 336: {
            MifidExecutionDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 346: {
            MifidInvestmentDecision = input.ReadString();
            break;
          }
          case 352: {
            MifidInvestmentDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 362: {
            SenderLocationId = input.ReadString();
            break;
          }
          case 370: {
            SenderOperatorId = input.ReadString();
            break;
          }
          case 378: {
            OperatorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            subscriptionIds_.AddEntriesFrom(ref input, _repeated_subscriptionIds_codec);
            break;
          }
          case 16: {
            IsSnapshot = input.ReadBool();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
          case 34: {
            OrderId = input.ReadString();
            break;
          }
          case 42: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 50: {
            ExecOrderId = input.ReadString();
            break;
          }
          case 56: {
            StatusUtcTime = input.ReadSInt64();
            break;
          }
          case 64: {
            SubmissionUtcTime = input.ReadSInt64();
            break;
          }
          case 72: {
            Uint32FillQty = input.ReadUInt32();
            break;
          }
          case 80: {
            FillCnt = input.ReadUInt32();
            break;
          }
          case 88: {
            ScaledAvgFillPrice = input.ReadSInt64();
            break;
          }
          case 96: {
            ActiveAtUtcTime = input.ReadSInt64();
            break;
          }
          case 104: {
            Uint32RemainingQty = input.ReadUInt32();
            break;
          }
          case 114: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 122: {
            transactionStatuses_.AddEntriesFrom(ref input, _repeated_transactionStatuses_codec);
            break;
          }
          case 130: {
            EnteredByUser = input.ReadString();
            break;
          }
          case 136: {
            FirstStatementDate = input.ReadSInt64();
            break;
          }
          case 144: {
            LastStatementDate = input.ReadSInt64();
            break;
          }
          case 154: {
            contractMetadata_.AddEntriesFrom(ref input, _repeated_contractMetadata_codec);
            break;
          }
          case 160: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 170: {
            if (compoundOrderStructure_ == null) {
              CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
            }
            input.ReadMessage(CompoundOrderStructure);
            break;
          }
          case 176: {
            HangCount = input.ReadUInt32();
            break;
          }
          case 186: {
            if (strategyProperties_ == null) {
              StrategyProperties = new global::Strategy2.SyntheticStrategyProperties();
            }
            input.ReadMessage(StrategyProperties);
            break;
          }
          case 194: {
            if (statusUtcTimestamp_ == null) {
              StatusUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(StatusUtcTimestamp);
            break;
          }
          case 202: {
            if (submissionUtcTimestamp_ == null) {
              SubmissionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SubmissionUtcTimestamp);
            break;
          }
          case 210: {
            if (activeAtUtcTimestamp_ == null) {
              ActiveAtUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActiveAtUtcTimestamp);
            break;
          }
          case 217: {
            AvgFillPriceCorrect = input.ReadDouble();
            break;
          }
          case 226: {
            if (fillQty_ == null) {
              FillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(FillQty);
            break;
          }
          case 234: {
            if (remainingQty_ == null) {
              RemainingQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(RemainingQty);
            break;
          }
          case 242: {
            if (rejectUtcTimestamp_ == null) {
              RejectUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(RejectUtcTimestamp);
            break;
          }
          case 250: {
            RejectMessage = input.ReadString();
            break;
          }
          case 258: {
            if (cancelUtcTimestamp_ == null) {
              CancelUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(CancelUtcTimestamp);
            break;
          }
          case 266: {
            if (fillUtcTimestamp_ == null) {
              FillUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(FillUtcTimestamp);
            break;
          }
          case 272: {
            HasFillWithModifiedQty = input.ReadBool();
            break;
          }
          case 280: {
            HasFillWithModifiedPrice = input.ReadBool();
            break;
          }
          case 290: {
            DetailedDomOrderId = input.ReadString();
            break;
          }
          case 298: {
            CrossTransactionId = input.ReadString();
            break;
          }
          case 306: {
            exchangeExtraAttributes_.AddEntriesFrom(ref input, _repeated_exchangeExtraAttributes_codec);
            break;
          }
          case 314: {
            if (fillCommission_ == null) {
              FillCommission = new global::Order2.Commission();
            }
            input.ReadMessage(FillCommission);
            break;
          }
          case 322: {
            RouteClOrderId = input.ReadString();
            break;
          }
          case 330: {
            MifidExecutionDecision = input.ReadString();
            break;
          }
          case 336: {
            MifidExecutionDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 346: {
            MifidInvestmentDecision = input.ReadString();
            break;
          }
          case 352: {
            MifidInvestmentDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 362: {
            SenderLocationId = input.ReadString();
            break;
          }
          case 370: {
            SenderOperatorId = input.ReadString();
            break;
          }
          case 378: {
            OperatorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Status of a specific transaction.
  /// All attributes are at the transaction moment.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TransactionStatus : pb::IMessage<TransactionStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransactionStatus> _parser = new pb::MessageParser<TransactionStatus>(() => new TransactionStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TransactionStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionStatus(TransactionStatus other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      status_ = other.status_;
      transId_ = other.transId_;
      transUtcTime_ = other.transUtcTime_;
      transUtcTimestamp_ = other.transUtcTimestamp_ != null ? other.transUtcTimestamp_.Clone() : null;
      refTransId_ = other.refTransId_;
      origClOrderId_ = other.origClOrderId_;
      clOrderId_ = other.clOrderId_;
      uint32FillQty_ = other.uint32FillQty_;
      fillQty_ = other.fillQty_ != null ? other.fillQty_.Clone() : null;
      scaledFillPrice_ = other.scaledFillPrice_;
      trades_ = other.trades_.Clone();
      strategyLegFills_ = other.strategyLegFills_.Clone();
      syntheticHang_ = other.syntheticHang_ != null ? other.syntheticHang_.Clone() : null;
      uint32PrevOrderQty_ = other.uint32PrevOrderQty_;
      prevOrderQty_ = other.prevOrderQty_ != null ? other.prevOrderQty_.Clone() : null;
      uint32OrderQty_ = other.uint32OrderQty_;
      orderQty_ = other.orderQty_ != null ? other.orderQty_.Clone() : null;
      scaledPrevLimitPrice_ = other.scaledPrevLimitPrice_;
      scaledLimitPrice_ = other.scaledLimitPrice_;
      scaledPrevStopPrice_ = other.scaledPrevStopPrice_;
      scaledStopPrice_ = other.scaledStopPrice_;
      uint32PrevVisibleQty_ = other.uint32PrevVisibleQty_;
      prevVisibleQty_ = other.prevVisibleQty_ != null ? other.prevVisibleQty_.Clone() : null;
      uint32VisibleQty_ = other.uint32VisibleQty_;
      visibleQty_ = other.visibleQty_ != null ? other.visibleQty_.Clone() : null;
      uint32PrevMinVisibleQty_ = other.uint32PrevMinVisibleQty_;
      prevMinVisibleQty_ = other.prevMinVisibleQty_ != null ? other.prevMinVisibleQty_.Clone() : null;
      uint32MinVisibleQty_ = other.uint32MinVisibleQty_;
      minVisibleQty_ = other.minVisibleQty_ != null ? other.minVisibleQty_.Clone() : null;
      uint32PrevFillQty_ = other.uint32PrevFillQty_;
      prevFillQty_ = other.prevFillQty_ != null ? other.prevFillQty_.Clone() : null;
      scaledPrevFillPrice_ = other.scaledPrevFillPrice_;
      prevOrderType_ = other.prevOrderType_;
      orderType_ = other.orderType_;
      prevExecInstructions_ = other.prevExecInstructions_.Clone();
      execInstructions_ = other.execInstructions_.Clone();
      prevDuration_ = other.prevDuration_;
      duration_ = other.duration_;
      prevGoodThruDate_ = other.prevGoodThruDate_;
      goodThruDate_ = other.goodThruDate_;
      rejectCode_ = other.rejectCode_;
      fillCounterparty_ = other.fillCounterparty_;
      routeClOrderId_ = other.routeClOrderId_;
      textMessage_ = other.textMessage_;
      prevGoodThruUtcTime_ = other.prevGoodThruUtcTime_;
      prevGoodThruUtcTimestamp_ = other.prevGoodThruUtcTimestamp_ != null ? other.prevGoodThruUtcTimestamp_.Clone() : null;
      goodThruUtcTime_ = other.goodThruUtcTime_;
      goodThruUtcTimestamp_ = other.goodThruUtcTimestamp_ != null ? other.goodThruUtcTimestamp_.Clone() : null;
      isAggressive_ = other.isAggressive_;
      clientRegulatoryAlgorithmId_ = other.clientRegulatoryAlgorithmId_;
      effectiveRegulatoryAlgorithmId_ = other.effectiveRegulatoryAlgorithmId_;
      mifidAlgorithmId_ = other.mifidAlgorithmId_;
      mifidAlgorithmIdType_ = other.mifidAlgorithmIdType_;
      mifidAppliedAlgorithmId_ = other.mifidAppliedAlgorithmId_;
      mifidAppliedAlgorithmIdType_ = other.mifidAppliedAlgorithmIdType_;
      mifidExecutionDecision_ = other.mifidExecutionDecision_;
      mifidExecutionDecisionIsAlgo_ = other.mifidExecutionDecisionIsAlgo_;
      openCloseEffect_ = other.openCloseEffect_;
      speculationType_ = other.speculationType_;
      obsoletePrevDiscretionaryOffset_ = other.obsoletePrevDiscretionaryOffset_;
      obsoleteDiscretionaryOffset_ = other.obsoleteDiscretionaryOffset_;
      fillCommission_ = other.fillCommission_ != null ? other.fillCommission_.Clone() : null;
      mifidInvestmentDecision_ = other.mifidInvestmentDecision_;
      mifidInvestmentDecisionIsAlgo_ = other.mifidInvestmentDecisionIsAlgo_;
      executionSourceCode_ = other.executionSourceCode_;
      isAutomated_ = other.isAutomated_;
      tradeMatchId_ = other.tradeMatchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionStatus Clone() {
      return new TransactionStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    /// <summary>
    /// This field is associated with shared_1.TransactionStatus.Status enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 2;
    private readonly static ulong TransIdDefaultValue = 0UL;

    private ulong transId_;
    /// <summary>
    /// Order transaction identifier.
    /// For all transactions within order chain it is guaranteed that:
    /// 1) Transaction identifier is unique.
    /// 2) The later transaction has greater transaction identifier than the earlier one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TransId {
      get { if ((_hasBits0 & 2) != 0) { return transId_; } else { return TransIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        transId_ = value;
      }
    }
    /// <summary>Gets whether the "trans_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trans_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trans_utc_time" field.</summary>
    public const int TransUtcTimeFieldNumber = 3;
    private readonly static long TransUtcTimeDefaultValue = 0L;

    private long transUtcTime_;
    /// <summary>
    /// Transaction time assigned by server (UTC).
    /// Note: use trans_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return transUtcTime_; } else { return TransUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        transUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "trans_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trans_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "trans_utc_timestamp" field.</summary>
    public const int TransUtcTimestampFieldNumber = 40;
    private global::Google.Protobuf.Timestamp transUtcTimestamp_;
    /// <summary>
    /// Transaction time assigned by server (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp TransUtcTimestamp {
      get { return transUtcTimestamp_; }
      set {
        transUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "ref_trans_id" field.</summary>
    public const int RefTransIdFieldNumber = 4;
    private readonly static ulong RefTransIdDefaultValue = 0UL;

    private ulong refTransId_;
    /// <summary>
    /// Reference transaction ID to the previous fill transaction for a bust, cancel or correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RefTransId {
      get { if ((_hasBits0 & 8) != 0) { return refTransId_; } else { return RefTransIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        refTransId_ = value;
      }
    }
    /// <summary>Gets whether the "ref_trans_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefTransId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ref_trans_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefTransId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "orig_cl_order_id" field.</summary>
    public const int OrigClOrderIdFieldNumber = 5;
    private readonly static string OrigClOrderIdDefaultValue = "";

    private string origClOrderId_;
    /// <summary>
    /// If order is modified, this client order ID of the order before modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigClOrderId {
      get { return origClOrderId_ ?? OrigClOrderIdDefaultValue; }
      set {
        origClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orig_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigClOrderId {
      get { return origClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "orig_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigClOrderId() {
      origClOrderId_ = null;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 6;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of the order at the transaction moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "uint32_fill_qty" field.</summary>
    public const int Uint32FillQtyFieldNumber = 7;
    private readonly static uint Uint32FillQtyDefaultValue = 0;

    private uint uint32FillQty_;
    /// <summary>
    /// Note: use fill_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32FillQty {
      get { if ((_hasBits0 & 16) != 0) { return uint32FillQty_; } else { return Uint32FillQtyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uint32FillQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_fill_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32FillQty {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uint32_fill_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32FillQty() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "fill_qty" field.</summary>
    public const int FillQtyFieldNumber = 52;
    private global::Cqg.Decimal fillQty_;
    /// <summary>
    /// Filled quantity for fill transactions or updated quantity for fill correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal FillQty {
      get { return fillQty_; }
      set {
        fillQty_ = value;
      }
    }

    /// <summary>Field number for the "scaled_fill_price" field.</summary>
    public const int ScaledFillPriceFieldNumber = 8;
    private readonly static long ScaledFillPriceDefaultValue = 0L;

    private long scaledFillPrice_;
    /// <summary>
    /// Fill price for fill transactions or updated price for fill correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledFillPrice {
      get { if ((_hasBits0 & 32) != 0) { return scaledFillPrice_; } else { return ScaledFillPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledFillPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_fill_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledFillPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_fill_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledFillPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Order2.Trade> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(74, global::Order2.Trade.Parser);
    private readonly pbc::RepeatedField<global::Order2.Trade> trades_ = new pbc::RepeatedField<global::Order2.Trade>();
    /// <summary>
    /// List of specific per leg trades (more than one for strategies).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.Trade> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "strategy_leg_fills" field.</summary>
    public const int StrategyLegFillsFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Strategy2.StrategyLegFill> _repeated_strategyLegFills_codec
        = pb::FieldCodec.ForMessage(306, global::Strategy2.StrategyLegFill.Parser);
    private readonly pbc::RepeatedField<global::Strategy2.StrategyLegFill> strategyLegFills_ = new pbc::RepeatedField<global::Strategy2.StrategyLegFill>();
    /// <summary>
    /// List of leg order fills that contribute to a synthetic strategy order fill.
    /// Present if the transaction is of type FILL or FILL_CORRECT and this order is a synthetic strategy order.
    /// Mutually exclusive with 'trade' attribute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Strategy2.StrategyLegFill> StrategyLegFills {
      get { return strategyLegFills_; }
    }

    /// <summary>Field number for the "synthetic_hang" field.</summary>
    public const int SyntheticHangFieldNumber = 39;
    private global::Strategy2.SyntheticHang syntheticHang_;
    /// <summary>
    /// Details of the hang
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.SyntheticHang SyntheticHang {
      get { return syntheticHang_; }
      set {
        syntheticHang_ = value;
      }
    }

    /// <summary>Field number for the "uint32_prev_order_qty" field.</summary>
    public const int Uint32PrevOrderQtyFieldNumber = 10;
    private readonly static uint Uint32PrevOrderQtyDefaultValue = 0;

    private uint uint32PrevOrderQty_;
    /// <summary>
    /// Note: use prev_order_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32PrevOrderQty {
      get { if ((_hasBits0 & 64) != 0) { return uint32PrevOrderQty_; } else { return Uint32PrevOrderQtyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        uint32PrevOrderQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_prev_order_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32PrevOrderQty {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "uint32_prev_order_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32PrevOrderQty() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "prev_order_qty" field.</summary>
    public const int PrevOrderQtyFieldNumber = 53;
    private global::Cqg.Decimal prevOrderQty_;
    /// <summary>
    /// If order is modified, this is the previous order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal PrevOrderQty {
      get { return prevOrderQty_; }
      set {
        prevOrderQty_ = value;
      }
    }

    /// <summary>Field number for the "uint32_order_qty" field.</summary>
    public const int Uint32OrderQtyFieldNumber = 11;
    private readonly static uint Uint32OrderQtyDefaultValue = 0;

    private uint uint32OrderQty_;
    /// <summary>
    /// Note: use order_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32OrderQty {
      get { if ((_hasBits0 & 128) != 0) { return uint32OrderQty_; } else { return Uint32OrderQtyDefaultValue; } }
      set {
        _hasBits0 |= 128;
        uint32OrderQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_order_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32OrderQty {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "uint32_order_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32OrderQty() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "order_qty" field.</summary>
    public const int OrderQtyFieldNumber = 54;
    private global::Cqg.Decimal orderQty_;
    /// <summary>
    /// If order is modified, this is the updated order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = value;
      }
    }

    /// <summary>Field number for the "scaled_prev_limit_price" field.</summary>
    public const int ScaledPrevLimitPriceFieldNumber = 12;
    private readonly static long ScaledPrevLimitPriceDefaultValue = 0L;

    private long scaledPrevLimitPrice_;
    /// <summary>
    /// If order is modified, this is the previous order limit price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledPrevLimitPrice {
      get { if ((_hasBits0 & 256) != 0) { return scaledPrevLimitPrice_; } else { return ScaledPrevLimitPriceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scaledPrevLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_prev_limit_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledPrevLimitPrice {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scaled_prev_limit_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledPrevLimitPrice() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "scaled_limit_price" field.</summary>
    public const int ScaledLimitPriceFieldNumber = 13;
    private readonly static long ScaledLimitPriceDefaultValue = 0L;

    private long scaledLimitPrice_;
    /// <summary>
    /// If order is modified, this is the updated order limit price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledLimitPrice {
      get { if ((_hasBits0 & 512) != 0) { return scaledLimitPrice_; } else { return ScaledLimitPriceDefaultValue; } }
      set {
        _hasBits0 |= 512;
        scaledLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_limit_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledLimitPrice {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "scaled_limit_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledLimitPrice() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "scaled_prev_stop_price" field.</summary>
    public const int ScaledPrevStopPriceFieldNumber = 14;
    private readonly static long ScaledPrevStopPriceDefaultValue = 0L;

    private long scaledPrevStopPrice_;
    /// <summary>
    /// If order is modified, this is the previous order stop price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledPrevStopPrice {
      get { if ((_hasBits0 & 1024) != 0) { return scaledPrevStopPrice_; } else { return ScaledPrevStopPriceDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        scaledPrevStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_prev_stop_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledPrevStopPrice {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "scaled_prev_stop_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledPrevStopPrice() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "scaled_stop_price" field.</summary>
    public const int ScaledStopPriceFieldNumber = 15;
    private readonly static long ScaledStopPriceDefaultValue = 0L;

    private long scaledStopPrice_;
    /// <summary>
    /// If order is modified, this is the updated order stop price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledStopPrice {
      get { if ((_hasBits0 & 2048) != 0) { return scaledStopPrice_; } else { return ScaledStopPriceDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        scaledStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_stop_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledStopPrice {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "scaled_stop_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledStopPrice() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "uint32_prev_visible_qty" field.</summary>
    public const int Uint32PrevVisibleQtyFieldNumber = 16;
    private readonly static uint Uint32PrevVisibleQtyDefaultValue = 0;

    private uint uint32PrevVisibleQty_;
    /// <summary>
    /// Note: use prev_visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32PrevVisibleQty {
      get { if ((_hasBits0 & 4096) != 0) { return uint32PrevVisibleQty_; } else { return Uint32PrevVisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        uint32PrevVisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_prev_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32PrevVisibleQty {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "uint32_prev_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32PrevVisibleQty() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "prev_visible_qty" field.</summary>
    public const int PrevVisibleQtyFieldNumber = 55;
    private global::Cqg.Decimal prevVisibleQty_;
    /// <summary>
    /// If order is modified, this is the previous visible order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal PrevVisibleQty {
      get { return prevVisibleQty_; }
      set {
        prevVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "uint32_visible_qty" field.</summary>
    public const int Uint32VisibleQtyFieldNumber = 17;
    private readonly static uint Uint32VisibleQtyDefaultValue = 0;

    private uint uint32VisibleQty_;
    /// <summary>
    /// Note: use visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32VisibleQty {
      get { if ((_hasBits0 & 8192) != 0) { return uint32VisibleQty_; } else { return Uint32VisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        uint32VisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32VisibleQty {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "uint32_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32VisibleQty() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "visible_qty" field.</summary>
    public const int VisibleQtyFieldNumber = 56;
    private global::Cqg.Decimal visibleQty_;
    /// <summary>
    /// If order is modified, this is the updated visible order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal VisibleQty {
      get { return visibleQty_; }
      set {
        visibleQty_ = value;
      }
    }

    /// <summary>Field number for the "uint32_prev_min_visible_qty" field.</summary>
    public const int Uint32PrevMinVisibleQtyFieldNumber = 18;
    private readonly static uint Uint32PrevMinVisibleQtyDefaultValue = 0;

    private uint uint32PrevMinVisibleQty_;
    /// <summary>
    /// Note: use prev_min_visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32PrevMinVisibleQty {
      get { if ((_hasBits0 & 16384) != 0) { return uint32PrevMinVisibleQty_; } else { return Uint32PrevMinVisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        uint32PrevMinVisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_prev_min_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32PrevMinVisibleQty {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "uint32_prev_min_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32PrevMinVisibleQty() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "prev_min_visible_qty" field.</summary>
    public const int PrevMinVisibleQtyFieldNumber = 57;
    private global::Cqg.Decimal prevMinVisibleQty_;
    /// <summary>
    /// If order is modified, this is the previous min visible order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal PrevMinVisibleQty {
      get { return prevMinVisibleQty_; }
      set {
        prevMinVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "uint32_min_visible_qty" field.</summary>
    public const int Uint32MinVisibleQtyFieldNumber = 19;
    private readonly static uint Uint32MinVisibleQtyDefaultValue = 0;

    private uint uint32MinVisibleQty_;
    /// <summary>
    /// Note: use min_visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32MinVisibleQty {
      get { if ((_hasBits0 & 32768) != 0) { return uint32MinVisibleQty_; } else { return Uint32MinVisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        uint32MinVisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_min_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32MinVisibleQty {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "uint32_min_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32MinVisibleQty() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "min_visible_qty" field.</summary>
    public const int MinVisibleQtyFieldNumber = 58;
    private global::Cqg.Decimal minVisibleQty_;
    /// <summary>
    /// If order is modified, this is the updated min visible order size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal MinVisibleQty {
      get { return minVisibleQty_; }
      set {
        minVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "uint32_prev_fill_qty" field.</summary>
    public const int Uint32PrevFillQtyFieldNumber = 20;
    private readonly static uint Uint32PrevFillQtyDefaultValue = 0;

    private uint uint32PrevFillQty_;
    /// <summary>
    /// Note: use prev_fill_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32PrevFillQty {
      get { if ((_hasBits0 & 65536) != 0) { return uint32PrevFillQty_; } else { return Uint32PrevFillQtyDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        uint32PrevFillQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_prev_fill_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32PrevFillQty {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "uint32_prev_fill_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32PrevFillQty() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "prev_fill_qty" field.</summary>
    public const int PrevFillQtyFieldNumber = 59;
    private global::Cqg.Decimal prevFillQty_;
    /// <summary>
    /// If fill is modified, the previous size is reported here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal PrevFillQty {
      get { return prevFillQty_; }
      set {
        prevFillQty_ = value;
      }
    }

    /// <summary>Field number for the "scaled_prev_fill_price" field.</summary>
    public const int ScaledPrevFillPriceFieldNumber = 21;
    private readonly static long ScaledPrevFillPriceDefaultValue = 0L;

    private long scaledPrevFillPrice_;
    /// <summary>
    /// If fill is modified, the previous price is reported here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledPrevFillPrice {
      get { if ((_hasBits0 & 131072) != 0) { return scaledPrevFillPrice_; } else { return ScaledPrevFillPriceDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        scaledPrevFillPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_prev_fill_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledPrevFillPrice {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "scaled_prev_fill_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledPrevFillPrice() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "prev_order_type" field.</summary>
    public const int PrevOrderTypeFieldNumber = 22;
    private readonly static uint PrevOrderTypeDefaultValue = 0;

    private uint prevOrderType_;
    /// <summary>
    /// If order is modified, this is the previous order type.
    /// This field is associated with Order.OrderType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PrevOrderType {
      get { if ((_hasBits0 & 262144) != 0) { return prevOrderType_; } else { return PrevOrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        prevOrderType_ = value;
      }
    }
    /// <summary>Gets whether the "prev_order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrevOrderType {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "prev_order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrevOrderType() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 23;
    private readonly static uint OrderTypeDefaultValue = 0;

    private uint orderType_;
    /// <summary>
    /// If order is modified, this is the updated order type.
    /// This field is associated with Order.OrderType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OrderType {
      get { if ((_hasBits0 & 524288) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderType {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderType() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "prev_exec_instructions" field.</summary>
    public const int PrevExecInstructionsFieldNumber = 24;
    private static readonly pb::FieldCodec<uint> _repeated_prevExecInstructions_codec
        = pb::FieldCodec.ForUInt32(192);
    private readonly pbc::RepeatedField<uint> prevExecInstructions_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// If order is modified, these are the previous exec instructions.
    /// This field is associated with Order.ExecInstruction enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> PrevExecInstructions {
      get { return prevExecInstructions_; }
    }

    /// <summary>Field number for the "exec_instructions" field.</summary>
    public const int ExecInstructionsFieldNumber = 25;
    private static readonly pb::FieldCodec<uint> _repeated_execInstructions_codec
        = pb::FieldCodec.ForUInt32(200);
    private readonly pbc::RepeatedField<uint> execInstructions_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// If order is modified, these are the updated exec instructions.
    /// This field is associated with Order.ExecInstruction enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> ExecInstructions {
      get { return execInstructions_; }
    }

    /// <summary>Field number for the "prev_duration" field.</summary>
    public const int PrevDurationFieldNumber = 26;
    private readonly static uint PrevDurationDefaultValue = 0;

    private uint prevDuration_;
    /// <summary>
    /// If order is modified, this is the previous duration.
    /// This field is associated with Order.Duration enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PrevDuration {
      get { if ((_hasBits0 & 1048576) != 0) { return prevDuration_; } else { return PrevDurationDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        prevDuration_ = value;
      }
    }
    /// <summary>Gets whether the "prev_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrevDuration {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "prev_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrevDuration() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 27;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    /// <summary>
    /// If order is modified, this is the new duration.
    /// This field is associated with Order.Duration enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Duration {
      get { if ((_hasBits0 & 2097152) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "prev_good_thru_date" field.</summary>
    public const int PrevGoodThruDateFieldNumber = 28;
    private readonly static long PrevGoodThruDateDefaultValue = 0L;

    private long prevGoodThruDate_;
    /// <summary>
    /// If order is modified, this is the previous date then the order should expire  (see Order.good_thru_date).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PrevGoodThruDate {
      get { if ((_hasBits0 & 4194304) != 0) { return prevGoodThruDate_; } else { return PrevGoodThruDateDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        prevGoodThruDate_ = value;
      }
    }
    /// <summary>Gets whether the "prev_good_thru_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrevGoodThruDate {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "prev_good_thru_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrevGoodThruDate() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "good_thru_date" field.</summary>
    public const int GoodThruDateFieldNumber = 29;
    private readonly static long GoodThruDateDefaultValue = 0L;

    private long goodThruDate_;
    /// <summary>
    /// If order is modified, this is the updated date then the order should expire  (see Order.good_thru_date).
    /// The value of duration field must be set to GTD when this date value is specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruDate {
      get { if ((_hasBits0 & 8388608) != 0) { return goodThruDate_; } else { return GoodThruDateDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        goodThruDate_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruDate {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruDate() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "reject_code" field.</summary>
    public const int RejectCodeFieldNumber = 30;
    private readonly static uint RejectCodeDefaultValue = 0;

    private uint rejectCode_;
    /// <summary>
    /// If order request is rejected, this is rejection code.
    /// See https://help.cqg.com/apihelp/#!Documents/rejectcodesfixconnectorderrouting.htm for the list of values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RejectCode {
      get { if ((_hasBits0 & 16777216) != 0) { return rejectCode_; } else { return RejectCodeDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        rejectCode_ = value;
      }
    }
    /// <summary>Gets whether the "reject_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRejectCode {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "reject_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRejectCode() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "fill_counterparty" field.</summary>
    public const int FillCounterpartyFieldNumber = 31;
    private readonly static string FillCounterpartyDefaultValue = "";

    private string fillCounterparty_;
    /// <summary>
    /// If present, identifies the counterpart of the order fill, as reported by the execution system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FillCounterparty {
      get { return fillCounterparty_ ?? FillCounterpartyDefaultValue; }
      set {
        fillCounterparty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fill_counterparty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFillCounterparty {
      get { return fillCounterparty_ != null; }
    }
    /// <summary>Clears the value of the "fill_counterparty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFillCounterparty() {
      fillCounterparty_ = null;
    }

    /// <summary>Field number for the "route_cl_order_id" field.</summary>
    public const int RouteClOrderIdFieldNumber = 32;
    private readonly static string RouteClOrderIdDefaultValue = "";

    private string routeClOrderId_;
    /// <summary>
    /// Order identifier assigned by server when sending the order to execution system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RouteClOrderId {
      get { return routeClOrderId_ ?? RouteClOrderIdDefaultValue; }
      set {
        routeClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "route_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRouteClOrderId {
      get { return routeClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "route_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRouteClOrderId() {
      routeClOrderId_ = null;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 33;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Additional transaction details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "prev_good_thru_utc_time" field.</summary>
    public const int PrevGoodThruUtcTimeFieldNumber = 34;
    private readonly static long PrevGoodThruUtcTimeDefaultValue = 0L;

    private long prevGoodThruUtcTime_;
    /// <summary>
    /// If order is modified, this is the previous time then the order should expire  (see Order.good_thru_utc_time).
    /// Note: use prev_good_thru_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PrevGoodThruUtcTime {
      get { if ((_hasBits0 & 33554432) != 0) { return prevGoodThruUtcTime_; } else { return PrevGoodThruUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        prevGoodThruUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "prev_good_thru_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrevGoodThruUtcTime {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "prev_good_thru_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrevGoodThruUtcTime() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "prev_good_thru_utc_timestamp" field.</summary>
    public const int PrevGoodThruUtcTimestampFieldNumber = 41;
    private global::Google.Protobuf.Timestamp prevGoodThruUtcTimestamp_;
    /// <summary>
    /// If order is modified, this is the previous time then the order should expire  (see Order.good_thru_utc_timestamp).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp PrevGoodThruUtcTimestamp {
      get { return prevGoodThruUtcTimestamp_; }
      set {
        prevGoodThruUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "good_thru_utc_time" field.</summary>
    public const int GoodThruUtcTimeFieldNumber = 35;
    private readonly static long GoodThruUtcTimeDefaultValue = 0L;

    private long goodThruUtcTime_;
    /// <summary>
    /// If order is modified, this is the updated time then the order should expire  (see Order.good_thru_utc).
    /// The value of duration field must be set to GTT when this time value is specified.
    /// Note: use good_thru_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruUtcTime {
      get { if ((_hasBits0 & 67108864) != 0) { return goodThruUtcTime_; } else { return GoodThruUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        goodThruUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruUtcTime {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruUtcTime() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "good_thru_utc_timestamp" field.</summary>
    public const int GoodThruUtcTimestampFieldNumber = 42;
    private global::Google.Protobuf.Timestamp goodThruUtcTimestamp_;
    /// <summary>
    /// If order is modified, this is the updated time then the order should expire  (see Order.good_thru_utc).
    /// The value of duration field must be set to GTT when this time value is specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp GoodThruUtcTimestamp {
      get { return goodThruUtcTimestamp_; }
      set {
        goodThruUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_aggressive" field.</summary>
    public const int IsAggressiveFieldNumber = 64;
    private readonly static bool IsAggressiveDefaultValue = false;

    private bool isAggressive_;
    /// <summary>
    /// True if fill was made as aggressive. False if fill was made as passive. Abscence of value means undefined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAggressive {
      get { if ((_hasBits1 & 16) != 0) { return isAggressive_; } else { return IsAggressiveDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isAggressive_ = value;
      }
    }
    /// <summary>Gets whether the "is_aggressive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAggressive {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_aggressive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAggressive() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "client_regulatory_algorithm_id" field.</summary>
    public const int ClientRegulatoryAlgorithmIdFieldNumber = 36;
    private readonly static uint ClientRegulatoryAlgorithmIdDefaultValue = 0;

    private uint clientRegulatoryAlgorithmId_;
    /// <summary>
    /// OrderRequest.client_regulatory_algorithm_id value echoed back from the latest order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClientRegulatoryAlgorithmId {
      get { if ((_hasBits0 & 134217728) != 0) { return clientRegulatoryAlgorithmId_; } else { return ClientRegulatoryAlgorithmIdDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        clientRegulatoryAlgorithmId_ = value;
      }
    }
    /// <summary>Gets whether the "client_regulatory_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientRegulatoryAlgorithmId {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "client_regulatory_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientRegulatoryAlgorithmId() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "effective_regulatory_algorithm_id" field.</summary>
    public const int EffectiveRegulatoryAlgorithmIdFieldNumber = 37;
    private readonly static uint EffectiveRegulatoryAlgorithmIdDefaultValue = 0;

    private uint effectiveRegulatoryAlgorithmId_;
    /// <summary>
    /// Regulatory Algorithm ID actually sent to the exchange for this order, if any.
    /// Will differ from client_regulatory_algorithm_id if any CQG algorithm was applied to the order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EffectiveRegulatoryAlgorithmId {
      get { if ((_hasBits0 & 268435456) != 0) { return effectiveRegulatoryAlgorithmId_; } else { return EffectiveRegulatoryAlgorithmIdDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        effectiveRegulatoryAlgorithmId_ = value;
      }
    }
    /// <summary>Gets whether the "effective_regulatory_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEffectiveRegulatoryAlgorithmId {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "effective_regulatory_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEffectiveRegulatoryAlgorithmId() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "mifid_algorithm_id" field.</summary>
    public const int MifidAlgorithmIdFieldNumber = 43;
    private readonly static string MifidAlgorithmIdDefaultValue = "";

    private string mifidAlgorithmId_;
    /// <summary>
    /// MiFID algorithm ID provided with this order request, contents depend on mifid_algorithm_id_type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidAlgorithmId {
      get { return mifidAlgorithmId_ ?? MifidAlgorithmIdDefaultValue; }
      set {
        mifidAlgorithmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAlgorithmId {
      get { return mifidAlgorithmId_ != null; }
    }
    /// <summary>Clears the value of the "mifid_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAlgorithmId() {
      mifidAlgorithmId_ = null;
    }

    /// <summary>Field number for the "mifid_algorithm_id_type" field.</summary>
    public const int MifidAlgorithmIdTypeFieldNumber = 44;
    private readonly static uint MifidAlgorithmIdTypeDefaultValue = 0;

    private uint mifidAlgorithmIdType_;
    /// <summary>
    /// Defines the type of mifid_algorithm_id reported. One of MiFIDAlgorithmIdType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MifidAlgorithmIdType {
      get { if ((_hasBits0 & 536870912) != 0) { return mifidAlgorithmIdType_; } else { return MifidAlgorithmIdTypeDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        mifidAlgorithmIdType_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_algorithm_id_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAlgorithmIdType {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "mifid_algorithm_id_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAlgorithmIdType() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "mifid_applied_algorithm_id" field.</summary>
    public const int MifidAppliedAlgorithmIdFieldNumber = 45;
    private readonly static string MifidAppliedAlgorithmIdDefaultValue = "";

    private string mifidAppliedAlgorithmId_;
    /// <summary>
    /// The MiFID algorithm ID associated with the order request for execution in this account.
    /// It may have no relation to mifid_algorithm_id, e.g. in case client supplied a mifid_algorithm_id
    /// and then a server-side algorithm was used, its identifier would be applied to the order instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidAppliedAlgorithmId {
      get { return mifidAppliedAlgorithmId_ ?? MifidAppliedAlgorithmIdDefaultValue; }
      set {
        mifidAppliedAlgorithmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_applied_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAppliedAlgorithmId {
      get { return mifidAppliedAlgorithmId_ != null; }
    }
    /// <summary>Clears the value of the "mifid_applied_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAppliedAlgorithmId() {
      mifidAppliedAlgorithmId_ = null;
    }

    /// <summary>Field number for the "mifid_applied_algorithm_id_type" field.</summary>
    public const int MifidAppliedAlgorithmIdTypeFieldNumber = 46;
    private readonly static uint MifidAppliedAlgorithmIdTypeDefaultValue = 0;

    private uint mifidAppliedAlgorithmIdType_;
    /// <summary>
    /// The type of mifid_applied_algorithm_id reported. One of MiFIDAlgorithmIdType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MifidAppliedAlgorithmIdType {
      get { if ((_hasBits0 & 1073741824) != 0) { return mifidAppliedAlgorithmIdType_; } else { return MifidAppliedAlgorithmIdTypeDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        mifidAppliedAlgorithmIdType_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_applied_algorithm_id_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAppliedAlgorithmIdType {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "mifid_applied_algorithm_id_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAppliedAlgorithmIdType() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "mifid_execution_decision" field.</summary>
    public const int MifidExecutionDecisionFieldNumber = 47;
    private readonly static string MifidExecutionDecisionDefaultValue = "";

    private string mifidExecutionDecision_;
    /// <summary>
    /// Actual value of MiFID Execution Within Firm associated with this order for execution in this account,
    /// reflects FCM + route short code mapping if configured.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidExecutionDecision {
      get { return mifidExecutionDecision_ ?? MifidExecutionDecisionDefaultValue; }
      set {
        mifidExecutionDecision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecision {
      get { return mifidExecutionDecision_ != null; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecision() {
      mifidExecutionDecision_ = null;
    }

    /// <summary>Field number for the "mifid_execution_decision_is_algo" field.</summary>
    public const int MifidExecutionDecisionIsAlgoFieldNumber = 67;
    private readonly static bool MifidExecutionDecisionIsAlgoDefaultValue = false;

    private bool mifidExecutionDecisionIsAlgo_;
    /// <summary>
    /// Indicates whether MiFID Execution decision identifies a person (false) or algorithm (true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MifidExecutionDecisionIsAlgo {
      get { if ((_hasBits1 & 64) != 0) { return mifidExecutionDecisionIsAlgo_; } else { return MifidExecutionDecisionIsAlgoDefaultValue; } }
      set {
        _hasBits1 |= 64;
        mifidExecutionDecisionIsAlgo_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision_is_algo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecisionIsAlgo {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision_is_algo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecisionIsAlgo() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "open_close_effect" field.</summary>
    public const int OpenCloseEffectFieldNumber = 48;
    private readonly static uint OpenCloseEffectDefaultValue = 0;

    private uint openCloseEffect_;
    /// <summary>
    /// Open/close effect of the order fill transaction as a result of the corresponding open_close_instruction.
    /// One of OpenCloseInstruction enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OpenCloseEffect {
      get { if ((_hasBits0 & -2147483648) != 0) { return openCloseEffect_; } else { return OpenCloseEffectDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        openCloseEffect_ = value;
      }
    }
    /// <summary>Gets whether the "open_close_effect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenCloseEffect {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "open_close_effect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenCloseEffect() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "speculation_type" field.</summary>
    public const int SpeculationTypeFieldNumber = 49;
    private readonly static uint SpeculationTypeDefaultValue = 0;

    private uint speculationType_;
    /// <summary>
    /// Speculation type of the transaction. One of SpeculationType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeculationType {
      get { if ((_hasBits1 & 1) != 0) { return speculationType_; } else { return SpeculationTypeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        speculationType_ = value;
      }
    }
    /// <summary>Gets whether the "speculation_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeculationType {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "speculation_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeculationType() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "obsolete_prev_discretionary_offset" field.</summary>
    public const int ObsoletePrevDiscretionaryOffsetFieldNumber = 50;
    private readonly static uint ObsoletePrevDiscretionaryOffsetDefaultValue = 0;

    private uint obsoletePrevDiscretionaryOffset_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ObsoletePrevDiscretionaryOffset {
      get { if ((_hasBits1 & 2) != 0) { return obsoletePrevDiscretionaryOffset_; } else { return ObsoletePrevDiscretionaryOffsetDefaultValue; } }
      set {
        _hasBits1 |= 2;
        obsoletePrevDiscretionaryOffset_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_prev_discretionary_offset" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoletePrevDiscretionaryOffset {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_prev_discretionary_offset" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoletePrevDiscretionaryOffset() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "obsolete_discretionary_offset" field.</summary>
    public const int ObsoleteDiscretionaryOffsetFieldNumber = 51;
    private readonly static uint ObsoleteDiscretionaryOffsetDefaultValue = 0;

    private uint obsoleteDiscretionaryOffset_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ObsoleteDiscretionaryOffset {
      get { if ((_hasBits1 & 4) != 0) { return obsoleteDiscretionaryOffset_; } else { return ObsoleteDiscretionaryOffsetDefaultValue; } }
      set {
        _hasBits1 |= 4;
        obsoleteDiscretionaryOffset_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_offset" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryOffset {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_offset" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryOffset() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "fill_commission" field.</summary>
    public const int FillCommissionFieldNumber = 60;
    private global::Order2.Commission fillCommission_;
    /// <summary>
    /// Commission charged for the fill.
    /// CQG trade routing system might not provide this information for some contracts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.Commission FillCommission {
      get { return fillCommission_; }
      set {
        fillCommission_ = value;
      }
    }

    /// <summary>Field number for the "mifid_investment_decision" field.</summary>
    public const int MifidInvestmentDecisionFieldNumber = 61;
    private readonly static string MifidInvestmentDecisionDefaultValue = "";

    private string mifidInvestmentDecision_;
    /// <summary>
    /// Decision Within Firm associated with this order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidInvestmentDecision {
      get { return mifidInvestmentDecision_ ?? MifidInvestmentDecisionDefaultValue; }
      set {
        mifidInvestmentDecision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecision {
      get { return mifidInvestmentDecision_ != null; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecision() {
      mifidInvestmentDecision_ = null;
    }

    /// <summary>Field number for the "mifid_investment_decision_is_algo" field.</summary>
    public const int MifidInvestmentDecisionIsAlgoFieldNumber = 62;
    private readonly static bool MifidInvestmentDecisionIsAlgoDefaultValue = false;

    private bool mifidInvestmentDecisionIsAlgo_;
    /// <summary>
    /// Indicates whether MiFID investment decision identifies a person (false) or algorithm (true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MifidInvestmentDecisionIsAlgo {
      get { if ((_hasBits1 & 8) != 0) { return mifidInvestmentDecisionIsAlgo_; } else { return MifidInvestmentDecisionIsAlgoDefaultValue; } }
      set {
        _hasBits1 |= 8;
        mifidInvestmentDecisionIsAlgo_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision_is_algo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecisionIsAlgo {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision_is_algo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecisionIsAlgo() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 63;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value of the operation.
    /// See Order.execution_source_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    /// <summary>Field number for the "is_automated" field.</summary>
    public const int IsAutomatedFieldNumber = 65;
    private readonly static bool IsAutomatedDefaultValue = false;

    private bool isAutomated_;
    /// <summary>
    /// True if the order with cl_order_id the same as cl_order_id from the
    /// current transaction is automatic, manual (the order was sent after the
    /// user direct action) otherwise.
    /// Different transaction statuses of the same order (or orders in the same
    /// chain, see OrderStatus.chain_order_id) may have different values
    /// of the flag, depending on the nature of the corresponding order action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutomated {
      get { if ((_hasBits1 & 32) != 0) { return isAutomated_; } else { return IsAutomatedDefaultValue; } }
      set {
        _hasBits1 |= 32;
        isAutomated_ = value;
      }
    }
    /// <summary>Gets whether the "is_automated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutomated {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_automated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutomated() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "trade_match_id" field.</summary>
    public const int TradeMatchIdFieldNumber = 66;
    private readonly static string TradeMatchIdDefaultValue = "";

    private string tradeMatchId_;
    /// <summary>
    /// Identifier assigned to a trade by a matching system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeMatchId {
      get { return tradeMatchId_ ?? TradeMatchIdDefaultValue; }
      set {
        tradeMatchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trade_match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeMatchId {
      get { return tradeMatchId_ != null; }
    }
    /// <summary>Clears the value of the "trade_match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeMatchId() {
      tradeMatchId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TransactionStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TransactionStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TransId != other.TransId) return false;
      if (TransUtcTime != other.TransUtcTime) return false;
      if (!object.Equals(TransUtcTimestamp, other.TransUtcTimestamp)) return false;
      if (RefTransId != other.RefTransId) return false;
      if (OrigClOrderId != other.OrigClOrderId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (Uint32FillQty != other.Uint32FillQty) return false;
      if (!object.Equals(FillQty, other.FillQty)) return false;
      if (ScaledFillPrice != other.ScaledFillPrice) return false;
      if(!trades_.Equals(other.trades_)) return false;
      if(!strategyLegFills_.Equals(other.strategyLegFills_)) return false;
      if (!object.Equals(SyntheticHang, other.SyntheticHang)) return false;
      if (Uint32PrevOrderQty != other.Uint32PrevOrderQty) return false;
      if (!object.Equals(PrevOrderQty, other.PrevOrderQty)) return false;
      if (Uint32OrderQty != other.Uint32OrderQty) return false;
      if (!object.Equals(OrderQty, other.OrderQty)) return false;
      if (ScaledPrevLimitPrice != other.ScaledPrevLimitPrice) return false;
      if (ScaledLimitPrice != other.ScaledLimitPrice) return false;
      if (ScaledPrevStopPrice != other.ScaledPrevStopPrice) return false;
      if (ScaledStopPrice != other.ScaledStopPrice) return false;
      if (Uint32PrevVisibleQty != other.Uint32PrevVisibleQty) return false;
      if (!object.Equals(PrevVisibleQty, other.PrevVisibleQty)) return false;
      if (Uint32VisibleQty != other.Uint32VisibleQty) return false;
      if (!object.Equals(VisibleQty, other.VisibleQty)) return false;
      if (Uint32PrevMinVisibleQty != other.Uint32PrevMinVisibleQty) return false;
      if (!object.Equals(PrevMinVisibleQty, other.PrevMinVisibleQty)) return false;
      if (Uint32MinVisibleQty != other.Uint32MinVisibleQty) return false;
      if (!object.Equals(MinVisibleQty, other.MinVisibleQty)) return false;
      if (Uint32PrevFillQty != other.Uint32PrevFillQty) return false;
      if (!object.Equals(PrevFillQty, other.PrevFillQty)) return false;
      if (ScaledPrevFillPrice != other.ScaledPrevFillPrice) return false;
      if (PrevOrderType != other.PrevOrderType) return false;
      if (OrderType != other.OrderType) return false;
      if(!prevExecInstructions_.Equals(other.prevExecInstructions_)) return false;
      if(!execInstructions_.Equals(other.execInstructions_)) return false;
      if (PrevDuration != other.PrevDuration) return false;
      if (Duration != other.Duration) return false;
      if (PrevGoodThruDate != other.PrevGoodThruDate) return false;
      if (GoodThruDate != other.GoodThruDate) return false;
      if (RejectCode != other.RejectCode) return false;
      if (FillCounterparty != other.FillCounterparty) return false;
      if (RouteClOrderId != other.RouteClOrderId) return false;
      if (TextMessage != other.TextMessage) return false;
      if (PrevGoodThruUtcTime != other.PrevGoodThruUtcTime) return false;
      if (!object.Equals(PrevGoodThruUtcTimestamp, other.PrevGoodThruUtcTimestamp)) return false;
      if (GoodThruUtcTime != other.GoodThruUtcTime) return false;
      if (!object.Equals(GoodThruUtcTimestamp, other.GoodThruUtcTimestamp)) return false;
      if (IsAggressive != other.IsAggressive) return false;
      if (ClientRegulatoryAlgorithmId != other.ClientRegulatoryAlgorithmId) return false;
      if (EffectiveRegulatoryAlgorithmId != other.EffectiveRegulatoryAlgorithmId) return false;
      if (MifidAlgorithmId != other.MifidAlgorithmId) return false;
      if (MifidAlgorithmIdType != other.MifidAlgorithmIdType) return false;
      if (MifidAppliedAlgorithmId != other.MifidAppliedAlgorithmId) return false;
      if (MifidAppliedAlgorithmIdType != other.MifidAppliedAlgorithmIdType) return false;
      if (MifidExecutionDecision != other.MifidExecutionDecision) return false;
      if (MifidExecutionDecisionIsAlgo != other.MifidExecutionDecisionIsAlgo) return false;
      if (OpenCloseEffect != other.OpenCloseEffect) return false;
      if (SpeculationType != other.SpeculationType) return false;
      if (ObsoletePrevDiscretionaryOffset != other.ObsoletePrevDiscretionaryOffset) return false;
      if (ObsoleteDiscretionaryOffset != other.ObsoleteDiscretionaryOffset) return false;
      if (!object.Equals(FillCommission, other.FillCommission)) return false;
      if (MifidInvestmentDecision != other.MifidInvestmentDecision) return false;
      if (MifidInvestmentDecisionIsAlgo != other.MifidInvestmentDecisionIsAlgo) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      if (IsAutomated != other.IsAutomated) return false;
      if (TradeMatchId != other.TradeMatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasTransId) hash ^= TransId.GetHashCode();
      if (HasTransUtcTime) hash ^= TransUtcTime.GetHashCode();
      if (transUtcTimestamp_ != null) hash ^= TransUtcTimestamp.GetHashCode();
      if (HasRefTransId) hash ^= RefTransId.GetHashCode();
      if (HasOrigClOrderId) hash ^= OrigClOrderId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasUint32FillQty) hash ^= Uint32FillQty.GetHashCode();
      if (fillQty_ != null) hash ^= FillQty.GetHashCode();
      if (HasScaledFillPrice) hash ^= ScaledFillPrice.GetHashCode();
      hash ^= trades_.GetHashCode();
      hash ^= strategyLegFills_.GetHashCode();
      if (syntheticHang_ != null) hash ^= SyntheticHang.GetHashCode();
      if (HasUint32PrevOrderQty) hash ^= Uint32PrevOrderQty.GetHashCode();
      if (prevOrderQty_ != null) hash ^= PrevOrderQty.GetHashCode();
      if (HasUint32OrderQty) hash ^= Uint32OrderQty.GetHashCode();
      if (orderQty_ != null) hash ^= OrderQty.GetHashCode();
      if (HasScaledPrevLimitPrice) hash ^= ScaledPrevLimitPrice.GetHashCode();
      if (HasScaledLimitPrice) hash ^= ScaledLimitPrice.GetHashCode();
      if (HasScaledPrevStopPrice) hash ^= ScaledPrevStopPrice.GetHashCode();
      if (HasScaledStopPrice) hash ^= ScaledStopPrice.GetHashCode();
      if (HasUint32PrevVisibleQty) hash ^= Uint32PrevVisibleQty.GetHashCode();
      if (prevVisibleQty_ != null) hash ^= PrevVisibleQty.GetHashCode();
      if (HasUint32VisibleQty) hash ^= Uint32VisibleQty.GetHashCode();
      if (visibleQty_ != null) hash ^= VisibleQty.GetHashCode();
      if (HasUint32PrevMinVisibleQty) hash ^= Uint32PrevMinVisibleQty.GetHashCode();
      if (prevMinVisibleQty_ != null) hash ^= PrevMinVisibleQty.GetHashCode();
      if (HasUint32MinVisibleQty) hash ^= Uint32MinVisibleQty.GetHashCode();
      if (minVisibleQty_ != null) hash ^= MinVisibleQty.GetHashCode();
      if (HasUint32PrevFillQty) hash ^= Uint32PrevFillQty.GetHashCode();
      if (prevFillQty_ != null) hash ^= PrevFillQty.GetHashCode();
      if (HasScaledPrevFillPrice) hash ^= ScaledPrevFillPrice.GetHashCode();
      if (HasPrevOrderType) hash ^= PrevOrderType.GetHashCode();
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      hash ^= prevExecInstructions_.GetHashCode();
      hash ^= execInstructions_.GetHashCode();
      if (HasPrevDuration) hash ^= PrevDuration.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasPrevGoodThruDate) hash ^= PrevGoodThruDate.GetHashCode();
      if (HasGoodThruDate) hash ^= GoodThruDate.GetHashCode();
      if (HasRejectCode) hash ^= RejectCode.GetHashCode();
      if (HasFillCounterparty) hash ^= FillCounterparty.GetHashCode();
      if (HasRouteClOrderId) hash ^= RouteClOrderId.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (HasPrevGoodThruUtcTime) hash ^= PrevGoodThruUtcTime.GetHashCode();
      if (prevGoodThruUtcTimestamp_ != null) hash ^= PrevGoodThruUtcTimestamp.GetHashCode();
      if (HasGoodThruUtcTime) hash ^= GoodThruUtcTime.GetHashCode();
      if (goodThruUtcTimestamp_ != null) hash ^= GoodThruUtcTimestamp.GetHashCode();
      if (HasIsAggressive) hash ^= IsAggressive.GetHashCode();
      if (HasClientRegulatoryAlgorithmId) hash ^= ClientRegulatoryAlgorithmId.GetHashCode();
      if (HasEffectiveRegulatoryAlgorithmId) hash ^= EffectiveRegulatoryAlgorithmId.GetHashCode();
      if (HasMifidAlgorithmId) hash ^= MifidAlgorithmId.GetHashCode();
      if (HasMifidAlgorithmIdType) hash ^= MifidAlgorithmIdType.GetHashCode();
      if (HasMifidAppliedAlgorithmId) hash ^= MifidAppliedAlgorithmId.GetHashCode();
      if (HasMifidAppliedAlgorithmIdType) hash ^= MifidAppliedAlgorithmIdType.GetHashCode();
      if (HasMifidExecutionDecision) hash ^= MifidExecutionDecision.GetHashCode();
      if (HasMifidExecutionDecisionIsAlgo) hash ^= MifidExecutionDecisionIsAlgo.GetHashCode();
      if (HasOpenCloseEffect) hash ^= OpenCloseEffect.GetHashCode();
      if (HasSpeculationType) hash ^= SpeculationType.GetHashCode();
      if (HasObsoletePrevDiscretionaryOffset) hash ^= ObsoletePrevDiscretionaryOffset.GetHashCode();
      if (HasObsoleteDiscretionaryOffset) hash ^= ObsoleteDiscretionaryOffset.GetHashCode();
      if (fillCommission_ != null) hash ^= FillCommission.GetHashCode();
      if (HasMifidInvestmentDecision) hash ^= MifidInvestmentDecision.GetHashCode();
      if (HasMifidInvestmentDecisionIsAlgo) hash ^= MifidInvestmentDecisionIsAlgo.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (HasIsAutomated) hash ^= IsAutomated.GetHashCode();
      if (HasTradeMatchId) hash ^= TradeMatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (HasTransId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TransId);
      }
      if (HasTransUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(TransUtcTime);
      }
      if (HasRefTransId) {
        output.WriteRawTag(32);
        output.WriteUInt64(RefTransId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(42);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(50);
        output.WriteString(ClOrderId);
      }
      if (HasUint32FillQty) {
        output.WriteRawTag(56);
        output.WriteUInt32(Uint32FillQty);
      }
      if (HasScaledFillPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledFillPrice);
      }
      trades_.WriteTo(output, _repeated_trades_codec);
      if (HasUint32PrevOrderQty) {
        output.WriteRawTag(80);
        output.WriteUInt32(Uint32PrevOrderQty);
      }
      if (HasUint32OrderQty) {
        output.WriteRawTag(88);
        output.WriteUInt32(Uint32OrderQty);
      }
      if (HasScaledPrevLimitPrice) {
        output.WriteRawTag(96);
        output.WriteSInt64(ScaledPrevLimitPrice);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(104);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledPrevStopPrice) {
        output.WriteRawTag(112);
        output.WriteSInt64(ScaledPrevStopPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(120);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasUint32PrevVisibleQty) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Uint32PrevVisibleQty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32PrevMinVisibleQty) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Uint32PrevMinVisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasUint32PrevFillQty) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Uint32PrevFillQty);
      }
      if (HasScaledPrevFillPrice) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(ScaledPrevFillPrice);
      }
      if (HasPrevOrderType) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PrevOrderType);
      }
      if (HasOrderType) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(OrderType);
      }
      prevExecInstructions_.WriteTo(output, _repeated_prevExecInstructions_codec);
      execInstructions_.WriteTo(output, _repeated_execInstructions_codec);
      if (HasPrevDuration) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(PrevDuration);
      }
      if (HasDuration) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Duration);
      }
      if (HasPrevGoodThruDate) {
        output.WriteRawTag(224, 1);
        output.WriteSInt64(PrevGoodThruDate);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(232, 1);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasRejectCode) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(RejectCode);
      }
      if (HasFillCounterparty) {
        output.WriteRawTag(250, 1);
        output.WriteString(FillCounterparty);
      }
      if (HasRouteClOrderId) {
        output.WriteRawTag(130, 2);
        output.WriteString(RouteClOrderId);
      }
      if (HasTextMessage) {
        output.WriteRawTag(138, 2);
        output.WriteString(TextMessage);
      }
      if (HasPrevGoodThruUtcTime) {
        output.WriteRawTag(144, 2);
        output.WriteSInt64(PrevGoodThruUtcTime);
      }
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(152, 2);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (HasClientRegulatoryAlgorithmId) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ClientRegulatoryAlgorithmId);
      }
      if (HasEffectiveRegulatoryAlgorithmId) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(EffectiveRegulatoryAlgorithmId);
      }
      strategyLegFills_.WriteTo(output, _repeated_strategyLegFills_codec);
      if (syntheticHang_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SyntheticHang);
      }
      if (transUtcTimestamp_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(TransUtcTimestamp);
      }
      if (prevGoodThruUtcTimestamp_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(PrevGoodThruUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasMifidAlgorithmId) {
        output.WriteRawTag(218, 2);
        output.WriteString(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(MifidAlgorithmIdType);
      }
      if (HasMifidAppliedAlgorithmId) {
        output.WriteRawTag(234, 2);
        output.WriteString(MifidAppliedAlgorithmId);
      }
      if (HasMifidAppliedAlgorithmIdType) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(MifidAppliedAlgorithmIdType);
      }
      if (HasMifidExecutionDecision) {
        output.WriteRawTag(250, 2);
        output.WriteString(MifidExecutionDecision);
      }
      if (HasOpenCloseEffect) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(SpeculationType);
      }
      if (HasObsoletePrevDiscretionaryOffset) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(ObsoletePrevDiscretionaryOffset);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (fillQty_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(FillQty);
      }
      if (prevOrderQty_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(PrevOrderQty);
      }
      if (orderQty_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(OrderQty);
      }
      if (prevVisibleQty_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(PrevVisibleQty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(VisibleQty);
      }
      if (prevMinVisibleQty_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(PrevMinVisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(MinVisibleQty);
      }
      if (prevFillQty_ != null) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(PrevFillQty);
      }
      if (fillCommission_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(FillCommission);
      }
      if (HasMifidInvestmentDecision) {
        output.WriteRawTag(234, 3);
        output.WriteString(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        output.WriteRawTag(240, 3);
        output.WriteBool(MifidInvestmentDecisionIsAlgo);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(250, 3);
        output.WriteString(ExecutionSourceCode);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(128, 4);
        output.WriteBool(IsAggressive);
      }
      if (HasIsAutomated) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsAutomated);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(146, 4);
        output.WriteString(TradeMatchId);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        output.WriteRawTag(152, 4);
        output.WriteBool(MifidExecutionDecisionIsAlgo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (HasTransId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TransId);
      }
      if (HasTransUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(TransUtcTime);
      }
      if (HasRefTransId) {
        output.WriteRawTag(32);
        output.WriteUInt64(RefTransId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(42);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(50);
        output.WriteString(ClOrderId);
      }
      if (HasUint32FillQty) {
        output.WriteRawTag(56);
        output.WriteUInt32(Uint32FillQty);
      }
      if (HasScaledFillPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledFillPrice);
      }
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (HasUint32PrevOrderQty) {
        output.WriteRawTag(80);
        output.WriteUInt32(Uint32PrevOrderQty);
      }
      if (HasUint32OrderQty) {
        output.WriteRawTag(88);
        output.WriteUInt32(Uint32OrderQty);
      }
      if (HasScaledPrevLimitPrice) {
        output.WriteRawTag(96);
        output.WriteSInt64(ScaledPrevLimitPrice);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(104);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledPrevStopPrice) {
        output.WriteRawTag(112);
        output.WriteSInt64(ScaledPrevStopPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(120);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasUint32PrevVisibleQty) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Uint32PrevVisibleQty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32PrevMinVisibleQty) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Uint32PrevMinVisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasUint32PrevFillQty) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Uint32PrevFillQty);
      }
      if (HasScaledPrevFillPrice) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(ScaledPrevFillPrice);
      }
      if (HasPrevOrderType) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PrevOrderType);
      }
      if (HasOrderType) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(OrderType);
      }
      prevExecInstructions_.WriteTo(ref output, _repeated_prevExecInstructions_codec);
      execInstructions_.WriteTo(ref output, _repeated_execInstructions_codec);
      if (HasPrevDuration) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(PrevDuration);
      }
      if (HasDuration) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Duration);
      }
      if (HasPrevGoodThruDate) {
        output.WriteRawTag(224, 1);
        output.WriteSInt64(PrevGoodThruDate);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(232, 1);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasRejectCode) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(RejectCode);
      }
      if (HasFillCounterparty) {
        output.WriteRawTag(250, 1);
        output.WriteString(FillCounterparty);
      }
      if (HasRouteClOrderId) {
        output.WriteRawTag(130, 2);
        output.WriteString(RouteClOrderId);
      }
      if (HasTextMessage) {
        output.WriteRawTag(138, 2);
        output.WriteString(TextMessage);
      }
      if (HasPrevGoodThruUtcTime) {
        output.WriteRawTag(144, 2);
        output.WriteSInt64(PrevGoodThruUtcTime);
      }
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(152, 2);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (HasClientRegulatoryAlgorithmId) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ClientRegulatoryAlgorithmId);
      }
      if (HasEffectiveRegulatoryAlgorithmId) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(EffectiveRegulatoryAlgorithmId);
      }
      strategyLegFills_.WriteTo(ref output, _repeated_strategyLegFills_codec);
      if (syntheticHang_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SyntheticHang);
      }
      if (transUtcTimestamp_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(TransUtcTimestamp);
      }
      if (prevGoodThruUtcTimestamp_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(PrevGoodThruUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasMifidAlgorithmId) {
        output.WriteRawTag(218, 2);
        output.WriteString(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(MifidAlgorithmIdType);
      }
      if (HasMifidAppliedAlgorithmId) {
        output.WriteRawTag(234, 2);
        output.WriteString(MifidAppliedAlgorithmId);
      }
      if (HasMifidAppliedAlgorithmIdType) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(MifidAppliedAlgorithmIdType);
      }
      if (HasMifidExecutionDecision) {
        output.WriteRawTag(250, 2);
        output.WriteString(MifidExecutionDecision);
      }
      if (HasOpenCloseEffect) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(SpeculationType);
      }
      if (HasObsoletePrevDiscretionaryOffset) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(ObsoletePrevDiscretionaryOffset);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (fillQty_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(FillQty);
      }
      if (prevOrderQty_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(PrevOrderQty);
      }
      if (orderQty_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(OrderQty);
      }
      if (prevVisibleQty_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(PrevVisibleQty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(VisibleQty);
      }
      if (prevMinVisibleQty_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(PrevMinVisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(MinVisibleQty);
      }
      if (prevFillQty_ != null) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(PrevFillQty);
      }
      if (fillCommission_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(FillCommission);
      }
      if (HasMifidInvestmentDecision) {
        output.WriteRawTag(234, 3);
        output.WriteString(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        output.WriteRawTag(240, 3);
        output.WriteBool(MifidInvestmentDecisionIsAlgo);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(250, 3);
        output.WriteString(ExecutionSourceCode);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(128, 4);
        output.WriteBool(IsAggressive);
      }
      if (HasIsAutomated) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsAutomated);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(146, 4);
        output.WriteString(TradeMatchId);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        output.WriteRawTag(152, 4);
        output.WriteBool(MifidExecutionDecisionIsAlgo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (HasTransId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransId);
      }
      if (HasTransUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransUtcTime);
      }
      if (transUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransUtcTimestamp);
      }
      if (HasRefTransId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RefTransId);
      }
      if (HasOrigClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrigClOrderId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasUint32FillQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32FillQty);
      }
      if (fillQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillQty);
      }
      if (HasScaledFillPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledFillPrice);
      }
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += strategyLegFills_.CalculateSize(_repeated_strategyLegFills_codec);
      if (syntheticHang_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyntheticHang);
      }
      if (HasUint32PrevOrderQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32PrevOrderQty);
      }
      if (prevOrderQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevOrderQty);
      }
      if (HasUint32OrderQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32OrderQty);
      }
      if (orderQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderQty);
      }
      if (HasScaledPrevLimitPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledPrevLimitPrice);
      }
      if (HasScaledLimitPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLimitPrice);
      }
      if (HasScaledPrevStopPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledPrevStopPrice);
      }
      if (HasScaledStopPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledStopPrice);
      }
      if (HasUint32PrevVisibleQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32PrevVisibleQty);
      }
      if (prevVisibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevVisibleQty);
      }
      if (HasUint32VisibleQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32VisibleQty);
      }
      if (visibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisibleQty);
      }
      if (HasUint32PrevMinVisibleQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32PrevMinVisibleQty);
      }
      if (prevMinVisibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevMinVisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32MinVisibleQty);
      }
      if (minVisibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinVisibleQty);
      }
      if (HasUint32PrevFillQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32PrevFillQty);
      }
      if (prevFillQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevFillQty);
      }
      if (HasScaledPrevFillPrice) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ScaledPrevFillPrice);
      }
      if (HasPrevOrderType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrevOrderType);
      }
      if (HasOrderType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OrderType);
      }
      size += prevExecInstructions_.CalculateSize(_repeated_prevExecInstructions_codec);
      size += execInstructions_.CalculateSize(_repeated_execInstructions_codec);
      if (HasPrevDuration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrevDuration);
      }
      if (HasDuration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasPrevGoodThruDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(PrevGoodThruDate);
      }
      if (HasGoodThruDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruDate);
      }
      if (HasRejectCode) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RejectCode);
      }
      if (HasFillCounterparty) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FillCounterparty);
      }
      if (HasRouteClOrderId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RouteClOrderId);
      }
      if (HasTextMessage) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (HasPrevGoodThruUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(PrevGoodThruUtcTime);
      }
      if (prevGoodThruUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrevGoodThruUtcTimestamp);
      }
      if (HasGoodThruUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruUtcTime);
      }
      if (goodThruUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodThruUtcTimestamp);
      }
      if (HasIsAggressive) {
        size += 2 + 1;
      }
      if (HasClientRegulatoryAlgorithmId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClientRegulatoryAlgorithmId);
      }
      if (HasEffectiveRegulatoryAlgorithmId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveRegulatoryAlgorithmId);
      }
      if (HasMifidAlgorithmId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MifidAlgorithmIdType);
      }
      if (HasMifidAppliedAlgorithmId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidAppliedAlgorithmId);
      }
      if (HasMifidAppliedAlgorithmIdType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MifidAppliedAlgorithmIdType);
      }
      if (HasMifidExecutionDecision) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidExecutionDecision);
      }
      if (HasMifidExecutionDecisionIsAlgo) {
        size += 2 + 1;
      }
      if (HasOpenCloseEffect) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpeculationType);
      }
      if (HasObsoletePrevDiscretionaryOffset) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsoletePrevDiscretionaryOffset);
      }
      if (HasObsoleteDiscretionaryOffset) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsoleteDiscretionaryOffset);
      }
      if (fillCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillCommission);
      }
      if (HasMifidInvestmentDecision) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidInvestmentDecision);
      }
      if (HasMifidInvestmentDecisionIsAlgo) {
        size += 2 + 1;
      }
      if (HasExecutionSourceCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (HasIsAutomated) {
        size += 2 + 1;
      }
      if (HasTradeMatchId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeMatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TransactionStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasTransId) {
        TransId = other.TransId;
      }
      if (other.HasTransUtcTime) {
        TransUtcTime = other.TransUtcTime;
      }
      if (other.transUtcTimestamp_ != null) {
        if (transUtcTimestamp_ == null) {
          TransUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        TransUtcTimestamp.MergeFrom(other.TransUtcTimestamp);
      }
      if (other.HasRefTransId) {
        RefTransId = other.RefTransId;
      }
      if (other.HasOrigClOrderId) {
        OrigClOrderId = other.OrigClOrderId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasUint32FillQty) {
        Uint32FillQty = other.Uint32FillQty;
      }
      if (other.fillQty_ != null) {
        if (fillQty_ == null) {
          FillQty = new global::Cqg.Decimal();
        }
        FillQty.MergeFrom(other.FillQty);
      }
      if (other.HasScaledFillPrice) {
        ScaledFillPrice = other.ScaledFillPrice;
      }
      trades_.Add(other.trades_);
      strategyLegFills_.Add(other.strategyLegFills_);
      if (other.syntheticHang_ != null) {
        if (syntheticHang_ == null) {
          SyntheticHang = new global::Strategy2.SyntheticHang();
        }
        SyntheticHang.MergeFrom(other.SyntheticHang);
      }
      if (other.HasUint32PrevOrderQty) {
        Uint32PrevOrderQty = other.Uint32PrevOrderQty;
      }
      if (other.prevOrderQty_ != null) {
        if (prevOrderQty_ == null) {
          PrevOrderQty = new global::Cqg.Decimal();
        }
        PrevOrderQty.MergeFrom(other.PrevOrderQty);
      }
      if (other.HasUint32OrderQty) {
        Uint32OrderQty = other.Uint32OrderQty;
      }
      if (other.orderQty_ != null) {
        if (orderQty_ == null) {
          OrderQty = new global::Cqg.Decimal();
        }
        OrderQty.MergeFrom(other.OrderQty);
      }
      if (other.HasScaledPrevLimitPrice) {
        ScaledPrevLimitPrice = other.ScaledPrevLimitPrice;
      }
      if (other.HasScaledLimitPrice) {
        ScaledLimitPrice = other.ScaledLimitPrice;
      }
      if (other.HasScaledPrevStopPrice) {
        ScaledPrevStopPrice = other.ScaledPrevStopPrice;
      }
      if (other.HasScaledStopPrice) {
        ScaledStopPrice = other.ScaledStopPrice;
      }
      if (other.HasUint32PrevVisibleQty) {
        Uint32PrevVisibleQty = other.Uint32PrevVisibleQty;
      }
      if (other.prevVisibleQty_ != null) {
        if (prevVisibleQty_ == null) {
          PrevVisibleQty = new global::Cqg.Decimal();
        }
        PrevVisibleQty.MergeFrom(other.PrevVisibleQty);
      }
      if (other.HasUint32VisibleQty) {
        Uint32VisibleQty = other.Uint32VisibleQty;
      }
      if (other.visibleQty_ != null) {
        if (visibleQty_ == null) {
          VisibleQty = new global::Cqg.Decimal();
        }
        VisibleQty.MergeFrom(other.VisibleQty);
      }
      if (other.HasUint32PrevMinVisibleQty) {
        Uint32PrevMinVisibleQty = other.Uint32PrevMinVisibleQty;
      }
      if (other.prevMinVisibleQty_ != null) {
        if (prevMinVisibleQty_ == null) {
          PrevMinVisibleQty = new global::Cqg.Decimal();
        }
        PrevMinVisibleQty.MergeFrom(other.PrevMinVisibleQty);
      }
      if (other.HasUint32MinVisibleQty) {
        Uint32MinVisibleQty = other.Uint32MinVisibleQty;
      }
      if (other.minVisibleQty_ != null) {
        if (minVisibleQty_ == null) {
          MinVisibleQty = new global::Cqg.Decimal();
        }
        MinVisibleQty.MergeFrom(other.MinVisibleQty);
      }
      if (other.HasUint32PrevFillQty) {
        Uint32PrevFillQty = other.Uint32PrevFillQty;
      }
      if (other.prevFillQty_ != null) {
        if (prevFillQty_ == null) {
          PrevFillQty = new global::Cqg.Decimal();
        }
        PrevFillQty.MergeFrom(other.PrevFillQty);
      }
      if (other.HasScaledPrevFillPrice) {
        ScaledPrevFillPrice = other.ScaledPrevFillPrice;
      }
      if (other.HasPrevOrderType) {
        PrevOrderType = other.PrevOrderType;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      prevExecInstructions_.Add(other.prevExecInstructions_);
      execInstructions_.Add(other.execInstructions_);
      if (other.HasPrevDuration) {
        PrevDuration = other.PrevDuration;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasPrevGoodThruDate) {
        PrevGoodThruDate = other.PrevGoodThruDate;
      }
      if (other.HasGoodThruDate) {
        GoodThruDate = other.GoodThruDate;
      }
      if (other.HasRejectCode) {
        RejectCode = other.RejectCode;
      }
      if (other.HasFillCounterparty) {
        FillCounterparty = other.FillCounterparty;
      }
      if (other.HasRouteClOrderId) {
        RouteClOrderId = other.RouteClOrderId;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.HasPrevGoodThruUtcTime) {
        PrevGoodThruUtcTime = other.PrevGoodThruUtcTime;
      }
      if (other.prevGoodThruUtcTimestamp_ != null) {
        if (prevGoodThruUtcTimestamp_ == null) {
          PrevGoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        PrevGoodThruUtcTimestamp.MergeFrom(other.PrevGoodThruUtcTimestamp);
      }
      if (other.HasGoodThruUtcTime) {
        GoodThruUtcTime = other.GoodThruUtcTime;
      }
      if (other.goodThruUtcTimestamp_ != null) {
        if (goodThruUtcTimestamp_ == null) {
          GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        GoodThruUtcTimestamp.MergeFrom(other.GoodThruUtcTimestamp);
      }
      if (other.HasIsAggressive) {
        IsAggressive = other.IsAggressive;
      }
      if (other.HasClientRegulatoryAlgorithmId) {
        ClientRegulatoryAlgorithmId = other.ClientRegulatoryAlgorithmId;
      }
      if (other.HasEffectiveRegulatoryAlgorithmId) {
        EffectiveRegulatoryAlgorithmId = other.EffectiveRegulatoryAlgorithmId;
      }
      if (other.HasMifidAlgorithmId) {
        MifidAlgorithmId = other.MifidAlgorithmId;
      }
      if (other.HasMifidAlgorithmIdType) {
        MifidAlgorithmIdType = other.MifidAlgorithmIdType;
      }
      if (other.HasMifidAppliedAlgorithmId) {
        MifidAppliedAlgorithmId = other.MifidAppliedAlgorithmId;
      }
      if (other.HasMifidAppliedAlgorithmIdType) {
        MifidAppliedAlgorithmIdType = other.MifidAppliedAlgorithmIdType;
      }
      if (other.HasMifidExecutionDecision) {
        MifidExecutionDecision = other.MifidExecutionDecision;
      }
      if (other.HasMifidExecutionDecisionIsAlgo) {
        MifidExecutionDecisionIsAlgo = other.MifidExecutionDecisionIsAlgo;
      }
      if (other.HasOpenCloseEffect) {
        OpenCloseEffect = other.OpenCloseEffect;
      }
      if (other.HasSpeculationType) {
        SpeculationType = other.SpeculationType;
      }
      if (other.HasObsoletePrevDiscretionaryOffset) {
        ObsoletePrevDiscretionaryOffset = other.ObsoletePrevDiscretionaryOffset;
      }
      if (other.HasObsoleteDiscretionaryOffset) {
        ObsoleteDiscretionaryOffset = other.ObsoleteDiscretionaryOffset;
      }
      if (other.fillCommission_ != null) {
        if (fillCommission_ == null) {
          FillCommission = new global::Order2.Commission();
        }
        FillCommission.MergeFrom(other.FillCommission);
      }
      if (other.HasMifidInvestmentDecision) {
        MifidInvestmentDecision = other.MifidInvestmentDecision;
      }
      if (other.HasMifidInvestmentDecisionIsAlgo) {
        MifidInvestmentDecisionIsAlgo = other.MifidInvestmentDecisionIsAlgo;
      }
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      if (other.HasIsAutomated) {
        IsAutomated = other.IsAutomated;
      }
      if (other.HasTradeMatchId) {
        TradeMatchId = other.TradeMatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            TransId = input.ReadUInt64();
            break;
          }
          case 24: {
            TransUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            RefTransId = input.ReadUInt64();
            break;
          }
          case 42: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 50: {
            ClOrderId = input.ReadString();
            break;
          }
          case 56: {
            Uint32FillQty = input.ReadUInt32();
            break;
          }
          case 64: {
            ScaledFillPrice = input.ReadSInt64();
            break;
          }
          case 74: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 80: {
            Uint32PrevOrderQty = input.ReadUInt32();
            break;
          }
          case 88: {
            Uint32OrderQty = input.ReadUInt32();
            break;
          }
          case 96: {
            ScaledPrevLimitPrice = input.ReadSInt64();
            break;
          }
          case 104: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 112: {
            ScaledPrevStopPrice = input.ReadSInt64();
            break;
          }
          case 120: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 128: {
            Uint32PrevVisibleQty = input.ReadUInt32();
            break;
          }
          case 136: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 144: {
            Uint32PrevMinVisibleQty = input.ReadUInt32();
            break;
          }
          case 152: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 160: {
            Uint32PrevFillQty = input.ReadUInt32();
            break;
          }
          case 168: {
            ScaledPrevFillPrice = input.ReadSInt64();
            break;
          }
          case 176: {
            PrevOrderType = input.ReadUInt32();
            break;
          }
          case 184: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 194:
          case 192: {
            prevExecInstructions_.AddEntriesFrom(input, _repeated_prevExecInstructions_codec);
            break;
          }
          case 202:
          case 200: {
            execInstructions_.AddEntriesFrom(input, _repeated_execInstructions_codec);
            break;
          }
          case 208: {
            PrevDuration = input.ReadUInt32();
            break;
          }
          case 216: {
            Duration = input.ReadUInt32();
            break;
          }
          case 224: {
            PrevGoodThruDate = input.ReadSInt64();
            break;
          }
          case 232: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 240: {
            RejectCode = input.ReadUInt32();
            break;
          }
          case 250: {
            FillCounterparty = input.ReadString();
            break;
          }
          case 258: {
            RouteClOrderId = input.ReadString();
            break;
          }
          case 266: {
            TextMessage = input.ReadString();
            break;
          }
          case 272: {
            PrevGoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 280: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 288: {
            ClientRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 296: {
            EffectiveRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 306: {
            strategyLegFills_.AddEntriesFrom(input, _repeated_strategyLegFills_codec);
            break;
          }
          case 314: {
            if (syntheticHang_ == null) {
              SyntheticHang = new global::Strategy2.SyntheticHang();
            }
            input.ReadMessage(SyntheticHang);
            break;
          }
          case 322: {
            if (transUtcTimestamp_ == null) {
              TransUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(TransUtcTimestamp);
            break;
          }
          case 330: {
            if (prevGoodThruUtcTimestamp_ == null) {
              PrevGoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(PrevGoodThruUtcTimestamp);
            break;
          }
          case 338: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 346: {
            MifidAlgorithmId = input.ReadString();
            break;
          }
          case 352: {
            MifidAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 362: {
            MifidAppliedAlgorithmId = input.ReadString();
            break;
          }
          case 368: {
            MifidAppliedAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 378: {
            MifidExecutionDecision = input.ReadString();
            break;
          }
          case 384: {
            OpenCloseEffect = input.ReadUInt32();
            break;
          }
          case 392: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 400: {
            ObsoletePrevDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 408: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 418: {
            if (fillQty_ == null) {
              FillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(FillQty);
            break;
          }
          case 426: {
            if (prevOrderQty_ == null) {
              PrevOrderQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevOrderQty);
            break;
          }
          case 434: {
            if (orderQty_ == null) {
              OrderQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(OrderQty);
            break;
          }
          case 442: {
            if (prevVisibleQty_ == null) {
              PrevVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevVisibleQty);
            break;
          }
          case 450: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 458: {
            if (prevMinVisibleQty_ == null) {
              PrevMinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevMinVisibleQty);
            break;
          }
          case 466: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 474: {
            if (prevFillQty_ == null) {
              PrevFillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevFillQty);
            break;
          }
          case 482: {
            if (fillCommission_ == null) {
              FillCommission = new global::Order2.Commission();
            }
            input.ReadMessage(FillCommission);
            break;
          }
          case 490: {
            MifidInvestmentDecision = input.ReadString();
            break;
          }
          case 496: {
            MifidInvestmentDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 506: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
          case 512: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 520: {
            IsAutomated = input.ReadBool();
            break;
          }
          case 530: {
            TradeMatchId = input.ReadString();
            break;
          }
          case 536: {
            MifidExecutionDecisionIsAlgo = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            TransId = input.ReadUInt64();
            break;
          }
          case 24: {
            TransUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            RefTransId = input.ReadUInt64();
            break;
          }
          case 42: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 50: {
            ClOrderId = input.ReadString();
            break;
          }
          case 56: {
            Uint32FillQty = input.ReadUInt32();
            break;
          }
          case 64: {
            ScaledFillPrice = input.ReadSInt64();
            break;
          }
          case 74: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 80: {
            Uint32PrevOrderQty = input.ReadUInt32();
            break;
          }
          case 88: {
            Uint32OrderQty = input.ReadUInt32();
            break;
          }
          case 96: {
            ScaledPrevLimitPrice = input.ReadSInt64();
            break;
          }
          case 104: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 112: {
            ScaledPrevStopPrice = input.ReadSInt64();
            break;
          }
          case 120: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 128: {
            Uint32PrevVisibleQty = input.ReadUInt32();
            break;
          }
          case 136: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 144: {
            Uint32PrevMinVisibleQty = input.ReadUInt32();
            break;
          }
          case 152: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 160: {
            Uint32PrevFillQty = input.ReadUInt32();
            break;
          }
          case 168: {
            ScaledPrevFillPrice = input.ReadSInt64();
            break;
          }
          case 176: {
            PrevOrderType = input.ReadUInt32();
            break;
          }
          case 184: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 194:
          case 192: {
            prevExecInstructions_.AddEntriesFrom(ref input, _repeated_prevExecInstructions_codec);
            break;
          }
          case 202:
          case 200: {
            execInstructions_.AddEntriesFrom(ref input, _repeated_execInstructions_codec);
            break;
          }
          case 208: {
            PrevDuration = input.ReadUInt32();
            break;
          }
          case 216: {
            Duration = input.ReadUInt32();
            break;
          }
          case 224: {
            PrevGoodThruDate = input.ReadSInt64();
            break;
          }
          case 232: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 240: {
            RejectCode = input.ReadUInt32();
            break;
          }
          case 250: {
            FillCounterparty = input.ReadString();
            break;
          }
          case 258: {
            RouteClOrderId = input.ReadString();
            break;
          }
          case 266: {
            TextMessage = input.ReadString();
            break;
          }
          case 272: {
            PrevGoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 280: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 288: {
            ClientRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 296: {
            EffectiveRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 306: {
            strategyLegFills_.AddEntriesFrom(ref input, _repeated_strategyLegFills_codec);
            break;
          }
          case 314: {
            if (syntheticHang_ == null) {
              SyntheticHang = new global::Strategy2.SyntheticHang();
            }
            input.ReadMessage(SyntheticHang);
            break;
          }
          case 322: {
            if (transUtcTimestamp_ == null) {
              TransUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(TransUtcTimestamp);
            break;
          }
          case 330: {
            if (prevGoodThruUtcTimestamp_ == null) {
              PrevGoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(PrevGoodThruUtcTimestamp);
            break;
          }
          case 338: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 346: {
            MifidAlgorithmId = input.ReadString();
            break;
          }
          case 352: {
            MifidAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 362: {
            MifidAppliedAlgorithmId = input.ReadString();
            break;
          }
          case 368: {
            MifidAppliedAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 378: {
            MifidExecutionDecision = input.ReadString();
            break;
          }
          case 384: {
            OpenCloseEffect = input.ReadUInt32();
            break;
          }
          case 392: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 400: {
            ObsoletePrevDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 408: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 418: {
            if (fillQty_ == null) {
              FillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(FillQty);
            break;
          }
          case 426: {
            if (prevOrderQty_ == null) {
              PrevOrderQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevOrderQty);
            break;
          }
          case 434: {
            if (orderQty_ == null) {
              OrderQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(OrderQty);
            break;
          }
          case 442: {
            if (prevVisibleQty_ == null) {
              PrevVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevVisibleQty);
            break;
          }
          case 450: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 458: {
            if (prevMinVisibleQty_ == null) {
              PrevMinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevMinVisibleQty);
            break;
          }
          case 466: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 474: {
            if (prevFillQty_ == null) {
              PrevFillQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(PrevFillQty);
            break;
          }
          case 482: {
            if (fillCommission_ == null) {
              FillCommission = new global::Order2.Commission();
            }
            input.ReadMessage(FillCommission);
            break;
          }
          case 490: {
            MifidInvestmentDecision = input.ReadString();
            break;
          }
          case 496: {
            MifidInvestmentDecisionIsAlgo = input.ReadBool();
            break;
          }
          case 506: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
          case 512: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 520: {
            IsAutomated = input.ReadBool();
            break;
          }
          case 530: {
            TradeMatchId = input.ReadString();
            break;
          }
          case 536: {
            MifidExecutionDecisionIsAlgo = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Trade per specific outright contract.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Trade : pb::IMessage<Trade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade(Trade other) : this() {
      _hasBits0 = other._hasBits0;
      tradeId_ = other.tradeId_;
      contractId_ = other.contractId_;
      statementDate_ = other.statementDate_;
      tradeUtcTime_ = other.tradeUtcTime_;
      tradeUtcTimestamp_ = other.tradeUtcTimestamp_ != null ? other.tradeUtcTimestamp_.Clone() : null;
      tradeDate_ = other.tradeDate_;
      scaledPrice_ = other.scaledPrice_;
      priceCorrect_ = other.priceCorrect_;
      side_ = other.side_;
      uint32Qty_ = other.uint32Qty_;
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      tradeCounterparty_ = other.tradeCounterparty_;
      isAggressive_ = other.isAggressive_;
      legExecutionId_ = other.legExecutionId_;
      openCloseEffect_ = other.openCloseEffect_;
      speculationType_ = other.speculationType_;
      tradeMatchId_ = other.tradeMatchId_;
      specificContractId_ = other.specificContractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "trade_id" field.</summary>
    public const int TradeIdFieldNumber = 1;
    private readonly static string TradeIdDefaultValue = "";

    private string tradeId_;
    /// <summary>
    /// Trade ID assigned by server, unique within account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeId {
      get { return tradeId_ ?? TradeIdDefaultValue; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trade_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeId {
      get { return tradeId_ != null; }
    }
    /// <summary>Clears the value of the "trade_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeId() {
      tradeId_ = null;
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server contract identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "statement_date" field.</summary>
    public const int StatementDateFieldNumber = 3;
    private readonly static long StatementDateDefaultValue = 0L;

    private long statementDate_;
    /// <summary>
    /// Brokerage statement date this trade corresponds to (in time format, convert to date only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StatementDate {
      get { if ((_hasBits0 & 2) != 0) { return statementDate_; } else { return StatementDateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        statementDate_ = value;
      }
    }
    /// <summary>Gets whether the "statement_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatementDate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "statement_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatementDate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trade_utc_time" field.</summary>
    public const int TradeUtcTimeFieldNumber = 4;
    private readonly static long TradeUtcTimeDefaultValue = 0L;

    private long tradeUtcTime_;
    /// <summary>
    /// Time of the trade (UTC).
    /// Note: use trade_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return tradeUtcTime_; } else { return TradeUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tradeUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "trade_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trade_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "trade_utc_timestamp" field.</summary>
    public const int TradeUtcTimestampFieldNumber = 12;
    private global::Google.Protobuf.Timestamp tradeUtcTimestamp_;
    /// <summary>
    /// Time of the trade (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp TradeUtcTimestamp {
      get { return tradeUtcTimestamp_; }
      set {
        tradeUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 5;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Exchange trade day this trade corresponds to (in time format, date only value).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeDate {
      get { if ((_hasBits0 & 8) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeDate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeDate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scaled_price" field.</summary>
    public const int ScaledPriceFieldNumber = 6;
    private readonly static long ScaledPriceDefaultValue = 0L;

    private long scaledPrice_;
    /// <summary>
    /// Trade price in native integer format.
    /// price = round(price_correct / correct_price_scale).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledPrice {
      get { if ((_hasBits0 & 16) != 0) { return scaledPrice_; } else { return ScaledPriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scaledPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledPrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scaled_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledPrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "price_correct" field.</summary>
    public const int PriceCorrectFieldNumber = 13;
    private readonly static double PriceCorrectDefaultValue = 0D;

    private double priceCorrect_;
    /// <summary>
    /// Trade price in correct price format. Could have higher precision than price multiplied by correct_price_scale.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PriceCorrect {
      get { if ((_hasBits0 & 256) != 0) { return priceCorrect_; } else { return PriceCorrectDefaultValue; } }
      set {
        _hasBits0 |= 256;
        priceCorrect_ = value;
      }
    }
    /// <summary>Gets whether the "price_correct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriceCorrect {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "price_correct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriceCorrect() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 7;
    private readonly static uint SideDefaultValue = 0;

    private uint side_;
    /// <summary>
    /// Trade side.
    /// This field is associated with Order.Side enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Side {
      get { if ((_hasBits0 & 32) != 0) { return side_; } else { return SideDefaultValue; } }
      set {
        _hasBits0 |= 32;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "uint32_qty" field.</summary>
    public const int Uint32QtyFieldNumber = 8;
    private readonly static uint Uint32QtyDefaultValue = 0;

    private uint uint32Qty_;
    /// <summary>
    /// Note: use qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32Qty {
      get { if ((_hasBits0 & 64) != 0) { return uint32Qty_; } else { return Uint32QtyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        uint32Qty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32Qty {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "uint32_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32Qty() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 16;
    private global::Cqg.Decimal qty_;
    /// <summary>
    /// Trade size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "trade_counterparty" field.</summary>
    public const int TradeCounterpartyFieldNumber = 9;
    private readonly static string TradeCounterpartyDefaultValue = "";

    private string tradeCounterparty_;
    /// <summary>
    /// If present, identifies the counter-party of the trade, as reported by the execution system
    /// (may or may not match counter-party reported for the order fill).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeCounterparty {
      get { return tradeCounterparty_ ?? TradeCounterpartyDefaultValue; }
      set {
        tradeCounterparty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trade_counterparty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeCounterparty {
      get { return tradeCounterparty_ != null; }
    }
    /// <summary>Clears the value of the "trade_counterparty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeCounterparty() {
      tradeCounterparty_ = null;
    }

    /// <summary>Field number for the "is_aggressive" field.</summary>
    public const int IsAggressiveFieldNumber = 10;
    private readonly static bool IsAggressiveDefaultValue = false;

    private bool isAggressive_;
    /// <summary>
    /// True if trade was made as aggressive. False if trade was made as passive. Abscence of value means undefined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAggressive {
      get { if ((_hasBits0 & 128) != 0) { return isAggressive_; } else { return IsAggressiveDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isAggressive_ = value;
      }
    }
    /// <summary>Gets whether the "is_aggressive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAggressive {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_aggressive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAggressive() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "leg_execution_id" field.</summary>
    public const int LegExecutionIdFieldNumber = 11;
    private readonly static string LegExecutionIdDefaultValue = "";

    private string legExecutionId_;
    /// <summary>
    /// Execution id of the leg fill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LegExecutionId {
      get { return legExecutionId_ ?? LegExecutionIdDefaultValue; }
      set {
        legExecutionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "leg_execution_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLegExecutionId {
      get { return legExecutionId_ != null; }
    }
    /// <summary>Clears the value of the "leg_execution_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLegExecutionId() {
      legExecutionId_ = null;
    }

    /// <summary>Field number for the "open_close_effect" field.</summary>
    public const int OpenCloseEffectFieldNumber = 14;
    private readonly static uint OpenCloseEffectDefaultValue = 0;

    private uint openCloseEffect_;
    /// <summary>
    /// Open/close effect of the trade as a result of the corresponding open_close_instruction.
    /// One of OpenCloseInstruction enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OpenCloseEffect {
      get { if ((_hasBits0 & 512) != 0) { return openCloseEffect_; } else { return OpenCloseEffectDefaultValue; } }
      set {
        _hasBits0 |= 512;
        openCloseEffect_ = value;
      }
    }
    /// <summary>Gets whether the "open_close_effect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenCloseEffect {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "open_close_effect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenCloseEffect() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "speculation_type" field.</summary>
    public const int SpeculationTypeFieldNumber = 15;
    private readonly static uint SpeculationTypeDefaultValue = 0;

    private uint speculationType_;
    /// <summary>
    /// Speculation type of the trade. One of SpeculationType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeculationType {
      get { if ((_hasBits0 & 1024) != 0) { return speculationType_; } else { return SpeculationTypeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        speculationType_ = value;
      }
    }
    /// <summary>Gets whether the "speculation_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeculationType {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "speculation_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeculationType() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "trade_match_id" field.</summary>
    public const int TradeMatchIdFieldNumber = 17;
    private readonly static string TradeMatchIdDefaultValue = "";

    private string tradeMatchId_;
    /// <summary>
    /// Identifier assigned to a trade by a matching system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeMatchId {
      get { return tradeMatchId_ ?? TradeMatchIdDefaultValue; }
      set {
        tradeMatchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trade_match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeMatchId {
      get { return tradeMatchId_ != null; }
    }
    /// <summary>Clears the value of the "trade_match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeMatchId() {
      tradeMatchId_ = null;
    }

    /// <summary>Field number for the "specific_contract_id" field.</summary>
    public const int SpecificContractIdFieldNumber = 18;
    private readonly static uint SpecificContractIdDefaultValue = 0;

    private uint specificContractId_;
    /// <summary>
    /// When this field is present, the contract_id field contains the server contract identifier of a relative
    /// symbol (e.g., in case of relative daily futures), and the specific_contract_id contains the server
    /// contract identifier of the specific symbol (e.g. the specific instrument mapped to the relative daily
    /// future at the moment of this trade).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpecificContractId {
      get { if ((_hasBits0 & 2048) != 0) { return specificContractId_; } else { return SpecificContractIdDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        specificContractId_ = value;
      }
    }
    /// <summary>Gets whether the "specific_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpecificContractId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "specific_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpecificContractId() {
      _hasBits0 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeId != other.TradeId) return false;
      if (ContractId != other.ContractId) return false;
      if (StatementDate != other.StatementDate) return false;
      if (TradeUtcTime != other.TradeUtcTime) return false;
      if (!object.Equals(TradeUtcTimestamp, other.TradeUtcTimestamp)) return false;
      if (TradeDate != other.TradeDate) return false;
      if (ScaledPrice != other.ScaledPrice) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceCorrect, other.PriceCorrect)) return false;
      if (Side != other.Side) return false;
      if (Uint32Qty != other.Uint32Qty) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (TradeCounterparty != other.TradeCounterparty) return false;
      if (IsAggressive != other.IsAggressive) return false;
      if (LegExecutionId != other.LegExecutionId) return false;
      if (OpenCloseEffect != other.OpenCloseEffect) return false;
      if (SpeculationType != other.SpeculationType) return false;
      if (TradeMatchId != other.TradeMatchId) return false;
      if (SpecificContractId != other.SpecificContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTradeId) hash ^= TradeId.GetHashCode();
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasStatementDate) hash ^= StatementDate.GetHashCode();
      if (HasTradeUtcTime) hash ^= TradeUtcTime.GetHashCode();
      if (tradeUtcTimestamp_ != null) hash ^= TradeUtcTimestamp.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasScaledPrice) hash ^= ScaledPrice.GetHashCode();
      if (HasPriceCorrect) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceCorrect);
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasUint32Qty) hash ^= Uint32Qty.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (HasTradeCounterparty) hash ^= TradeCounterparty.GetHashCode();
      if (HasIsAggressive) hash ^= IsAggressive.GetHashCode();
      if (HasLegExecutionId) hash ^= LegExecutionId.GetHashCode();
      if (HasOpenCloseEffect) hash ^= OpenCloseEffect.GetHashCode();
      if (HasSpeculationType) hash ^= SpeculationType.GetHashCode();
      if (HasTradeMatchId) hash ^= TradeMatchId.GetHashCode();
      if (HasSpecificContractId) hash ^= SpecificContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTradeId) {
        output.WriteRawTag(10);
        output.WriteString(TradeId);
      }
      if (HasContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContractId);
      }
      if (HasStatementDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(StatementDate);
      }
      if (HasTradeUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(TradeUtcTime);
      }
      if (HasTradeDate) {
        output.WriteRawTag(40);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledPrice);
      }
      if (HasSide) {
        output.WriteRawTag(56);
        output.WriteUInt32(Side);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(64);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasTradeCounterparty) {
        output.WriteRawTag(74);
        output.WriteString(TradeCounterparty);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(80);
        output.WriteBool(IsAggressive);
      }
      if (HasLegExecutionId) {
        output.WriteRawTag(90);
        output.WriteString(LegExecutionId);
      }
      if (tradeUtcTimestamp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TradeUtcTimestamp);
      }
      if (HasPriceCorrect) {
        output.WriteRawTag(105);
        output.WriteDouble(PriceCorrect);
      }
      if (HasOpenCloseEffect) {
        output.WriteRawTag(112);
        output.WriteUInt32(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(120);
        output.WriteUInt32(SpeculationType);
      }
      if (qty_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Qty);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(138, 1);
        output.WriteString(TradeMatchId);
      }
      if (HasSpecificContractId) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SpecificContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTradeId) {
        output.WriteRawTag(10);
        output.WriteString(TradeId);
      }
      if (HasContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContractId);
      }
      if (HasStatementDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(StatementDate);
      }
      if (HasTradeUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(TradeUtcTime);
      }
      if (HasTradeDate) {
        output.WriteRawTag(40);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledPrice);
      }
      if (HasSide) {
        output.WriteRawTag(56);
        output.WriteUInt32(Side);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(64);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasTradeCounterparty) {
        output.WriteRawTag(74);
        output.WriteString(TradeCounterparty);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(80);
        output.WriteBool(IsAggressive);
      }
      if (HasLegExecutionId) {
        output.WriteRawTag(90);
        output.WriteString(LegExecutionId);
      }
      if (tradeUtcTimestamp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TradeUtcTimestamp);
      }
      if (HasPriceCorrect) {
        output.WriteRawTag(105);
        output.WriteDouble(PriceCorrect);
      }
      if (HasOpenCloseEffect) {
        output.WriteRawTag(112);
        output.WriteUInt32(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(120);
        output.WriteUInt32(SpeculationType);
      }
      if (qty_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Qty);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(138, 1);
        output.WriteString(TradeMatchId);
      }
      if (HasSpecificContractId) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SpecificContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTradeId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasStatementDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StatementDate);
      }
      if (HasTradeUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeUtcTime);
      }
      if (tradeUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeUtcTimestamp);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasScaledPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledPrice);
      }
      if (HasPriceCorrect) {
        size += 1 + 8;
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (HasUint32Qty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Qty);
      }
      if (qty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (HasTradeCounterparty) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeCounterparty);
      }
      if (HasIsAggressive) {
        size += 1 + 1;
      }
      if (HasLegExecutionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LegExecutionId);
      }
      if (HasOpenCloseEffect) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenCloseEffect);
      }
      if (HasSpeculationType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeculationType);
      }
      if (HasTradeMatchId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeMatchId);
      }
      if (HasSpecificContractId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecificContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.HasTradeId) {
        TradeId = other.TradeId;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasStatementDate) {
        StatementDate = other.StatementDate;
      }
      if (other.HasTradeUtcTime) {
        TradeUtcTime = other.TradeUtcTime;
      }
      if (other.tradeUtcTimestamp_ != null) {
        if (tradeUtcTimestamp_ == null) {
          TradeUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        TradeUtcTimestamp.MergeFrom(other.TradeUtcTimestamp);
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasScaledPrice) {
        ScaledPrice = other.ScaledPrice;
      }
      if (other.HasPriceCorrect) {
        PriceCorrect = other.PriceCorrect;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasUint32Qty) {
        Uint32Qty = other.Uint32Qty;
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          Qty = new global::Cqg.Decimal();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.HasTradeCounterparty) {
        TradeCounterparty = other.TradeCounterparty;
      }
      if (other.HasIsAggressive) {
        IsAggressive = other.IsAggressive;
      }
      if (other.HasLegExecutionId) {
        LegExecutionId = other.LegExecutionId;
      }
      if (other.HasOpenCloseEffect) {
        OpenCloseEffect = other.OpenCloseEffect;
      }
      if (other.HasSpeculationType) {
        SpeculationType = other.SpeculationType;
      }
      if (other.HasTradeMatchId) {
        TradeMatchId = other.TradeMatchId;
      }
      if (other.HasSpecificContractId) {
        SpecificContractId = other.SpecificContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TradeId = input.ReadString();
            break;
          }
          case 16: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 24: {
            StatementDate = input.ReadSInt64();
            break;
          }
          case 32: {
            TradeUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            Side = input.ReadUInt32();
            break;
          }
          case 64: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 74: {
            TradeCounterparty = input.ReadString();
            break;
          }
          case 80: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 90: {
            LegExecutionId = input.ReadString();
            break;
          }
          case 98: {
            if (tradeUtcTimestamp_ == null) {
              TradeUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(TradeUtcTimestamp);
            break;
          }
          case 105: {
            PriceCorrect = input.ReadDouble();
            break;
          }
          case 112: {
            OpenCloseEffect = input.ReadUInt32();
            break;
          }
          case 120: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 130: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 138: {
            TradeMatchId = input.ReadString();
            break;
          }
          case 144: {
            SpecificContractId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TradeId = input.ReadString();
            break;
          }
          case 16: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 24: {
            StatementDate = input.ReadSInt64();
            break;
          }
          case 32: {
            TradeUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            Side = input.ReadUInt32();
            break;
          }
          case 64: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 74: {
            TradeCounterparty = input.ReadString();
            break;
          }
          case 80: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 90: {
            LegExecutionId = input.ReadString();
            break;
          }
          case 98: {
            if (tradeUtcTimestamp_ == null) {
              TradeUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(TradeUtcTimestamp);
            break;
          }
          case 105: {
            PriceCorrect = input.ReadDouble();
            break;
          }
          case 112: {
            OpenCloseEffect = input.ReadUInt32();
            break;
          }
          case 120: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 130: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 138: {
            TradeMatchId = input.ReadString();
            break;
          }
          case 144: {
            SpecificContractId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Commission : pb::IMessage<Commission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Commission> _parser = new pb::MessageParser<Commission>(() => new Commission());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Commission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Commission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Commission(Commission other) : this() {
      _hasBits0 = other._hasBits0;
      commissionCurrency_ = other.commissionCurrency_;
      commission_ = other.commission_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Commission Clone() {
      return new Commission(this);
    }

    /// <summary>Field number for the "commission_currency" field.</summary>
    public const int CommissionCurrencyFieldNumber = 1;
    private readonly static string CommissionCurrencyDefaultValue = "";

    private string commissionCurrency_;
    /// <summary>
    /// Commission currency code (ISO 4217 based).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CommissionCurrency {
      get { return commissionCurrency_ ?? CommissionCurrencyDefaultValue; }
      set {
        commissionCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "commission_currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommissionCurrency {
      get { return commissionCurrency_ != null; }
    }
    /// <summary>Clears the value of the "commission_currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommissionCurrency() {
      commissionCurrency_ = null;
    }

    /// <summary>Field number for the "commission" field.</summary>
    public const int Commission_FieldNumber = 2;
    private readonly static double Commission_DefaultValue = 0D;

    private double commission_;
    /// <summary>
    /// Commission.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Commission_ {
      get { if ((_hasBits0 & 1) != 0) { return commission_; } else { return Commission_DefaultValue; } }
      set {
        _hasBits0 |= 1;
        commission_ = value;
      }
    }
    /// <summary>Gets whether the "commission" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommission_ {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "commission" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommission_() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Commission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Commission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommissionCurrency != other.CommissionCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Commission_, other.Commission_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCommissionCurrency) hash ^= CommissionCurrency.GetHashCode();
      if (HasCommission_) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Commission_);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCommissionCurrency) {
        output.WriteRawTag(10);
        output.WriteString(CommissionCurrency);
      }
      if (HasCommission_) {
        output.WriteRawTag(17);
        output.WriteDouble(Commission_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCommissionCurrency) {
        output.WriteRawTag(10);
        output.WriteString(CommissionCurrency);
      }
      if (HasCommission_) {
        output.WriteRawTag(17);
        output.WriteDouble(Commission_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCommissionCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommissionCurrency);
      }
      if (HasCommission_) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Commission other) {
      if (other == null) {
        return;
      }
      if (other.HasCommissionCurrency) {
        CommissionCurrency = other.CommissionCurrency;
      }
      if (other.HasCommission_) {
        Commission_ = other.Commission_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CommissionCurrency = input.ReadString();
            break;
          }
          case 17: {
            Commission_ = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CommissionCurrency = input.ReadString();
            break;
          }
          case 17: {
            Commission_ = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Compound order structure.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CompoundOrderStructure : pb::IMessage<CompoundOrderStructure>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CompoundOrderStructure> _parser = new pb::MessageParser<CompoundOrderStructure>(() => new CompoundOrderStructure());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CompoundOrderStructure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructure(CompoundOrderStructure other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      clCompoundId_ = other.clCompoundId_;
      compoundOrderEntries_ = other.compoundOrderEntries_.Clone();
      profitOffset_ = other.profitOffset_;
      lossOffset_ = other.lossOffset_;
      stopLimitOffset_ = other.stopLimitOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructure Clone() {
      return new CompoundOrderStructure(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// This field is associated with CompoundOrder.Type enum type.
    /// Type of the compound order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cl_compound_id" field.</summary>
    public const int ClCompoundIdFieldNumber = 2;
    private readonly static string ClCompoundIdDefaultValue = "";

    private string clCompoundId_;
    /// <summary>
    /// ID of the compound order assigned by client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClCompoundId {
      get { return clCompoundId_ ?? ClCompoundIdDefaultValue; }
      set {
        clCompoundId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_compound_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClCompoundId {
      get { return clCompoundId_ != null; }
    }
    /// <summary>Clears the value of the "cl_compound_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClCompoundId() {
      clCompoundId_ = null;
    }

    /// <summary>Field number for the "compound_order_entries" field.</summary>
    public const int CompoundOrderEntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Order2.CompoundOrderStructureEntry> _repeated_compoundOrderEntries_codec
        = pb::FieldCodec.ForMessage(26, global::Order2.CompoundOrderStructureEntry.Parser);
    private readonly pbc::RepeatedField<global::Order2.CompoundOrderStructureEntry> compoundOrderEntries_ = new pbc::RepeatedField<global::Order2.CompoundOrderStructureEntry>();
    /// <summary>
    /// List of entires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.CompoundOrderStructureEntry> CompoundOrderEntries {
      get { return compoundOrderEntries_; }
    }

    /// <summary>Field number for the "profit_offset" field.</summary>
    public const int ProfitOffsetFieldNumber = 4;
    private readonly static int ProfitOffsetDefaultValue = 0;

    private int profitOffset_;
    /// <summary>
    /// Offset in ticks from fill price.
    /// New order price will be calculated as
    /// (fill price + offset) for buy master orders and (fill price - offset) for sell master orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProfitOffset {
      get { if ((_hasBits0 & 2) != 0) { return profitOffset_; } else { return ProfitOffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        profitOffset_ = value;
      }
    }
    /// <summary>Gets whether the "profit_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfitOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "profit_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfitOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "loss_offset" field.</summary>
    public const int LossOffsetFieldNumber = 5;
    private readonly static int LossOffsetDefaultValue = 0;

    private int lossOffset_;
    /// <summary>
    /// Offset in ticks from fill price.
    /// New order price will be calculated as
    /// (fill price - offset) for buy master orders and (fill price + offset) for sell master orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LossOffset {
      get { if ((_hasBits0 & 4) != 0) { return lossOffset_; } else { return LossOffsetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lossOffset_ = value;
      }
    }
    /// <summary>Gets whether the "loss_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLossOffset {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "loss_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLossOffset() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stop_limit_offset" field.</summary>
    public const int StopLimitOffsetFieldNumber = 6;
    private readonly static int StopLimitOffsetDefaultValue = 0;

    private int stopLimitOffset_;
    /// <summary>
    /// Offset in ticks from loss_offset for stop limit orders.
    /// The offset determines the limit price for the order the stop limit becomes when the stop price is hit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StopLimitOffset {
      get { if ((_hasBits0 & 8) != 0) { return stopLimitOffset_; } else { return StopLimitOffsetDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stopLimitOffset_ = value;
      }
    }
    /// <summary>Gets whether the "stop_limit_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStopLimitOffset {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stop_limit_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStopLimitOffset() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CompoundOrderStructure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CompoundOrderStructure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ClCompoundId != other.ClCompoundId) return false;
      if(!compoundOrderEntries_.Equals(other.compoundOrderEntries_)) return false;
      if (ProfitOffset != other.ProfitOffset) return false;
      if (LossOffset != other.LossOffset) return false;
      if (StopLimitOffset != other.StopLimitOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasClCompoundId) hash ^= ClCompoundId.GetHashCode();
      hash ^= compoundOrderEntries_.GetHashCode();
      if (HasProfitOffset) hash ^= ProfitOffset.GetHashCode();
      if (HasLossOffset) hash ^= LossOffset.GetHashCode();
      if (HasStopLimitOffset) hash ^= StopLimitOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasClCompoundId) {
        output.WriteRawTag(18);
        output.WriteString(ClCompoundId);
      }
      compoundOrderEntries_.WriteTo(output, _repeated_compoundOrderEntries_codec);
      if (HasProfitOffset) {
        output.WriteRawTag(32);
        output.WriteSInt32(ProfitOffset);
      }
      if (HasLossOffset) {
        output.WriteRawTag(40);
        output.WriteSInt32(LossOffset);
      }
      if (HasStopLimitOffset) {
        output.WriteRawTag(48);
        output.WriteSInt32(StopLimitOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasClCompoundId) {
        output.WriteRawTag(18);
        output.WriteString(ClCompoundId);
      }
      compoundOrderEntries_.WriteTo(ref output, _repeated_compoundOrderEntries_codec);
      if (HasProfitOffset) {
        output.WriteRawTag(32);
        output.WriteSInt32(ProfitOffset);
      }
      if (HasLossOffset) {
        output.WriteRawTag(40);
        output.WriteSInt32(LossOffset);
      }
      if (HasStopLimitOffset) {
        output.WriteRawTag(48);
        output.WriteSInt32(StopLimitOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasClCompoundId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClCompoundId);
      }
      size += compoundOrderEntries_.CalculateSize(_repeated_compoundOrderEntries_codec);
      if (HasProfitOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ProfitOffset);
      }
      if (HasLossOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LossOffset);
      }
      if (HasStopLimitOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StopLimitOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CompoundOrderStructure other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasClCompoundId) {
        ClCompoundId = other.ClCompoundId;
      }
      compoundOrderEntries_.Add(other.compoundOrderEntries_);
      if (other.HasProfitOffset) {
        ProfitOffset = other.ProfitOffset;
      }
      if (other.HasLossOffset) {
        LossOffset = other.LossOffset;
      }
      if (other.HasStopLimitOffset) {
        StopLimitOffset = other.StopLimitOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            ClCompoundId = input.ReadString();
            break;
          }
          case 26: {
            compoundOrderEntries_.AddEntriesFrom(input, _repeated_compoundOrderEntries_codec);
            break;
          }
          case 32: {
            ProfitOffset = input.ReadSInt32();
            break;
          }
          case 40: {
            LossOffset = input.ReadSInt32();
            break;
          }
          case 48: {
            StopLimitOffset = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            ClCompoundId = input.ReadString();
            break;
          }
          case 26: {
            compoundOrderEntries_.AddEntriesFrom(ref input, _repeated_compoundOrderEntries_codec);
            break;
          }
          case 32: {
            ProfitOffset = input.ReadSInt32();
            break;
          }
          case 40: {
            LossOffset = input.ReadSInt32();
            break;
          }
          case 48: {
            StopLimitOffset = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Entry of a compound order structure. One of optional fields is specified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CompoundOrderStructureEntry : pb::IMessage<CompoundOrderStructureEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CompoundOrderStructureEntry> _parser = new pb::MessageParser<CompoundOrderStructureEntry>(() => new CompoundOrderStructureEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CompoundOrderStructureEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructureEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructureEntry(CompoundOrderStructureEntry other) : this() {
      chainOrderId_ = other.chainOrderId_;
      compoundOrderStructure_ = other.compoundOrderStructure_ != null ? other.compoundOrderStructure_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderStructureEntry Clone() {
      return new CompoundOrderStructureEntry(this);
    }

    /// <summary>Field number for the "chain_order_id" field.</summary>
    public const int ChainOrderIdFieldNumber = 1;
    private readonly static string ChainOrderIdDefaultValue = "";

    private string chainOrderId_;
    /// <summary>
    /// Regular order id as assigned by server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChainOrderId {
      get { return chainOrderId_ ?? ChainOrderIdDefaultValue; }
      set {
        chainOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "chain_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChainOrderId {
      get { return chainOrderId_ != null; }
    }
    /// <summary>Clears the value of the "chain_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChainOrderId() {
      chainOrderId_ = null;
    }

    /// <summary>Field number for the "compound_order_structure" field.</summary>
    public const int CompoundOrderStructureFieldNumber = 2;
    private global::Order2.CompoundOrderStructure compoundOrderStructure_;
    /// <summary>
    /// Sub-compound order structure entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CompoundOrderStructure CompoundOrderStructure {
      get { return compoundOrderStructure_; }
      set {
        compoundOrderStructure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CompoundOrderStructureEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CompoundOrderStructureEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChainOrderId != other.ChainOrderId) return false;
      if (!object.Equals(CompoundOrderStructure, other.CompoundOrderStructure)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChainOrderId) hash ^= ChainOrderId.GetHashCode();
      if (compoundOrderStructure_ != null) hash ^= CompoundOrderStructure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChainOrderId) {
        output.WriteRawTag(10);
        output.WriteString(ChainOrderId);
      }
      if (compoundOrderStructure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CompoundOrderStructure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChainOrderId) {
        output.WriteRawTag(10);
        output.WriteString(ChainOrderId);
      }
      if (compoundOrderStructure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CompoundOrderStructure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChainOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainOrderId);
      }
      if (compoundOrderStructure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompoundOrderStructure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CompoundOrderStructureEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasChainOrderId) {
        ChainOrderId = other.ChainOrderId;
      }
      if (other.compoundOrderStructure_ != null) {
        if (compoundOrderStructure_ == null) {
          CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
        }
        CompoundOrderStructure.MergeFrom(other.CompoundOrderStructure);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 18: {
            if (compoundOrderStructure_ == null) {
              CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
            }
            input.ReadMessage(CompoundOrderStructure);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 18: {
            if (compoundOrderStructure_ == null) {
              CompoundOrderStructure = new global::Order2.CompoundOrderStructure();
            }
            input.ReadMessage(CompoundOrderStructure);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Trade routing order. It is used as new order request and as a part of order status updates.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Order : pb::IMessage<Order>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order(Order other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      contractId_ = other.contractId_;
      clOrderId_ = other.clOrderId_;
      orderType_ = other.orderType_;
      execInstructions_ = other.execInstructions_.Clone();
      duration_ = other.duration_;
      goodThruDate_ = other.goodThruDate_;
      side_ = other.side_;
      scaledLimitPrice_ = other.scaledLimitPrice_;
      scaledStopPrice_ = other.scaledStopPrice_;
      uint32Qty_ = other.uint32Qty_;
      uint32VisibleQty_ = other.uint32VisibleQty_;
      uint32MinVisibleQty_ = other.uint32MinVisibleQty_;
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      visibleQty_ = other.visibleQty_ != null ? other.visibleQty_.Clone() : null;
      minVisibleQty_ = other.minVisibleQty_ != null ? other.minVisibleQty_.Clone() : null;
      isManual_ = other.isManual_;
      isClose_ = other.isClose_;
      isAggressive_ = other.isAggressive_;
      scaledTrailOffset_ = other.scaledTrailOffset_;
      trailingPeg_ = other.trailingPeg_;
      uint32TriggerQty_ = other.uint32TriggerQty_;
      triggerQty_ = other.triggerQty_ != null ? other.triggerQty_.Clone() : null;
      activationUtcTime_ = other.activationUtcTime_;
      activationUtcTimestamp_ = other.activationUtcTimestamp_ != null ? other.activationUtcTimestamp_.Clone() : null;
      suspensionUtcTime_ = other.suspensionUtcTime_;
      suspensionUtcTimestamp_ = other.suspensionUtcTimestamp_ != null ? other.suspensionUtcTimestamp_.Clone() : null;
      userAttributes_ = other.userAttributes_.Clone();
      extraAttributes_ = other.extraAttributes_.Clone();
      algoStrategy_ = other.algoStrategy_;
      goodThruUtcTime_ = other.goodThruUtcTime_;
      goodThruUtcTimestamp_ = other.goodThruUtcTimestamp_ != null ? other.goodThruUtcTimestamp_.Clone() : null;
      isUserAttributeChecked_ = other.isUserAttributeChecked_;
      strategyTradingParameters_ = other.strategyTradingParameters_ != null ? other.strategyTradingParameters_.Clone() : null;
      openCloseInstruction_ = other.openCloseInstruction_;
      speculationType_ = other.speculationType_;
      obsoleteDiscretionaryOffset_ = other.obsoleteDiscretionaryOffset_;
      contributorId_ = other.contributorId_;
      executionSourceCode_ = other.executionSourceCode_;
      crossOrderParameters_ = other.crossOrderParameters_ != null ? other.crossOrderParameters_.Clone() : null;
      externalAccountNumber_ = other.externalAccountNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Id of an account that is/ was used to place an order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 2;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when an order was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 27;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when an order was submitted (UTC).
    /// If specified by the user it's used instead of when_utc_time field
    /// (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 3;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server side contract Id of the order (see ContractMetadata message).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 4) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 4;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order identifier, must be unique within a single trading day for day orders
    /// and across days for multi-day orders.
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 5;
    private readonly static uint OrderTypeDefaultValue = 0;

    private uint orderType_;
    /// <summary>
    /// Order type.
    /// This field is associated with OrderType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OrderType {
      get { if ((_hasBits0 & 8) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "exec_instructions" field.</summary>
    public const int ExecInstructionsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_execInstructions_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> execInstructions_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of applicable execution instructions.
    /// This field is associated with ExecInstruction enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> ExecInstructions {
      get { return execInstructions_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 7;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    /// <summary>
    /// Order duration.
    /// This field is associated with Duration enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Duration {
      get { if ((_hasBits0 & 16) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "good_thru_date" field.</summary>
    public const int GoodThruDateFieldNumber = 8;
    private readonly static long GoodThruDateDefaultValue = 0L;

    private long goodThruDate_;
    /// <summary>
    /// Date for GTD (local to exchange, date only value in time format) when the order should expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruDate {
      get { if ((_hasBits0 & 32) != 0) { return goodThruDate_; } else { return GoodThruDateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        goodThruDate_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruDate {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruDate() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 9;
    private readonly static uint SideDefaultValue = 0;

    private uint side_;
    /// <summary>
    /// Order side.
    /// This field is associated with Side enum type.
    /// This field is required for all order types except for ORDER_TYPE_CROSS.
    /// For orders with ORDER_TYPE_CROSS order type this field is not relevant and ignored.
    /// See CrossOrderParameters.side_allocation field instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Side {
      get { if ((_hasBits0 & 64) != 0) { return side_; } else { return SideDefaultValue; } }
      set {
        _hasBits0 |= 64;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_limit_price" field.</summary>
    public const int ScaledLimitPriceFieldNumber = 10;
    private readonly static long ScaledLimitPriceDefaultValue = 0L;

    private long scaledLimitPrice_;
    /// <summary>
    /// Limit price of the order (required for Limit and Stop-limit orders).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledLimitPrice {
      get { if ((_hasBits0 & 128) != 0) { return scaledLimitPrice_; } else { return ScaledLimitPriceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_limit_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledLimitPrice {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_limit_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledLimitPrice() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scaled_stop_price" field.</summary>
    public const int ScaledStopPriceFieldNumber = 11;
    private readonly static long ScaledStopPriceDefaultValue = 0L;

    private long scaledStopPrice_;
    /// <summary>
    /// Stop price of the order (required for Stop and Stop-limit orders).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledStopPrice {
      get { if ((_hasBits0 & 256) != 0) { return scaledStopPrice_; } else { return ScaledStopPriceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scaledStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_stop_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledStopPrice {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scaled_stop_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledStopPrice() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "uint32_qty" field.</summary>
    public const int Uint32QtyFieldNumber = 12;
    private readonly static uint Uint32QtyDefaultValue = 0;

    private uint uint32Qty_;
    /// <summary>
    /// Note: use qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32Qty {
      get { if ((_hasBits0 & 512) != 0) { return uint32Qty_; } else { return Uint32QtyDefaultValue; } }
      set {
        _hasBits0 |= 512;
        uint32Qty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32Qty {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "uint32_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32Qty() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "uint32_visible_qty" field.</summary>
    public const int Uint32VisibleQtyFieldNumber = 13;
    private readonly static uint Uint32VisibleQtyDefaultValue = 0;

    private uint uint32VisibleQty_;
    /// <summary>
    /// Note: use visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32VisibleQty {
      get { if ((_hasBits0 & 1024) != 0) { return uint32VisibleQty_; } else { return Uint32VisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        uint32VisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32VisibleQty {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "uint32_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32VisibleQty() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "uint32_min_visible_qty" field.</summary>
    public const int Uint32MinVisibleQtyFieldNumber = 14;
    private readonly static uint Uint32MinVisibleQtyDefaultValue = 0;

    private uint uint32MinVisibleQty_;
    /// <summary>
    /// Note: use min_visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32MinVisibleQty {
      get { if ((_hasBits0 & 2048) != 0) { return uint32MinVisibleQty_; } else { return Uint32MinVisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        uint32MinVisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_min_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32MinVisibleQty {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "uint32_min_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32MinVisibleQty() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 34;
    private global::Cqg.Decimal qty_;
    /// <summary>
    /// Total positive size of the order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "visible_qty" field.</summary>
    public const int VisibleQtyFieldNumber = 35;
    private global::Cqg.Decimal visibleQty_;
    /// <summary>
    /// Visible size of the order for Icebergs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal VisibleQty {
      get { return visibleQty_; }
      set {
        visibleQty_ = value;
      }
    }

    /// <summary>Field number for the "min_visible_qty" field.</summary>
    public const int MinVisibleQtyFieldNumber = 36;
    private global::Cqg.Decimal minVisibleQty_;
    /// <summary>
    /// Minimum visible positive size of the order
    /// used for iceberg orders with 'random visible size',
    /// must be &lt; visible_qty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal MinVisibleQty {
      get { return minVisibleQty_; }
      set {
        minVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "is_manual" field.</summary>
    public const int IsManualFieldNumber = 15;
    private readonly static bool IsManualDefaultValue = false;

    private bool isManual_;
    /// <summary>
    /// True if this is a manual order (order placed by the user direct action), automated otherwise.
    /// Deprecated, use OrderRequest.is_automated to set a request source,
    /// or TransactionStatus.is_automated to read the value for an order.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsManual {
      get { if ((_hasBits0 & 4096) != 0) { return isManual_; } else { return IsManualDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        isManual_ = value;
      }
    }
    /// <summary>Gets whether the "is_manual" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsManual {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_manual" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsManual() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "is_close" field.</summary>
    public const int IsCloseFieldNumber = 16;
    private readonly static bool IsCloseDefaultValue = false;

    private bool isClose_;
    /// <summary>
    /// True if order is used for closing/ reducing a position, opening/ increasing otherwise
    /// (omit this field if there is no need to be explicit). Deprecated, refer to open_close_instruction.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsClose {
      get { if ((_hasBits0 & 8192) != 0) { return isClose_; } else { return IsCloseDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        isClose_ = value;
      }
    }
    /// <summary>Gets whether the "is_close" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsClose {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_close" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsClose() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "is_aggressive" field.</summary>
    public const int IsAggressiveFieldNumber = 17;
    private readonly static bool IsAggressiveDefaultValue = false;

    private bool isAggressive_;
    /// <summary>
    /// True if the order is aggressive (Fixed Income specific order modifier).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAggressive {
      get { if ((_hasBits0 & 16384) != 0) { return isAggressive_; } else { return IsAggressiveDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isAggressive_ = value;
      }
    }
    /// <summary>Gets whether the "is_aggressive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAggressive {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_aggressive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAggressive() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "scaled_trail_offset" field.</summary>
    public const int ScaledTrailOffsetFieldNumber = 18;
    private readonly static int ScaledTrailOffsetDefaultValue = 0;

    private int scaledTrailOffset_;
    /// <summary>
    /// Maximum offset between market and limit prices for trail orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScaledTrailOffset {
      get { if ((_hasBits0 & 32768) != 0) { return scaledTrailOffset_; } else { return ScaledTrailOffsetDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        scaledTrailOffset_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_trail_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledTrailOffset {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "scaled_trail_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledTrailOffset() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "trailing_peg" field.</summary>
    public const int TrailingPegFieldNumber = 19;
    private readonly static uint TrailingPegDefaultValue = 0;

    private uint trailingPeg_;
    /// <summary>
    /// Trailing peg to follow specific side of the market (for limit orders only).
    /// This field is associated with TrailingPeg enum type.
    /// Note: order request is rejected if this field is set for stop or stop-limit order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TrailingPeg {
      get { if ((_hasBits0 & 65536) != 0) { return trailingPeg_; } else { return TrailingPegDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        trailingPeg_ = value;
      }
    }
    /// <summary>Gets whether the "trailing_peg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrailingPeg {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "trailing_peg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrailingPeg() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "uint32_trigger_qty" field.</summary>
    public const int Uint32TriggerQtyFieldNumber = 20;
    private readonly static uint Uint32TriggerQtyDefaultValue = 0;

    private uint uint32TriggerQty_;
    /// <summary>
    /// Note: use trigger_qty instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32TriggerQty {
      get { if ((_hasBits0 & 131072) != 0) { return uint32TriggerQty_; } else { return Uint32TriggerQtyDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        uint32TriggerQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_trigger_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32TriggerQty {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "uint32_trigger_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32TriggerQty() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "trigger_qty" field.</summary>
    public const int TriggerQtyFieldNumber = 37;
    private global::Cqg.Decimal triggerQty_;
    /// <summary>
    /// Trigger quantity (threshold) as additional stop order activation condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal TriggerQty {
      get { return triggerQty_; }
      set {
        triggerQty_ = value;
      }
    }

    /// <summary>Field number for the "activation_utc_time" field.</summary>
    public const int ActivationUtcTimeFieldNumber = 21;
    private readonly static long ActivationUtcTimeDefaultValue = 0L;

    private long activationUtcTime_;
    /// <summary>
    /// Time when order should be submitted to execution system as assigned by client (UTC).
    /// Note: use activation_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActivationUtcTime {
      get { if ((_hasBits0 & 262144) != 0) { return activationUtcTime_; } else { return ActivationUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        activationUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "activation_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActivationUtcTime {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "activation_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActivationUtcTime() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "activation_utc_timestamp" field.</summary>
    public const int ActivationUtcTimestampFieldNumber = 28;
    private global::Google.Protobuf.Timestamp activationUtcTimestamp_;
    /// <summary>
    /// Time when order should be submitted to execution system as assigned by client (UTC).
    /// If specified by the user it's used instead of activation_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp ActivationUtcTimestamp {
      get { return activationUtcTimestamp_; }
      set {
        activationUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "suspension_utc_time" field.</summary>
    public const int SuspensionUtcTimeFieldNumber = 22;
    private readonly static long SuspensionUtcTimeDefaultValue = 0L;

    private long suspensionUtcTime_;
    /// <summary>
    /// Time when order should be suspended (parked) (UTC).
    /// Note: use suspension_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SuspensionUtcTime {
      get { if ((_hasBits0 & 524288) != 0) { return suspensionUtcTime_; } else { return SuspensionUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        suspensionUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "suspension_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspensionUtcTime {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "suspension_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspensionUtcTime() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "suspension_utc_timestamp" field.</summary>
    public const int SuspensionUtcTimestampFieldNumber = 29;
    private global::Google.Protobuf.Timestamp suspensionUtcTimestamp_;
    /// <summary>
    /// Time when order should be suspended (parked) (UTC).
    /// If specified by the user it's used instead of suspension_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp SuspensionUtcTimestamp {
      get { return suspensionUtcTimestamp_; }
      set {
        suspensionUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "user_attributes" field.</summary>
    public const int UserAttributesFieldNumber = 23;
    private static readonly pb::FieldCodec<global::UserAttribute2.UserAttribute> _repeated_userAttributes_codec
        = pb::FieldCodec.ForMessage(186, global::UserAttribute2.UserAttribute.Parser);
    private readonly pbc::RepeatedField<global::UserAttribute2.UserAttribute> userAttributes_ = new pbc::RepeatedField<global::UserAttribute2.UserAttribute>();
    /// <summary>
    /// User specific attributes.
    /// Only printable ASCII characters are allowed in "name" and "value" fields including 0-9A-Za-z, punctuation.
    /// (ASCII character set used by the "C" locale with codes greater than 0x1f (US), except 0x7f (DEL).)
    /// Violation of the fields formatting leads to rejection of requests that contain UserAttribute.
    /// Note that despite punctuation is allowed, it can cause issues with 3rd party tools and formats like CSV.
    /// Order comment is provided for an order via UserAttribute with "name" set to "comment" and "value" set to
    /// the order comment. Depending on order route, a limit on order comment length can be imposed.
    /// If that limit is exceeded, order comment is skipped, but order is not rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::UserAttribute2.UserAttribute> UserAttributes {
      get { return userAttributes_; }
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(306, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of order extra attributes.
    /// Such attributes are used for Pre-Trade Mid-Market Mark, Algo Strategies and other purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    /// <summary>Field number for the "algo_strategy" field.</summary>
    public const int AlgoStrategyFieldNumber = 39;
    private readonly static string AlgoStrategyDefaultValue = "";

    private string algoStrategy_;
    /// <summary>
    /// Case-sensitive identifier (abbreviation) of algorithm used to execute the order (e.g. VWAP, TWAP, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlgoStrategy {
      get { return algoStrategy_ ?? AlgoStrategyDefaultValue; }
      set {
        algoStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "algo_strategy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgoStrategy {
      get { return algoStrategy_ != null; }
    }
    /// <summary>Clears the value of the "algo_strategy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgoStrategy() {
      algoStrategy_ = null;
    }

    /// <summary>Field number for the "good_thru_utc_time" field.</summary>
    public const int GoodThruUtcTimeFieldNumber = 24;
    private readonly static long GoodThruUtcTimeDefaultValue = 0L;

    private long goodThruUtcTime_;
    /// <summary>
    /// Date and time for GTT order (UTC) when the order should expire.
    /// Note: use good_thru_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruUtcTime {
      get { if ((_hasBits0 & 1048576) != 0) { return goodThruUtcTime_; } else { return GoodThruUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        goodThruUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruUtcTime {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruUtcTime() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "good_thru_utc_timestamp" field.</summary>
    public const int GoodThruUtcTimestampFieldNumber = 30;
    private global::Google.Protobuf.Timestamp goodThruUtcTimestamp_;
    /// <summary>
    /// Date and time for GTT order (UTC) when the order should expire.
    /// If specified by the user it's used instead of good_thru_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp GoodThruUtcTimestamp {
      get { return goodThruUtcTimestamp_; }
      set {
        goodThruUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_user_attribute_checked" field.</summary>
    public const int IsUserAttributeCheckedFieldNumber = 25;
    private readonly static bool IsUserAttributeCheckedDefaultValue = true;

    private bool isUserAttributeChecked_;
    /// <summary>
    /// Flag used by the client for marking the user attributes checked/unchecked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUserAttributeChecked {
      get { if ((_hasBits0 & 2097152) != 0) { return isUserAttributeChecked_; } else { return IsUserAttributeCheckedDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        isUserAttributeChecked_ = value;
      }
    }
    /// <summary>Gets whether the "is_user_attribute_checked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUserAttributeChecked {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "is_user_attribute_checked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUserAttributeChecked() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "strategy_trading_parameters" field.</summary>
    public const int StrategyTradingParametersFieldNumber = 26;
    private global::Strategy2.StrategyTradingParameters strategyTradingParameters_;
    /// <summary>
    /// Synthetic strategy trading parameters, applicable only if contract_id designates a synthetic strategy.
    /// If the parameter is not applicable for the order the default value is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.StrategyTradingParameters StrategyTradingParameters {
      get { return strategyTradingParameters_; }
      set {
        strategyTradingParameters_ = value;
      }
    }

    /// <summary>Field number for the "open_close_instruction" field.</summary>
    public const int OpenCloseInstructionFieldNumber = 31;
    private readonly static uint OpenCloseInstructionDefaultValue = 0;

    private uint openCloseInstruction_;
    /// <summary>
    /// Specifies what the order is intended to do: open or close (reduce) a position. One of OpenCloseInstruction enum.
    /// Applicable only if ContractMetadata.position_tracking is either
    /// LONG_SHORT_WITH_IMPLIED_CLOSE or LONG_SHORT_WITH_EXPLICIT_CLOSE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OpenCloseInstruction {
      get { if ((_hasBits0 & 4194304) != 0) { return openCloseInstruction_; } else { return OpenCloseInstructionDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        openCloseInstruction_ = value;
      }
    }
    /// <summary>Gets whether the "open_close_instruction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenCloseInstruction {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "open_close_instruction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenCloseInstruction() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "speculation_type" field.</summary>
    public const int SpeculationTypeFieldNumber = 32;
    private readonly static uint SpeculationTypeDefaultValue = 0;

    private uint speculationType_;
    /// <summary>
    /// Speculation type of the order. One of SpeculationType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeculationType {
      get { if ((_hasBits0 & 8388608) != 0) { return speculationType_; } else { return SpeculationTypeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        speculationType_ = value;
      }
    }
    /// <summary>Gets whether the "speculation_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeculationType {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "speculation_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeculationType() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "obsolete_discretionary_offset" field.</summary>
    public const int ObsoleteDiscretionaryOffsetFieldNumber = 33;
    private readonly static uint ObsoleteDiscretionaryOffsetDefaultValue = 0;

    private uint obsoleteDiscretionaryOffset_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ObsoleteDiscretionaryOffset {
      get { if ((_hasBits0 & 16777216) != 0) { return obsoleteDiscretionaryOffset_; } else { return ObsoleteDiscretionaryOffsetDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        obsoleteDiscretionaryOffset_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_offset" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryOffset {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_offset" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryOffset() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "contributor_id" field.</summary>
    public const int ContributorIdFieldNumber = 40;
    private readonly static string ContributorIdDefaultValue = "";

    private string contributorId_;
    /// <summary>
    /// Optional OTC contributor involved into the order processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContributorId {
      get { return contributorId_ ?? ContributorIdDefaultValue; }
      set {
        contributorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contributor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContributorId {
      get { return contributorId_ != null; }
    }
    /// <summary>Clears the value of the "contributor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContributorId() {
      contributorId_ = null;
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 41;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value for the placement.
    /// Overrides the value CQG would otherwise automatically assign
    /// to the operation based on trader-account configuration.
    /// Refer to https://www.fia.org/articles/fia-and-fia-tech-release-guidelines-simplified-execution-source-code
    /// Possible values:
    /// W - Desk
    /// Y - Electronic (Default)
    /// C - Vendor-provided Platform billed by Executing Broker
    /// G - Sponsored Access via Exchange API or FIX provided by Executing Broker
    /// H - Premium Algorithmic Trading Provider billed by Executing Broker
    /// D - Other, including Other-provided Screen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    /// <summary>Field number for the "cross_order_parameters" field.</summary>
    public const int CrossOrderParametersFieldNumber = 42;
    private global::Order2.CrossOrderParameters crossOrderParameters_;
    /// <summary>
    /// Cross order parameters.
    /// It must be specified if order_type is ORDER_TYPE_CROSS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CrossOrderParameters CrossOrderParameters {
      get { return crossOrderParameters_; }
      set {
        crossOrderParameters_ = value;
      }
    }

    /// <summary>Field number for the "external_account_number" field.</summary>
    public const int ExternalAccountNumberFieldNumber = 43;
    private readonly static string ExternalAccountNumberDefaultValue = "";

    private string externalAccountNumber_;
    /// <summary>
    /// Unique identifier of account within the exchange's Member to place order on it.
    /// This account can be external for CQG. Placing order on such account may require
    /// providing additional exchange-specific information via Order.extra_attributes field.
    /// See order_2.ExternalAccount.external_account_number and trading_account_2.Account.allow_external_accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternalAccountNumber {
      get { return externalAccountNumber_ ?? ExternalAccountNumberDefaultValue; }
      set {
        externalAccountNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "external_account_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExternalAccountNumber {
      get { return externalAccountNumber_ != null; }
    }
    /// <summary>Clears the value of the "external_account_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExternalAccountNumber() {
      externalAccountNumber_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (ContractId != other.ContractId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (OrderType != other.OrderType) return false;
      if(!execInstructions_.Equals(other.execInstructions_)) return false;
      if (Duration != other.Duration) return false;
      if (GoodThruDate != other.GoodThruDate) return false;
      if (Side != other.Side) return false;
      if (ScaledLimitPrice != other.ScaledLimitPrice) return false;
      if (ScaledStopPrice != other.ScaledStopPrice) return false;
      if (Uint32Qty != other.Uint32Qty) return false;
      if (Uint32VisibleQty != other.Uint32VisibleQty) return false;
      if (Uint32MinVisibleQty != other.Uint32MinVisibleQty) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (!object.Equals(VisibleQty, other.VisibleQty)) return false;
      if (!object.Equals(MinVisibleQty, other.MinVisibleQty)) return false;
      if (IsManual != other.IsManual) return false;
      if (IsClose != other.IsClose) return false;
      if (IsAggressive != other.IsAggressive) return false;
      if (ScaledTrailOffset != other.ScaledTrailOffset) return false;
      if (TrailingPeg != other.TrailingPeg) return false;
      if (Uint32TriggerQty != other.Uint32TriggerQty) return false;
      if (!object.Equals(TriggerQty, other.TriggerQty)) return false;
      if (ActivationUtcTime != other.ActivationUtcTime) return false;
      if (!object.Equals(ActivationUtcTimestamp, other.ActivationUtcTimestamp)) return false;
      if (SuspensionUtcTime != other.SuspensionUtcTime) return false;
      if (!object.Equals(SuspensionUtcTimestamp, other.SuspensionUtcTimestamp)) return false;
      if(!userAttributes_.Equals(other.userAttributes_)) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      if (AlgoStrategy != other.AlgoStrategy) return false;
      if (GoodThruUtcTime != other.GoodThruUtcTime) return false;
      if (!object.Equals(GoodThruUtcTimestamp, other.GoodThruUtcTimestamp)) return false;
      if (IsUserAttributeChecked != other.IsUserAttributeChecked) return false;
      if (!object.Equals(StrategyTradingParameters, other.StrategyTradingParameters)) return false;
      if (OpenCloseInstruction != other.OpenCloseInstruction) return false;
      if (SpeculationType != other.SpeculationType) return false;
      if (ObsoleteDiscretionaryOffset != other.ObsoleteDiscretionaryOffset) return false;
      if (ContributorId != other.ContributorId) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      if (!object.Equals(CrossOrderParameters, other.CrossOrderParameters)) return false;
      if (ExternalAccountNumber != other.ExternalAccountNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      hash ^= execInstructions_.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGoodThruDate) hash ^= GoodThruDate.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasScaledLimitPrice) hash ^= ScaledLimitPrice.GetHashCode();
      if (HasScaledStopPrice) hash ^= ScaledStopPrice.GetHashCode();
      if (HasUint32Qty) hash ^= Uint32Qty.GetHashCode();
      if (HasUint32VisibleQty) hash ^= Uint32VisibleQty.GetHashCode();
      if (HasUint32MinVisibleQty) hash ^= Uint32MinVisibleQty.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (visibleQty_ != null) hash ^= VisibleQty.GetHashCode();
      if (minVisibleQty_ != null) hash ^= MinVisibleQty.GetHashCode();
      if (HasIsManual) hash ^= IsManual.GetHashCode();
      if (HasIsClose) hash ^= IsClose.GetHashCode();
      if (HasIsAggressive) hash ^= IsAggressive.GetHashCode();
      if (HasScaledTrailOffset) hash ^= ScaledTrailOffset.GetHashCode();
      if (HasTrailingPeg) hash ^= TrailingPeg.GetHashCode();
      if (HasUint32TriggerQty) hash ^= Uint32TriggerQty.GetHashCode();
      if (triggerQty_ != null) hash ^= TriggerQty.GetHashCode();
      if (HasActivationUtcTime) hash ^= ActivationUtcTime.GetHashCode();
      if (activationUtcTimestamp_ != null) hash ^= ActivationUtcTimestamp.GetHashCode();
      if (HasSuspensionUtcTime) hash ^= SuspensionUtcTime.GetHashCode();
      if (suspensionUtcTimestamp_ != null) hash ^= SuspensionUtcTimestamp.GetHashCode();
      hash ^= userAttributes_.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (HasAlgoStrategy) hash ^= AlgoStrategy.GetHashCode();
      if (HasGoodThruUtcTime) hash ^= GoodThruUtcTime.GetHashCode();
      if (goodThruUtcTimestamp_ != null) hash ^= GoodThruUtcTimestamp.GetHashCode();
      if (HasIsUserAttributeChecked) hash ^= IsUserAttributeChecked.GetHashCode();
      if (strategyTradingParameters_ != null) hash ^= StrategyTradingParameters.GetHashCode();
      if (HasOpenCloseInstruction) hash ^= OpenCloseInstruction.GetHashCode();
      if (HasSpeculationType) hash ^= SpeculationType.GetHashCode();
      if (HasObsoleteDiscretionaryOffset) hash ^= ObsoleteDiscretionaryOffset.GetHashCode();
      if (HasContributorId) hash ^= ContributorId.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (crossOrderParameters_ != null) hash ^= CrossOrderParameters.GetHashCode();
      if (HasExternalAccountNumber) hash ^= ExternalAccountNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasContractId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContractId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasOrderType) {
        output.WriteRawTag(40);
        output.WriteUInt32(OrderType);
      }
      execInstructions_.WriteTo(output, _repeated_execInstructions_codec);
      if (HasDuration) {
        output.WriteRawTag(56);
        output.WriteUInt32(Duration);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasSide) {
        output.WriteRawTag(72);
        output.WriteUInt32(Side);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(80);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(88);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(96);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(104);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(112);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasIsManual) {
        output.WriteRawTag(120);
        output.WriteBool(IsManual);
      }
      if (HasIsClose) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsClose);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsAggressive);
      }
      if (HasScaledTrailOffset) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(ScaledTrailOffset);
      }
      if (HasTrailingPeg) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TrailingPeg);
      }
      if (HasUint32TriggerQty) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Uint32TriggerQty);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (HasSuspensionUtcTime) {
        output.WriteRawTag(176, 1);
        output.WriteSInt64(SuspensionUtcTime);
      }
      userAttributes_.WriteTo(output, _repeated_userAttributes_codec);
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(192, 1);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (HasIsUserAttributeChecked) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsUserAttributeChecked);
      }
      if (strategyTradingParameters_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(StrategyTradingParameters);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      if (suspensionUtcTimestamp_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SuspensionUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasOpenCloseInstruction) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(OpenCloseInstruction);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(SpeculationType);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (qty_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Qty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(MinVisibleQty);
      }
      if (triggerQty_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TriggerQty);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (HasAlgoStrategy) {
        output.WriteRawTag(186, 2);
        output.WriteString(AlgoStrategy);
      }
      if (HasContributorId) {
        output.WriteRawTag(194, 2);
        output.WriteString(ContributorId);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(202, 2);
        output.WriteString(ExecutionSourceCode);
      }
      if (crossOrderParameters_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(CrossOrderParameters);
      }
      if (HasExternalAccountNumber) {
        output.WriteRawTag(218, 2);
        output.WriteString(ExternalAccountNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasContractId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContractId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasOrderType) {
        output.WriteRawTag(40);
        output.WriteUInt32(OrderType);
      }
      execInstructions_.WriteTo(ref output, _repeated_execInstructions_codec);
      if (HasDuration) {
        output.WriteRawTag(56);
        output.WriteUInt32(Duration);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasSide) {
        output.WriteRawTag(72);
        output.WriteUInt32(Side);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(80);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(88);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(96);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(104);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(112);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasIsManual) {
        output.WriteRawTag(120);
        output.WriteBool(IsManual);
      }
      if (HasIsClose) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsClose);
      }
      if (HasIsAggressive) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsAggressive);
      }
      if (HasScaledTrailOffset) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(ScaledTrailOffset);
      }
      if (HasTrailingPeg) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TrailingPeg);
      }
      if (HasUint32TriggerQty) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Uint32TriggerQty);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (HasSuspensionUtcTime) {
        output.WriteRawTag(176, 1);
        output.WriteSInt64(SuspensionUtcTime);
      }
      userAttributes_.WriteTo(ref output, _repeated_userAttributes_codec);
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(192, 1);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (HasIsUserAttributeChecked) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsUserAttributeChecked);
      }
      if (strategyTradingParameters_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(StrategyTradingParameters);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      if (suspensionUtcTimestamp_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SuspensionUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasOpenCloseInstruction) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(OpenCloseInstruction);
      }
      if (HasSpeculationType) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(SpeculationType);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (qty_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Qty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(MinVisibleQty);
      }
      if (triggerQty_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TriggerQty);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (HasAlgoStrategy) {
        output.WriteRawTag(186, 2);
        output.WriteString(AlgoStrategy);
      }
      if (HasContributorId) {
        output.WriteRawTag(194, 2);
        output.WriteString(ContributorId);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(202, 2);
        output.WriteString(ExecutionSourceCode);
      }
      if (crossOrderParameters_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(CrossOrderParameters);
      }
      if (HasExternalAccountNumber) {
        output.WriteRawTag(218, 2);
        output.WriteString(ExternalAccountNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderType);
      }
      size += execInstructions_.CalculateSize(_repeated_execInstructions_codec);
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGoodThruDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruDate);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (HasScaledLimitPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledStopPrice);
      }
      if (HasUint32Qty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32MinVisibleQty);
      }
      if (qty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (visibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinVisibleQty);
      }
      if (HasIsManual) {
        size += 1 + 1;
      }
      if (HasIsClose) {
        size += 2 + 1;
      }
      if (HasIsAggressive) {
        size += 2 + 1;
      }
      if (HasScaledTrailOffset) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ScaledTrailOffset);
      }
      if (HasTrailingPeg) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrailingPeg);
      }
      if (HasUint32TriggerQty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uint32TriggerQty);
      }
      if (triggerQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TriggerQty);
      }
      if (HasActivationUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ActivationUtcTime);
      }
      if (activationUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActivationUtcTimestamp);
      }
      if (HasSuspensionUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(SuspensionUtcTime);
      }
      if (suspensionUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuspensionUtcTimestamp);
      }
      size += userAttributes_.CalculateSize(_repeated_userAttributes_codec);
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (HasAlgoStrategy) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlgoStrategy);
      }
      if (HasGoodThruUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruUtcTime);
      }
      if (goodThruUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodThruUtcTimestamp);
      }
      if (HasIsUserAttributeChecked) {
        size += 2 + 1;
      }
      if (strategyTradingParameters_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrategyTradingParameters);
      }
      if (HasOpenCloseInstruction) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OpenCloseInstruction);
      }
      if (HasSpeculationType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpeculationType);
      }
      if (HasObsoleteDiscretionaryOffset) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsoleteDiscretionaryOffset);
      }
      if (HasContributorId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContributorId);
      }
      if (HasExecutionSourceCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (crossOrderParameters_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CrossOrderParameters);
      }
      if (HasExternalAccountNumber) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternalAccountNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      execInstructions_.Add(other.execInstructions_);
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGoodThruDate) {
        GoodThruDate = other.GoodThruDate;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasScaledLimitPrice) {
        ScaledLimitPrice = other.ScaledLimitPrice;
      }
      if (other.HasScaledStopPrice) {
        ScaledStopPrice = other.ScaledStopPrice;
      }
      if (other.HasUint32Qty) {
        Uint32Qty = other.Uint32Qty;
      }
      if (other.HasUint32VisibleQty) {
        Uint32VisibleQty = other.Uint32VisibleQty;
      }
      if (other.HasUint32MinVisibleQty) {
        Uint32MinVisibleQty = other.Uint32MinVisibleQty;
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          Qty = new global::Cqg.Decimal();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.visibleQty_ != null) {
        if (visibleQty_ == null) {
          VisibleQty = new global::Cqg.Decimal();
        }
        VisibleQty.MergeFrom(other.VisibleQty);
      }
      if (other.minVisibleQty_ != null) {
        if (minVisibleQty_ == null) {
          MinVisibleQty = new global::Cqg.Decimal();
        }
        MinVisibleQty.MergeFrom(other.MinVisibleQty);
      }
      if (other.HasIsManual) {
        IsManual = other.IsManual;
      }
      if (other.HasIsClose) {
        IsClose = other.IsClose;
      }
      if (other.HasIsAggressive) {
        IsAggressive = other.IsAggressive;
      }
      if (other.HasScaledTrailOffset) {
        ScaledTrailOffset = other.ScaledTrailOffset;
      }
      if (other.HasTrailingPeg) {
        TrailingPeg = other.TrailingPeg;
      }
      if (other.HasUint32TriggerQty) {
        Uint32TriggerQty = other.Uint32TriggerQty;
      }
      if (other.triggerQty_ != null) {
        if (triggerQty_ == null) {
          TriggerQty = new global::Cqg.Decimal();
        }
        TriggerQty.MergeFrom(other.TriggerQty);
      }
      if (other.HasActivationUtcTime) {
        ActivationUtcTime = other.ActivationUtcTime;
      }
      if (other.activationUtcTimestamp_ != null) {
        if (activationUtcTimestamp_ == null) {
          ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        ActivationUtcTimestamp.MergeFrom(other.ActivationUtcTimestamp);
      }
      if (other.HasSuspensionUtcTime) {
        SuspensionUtcTime = other.SuspensionUtcTime;
      }
      if (other.suspensionUtcTimestamp_ != null) {
        if (suspensionUtcTimestamp_ == null) {
          SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        SuspensionUtcTimestamp.MergeFrom(other.SuspensionUtcTimestamp);
      }
      userAttributes_.Add(other.userAttributes_);
      extraAttributes_.Add(other.extraAttributes_);
      if (other.HasAlgoStrategy) {
        AlgoStrategy = other.AlgoStrategy;
      }
      if (other.HasGoodThruUtcTime) {
        GoodThruUtcTime = other.GoodThruUtcTime;
      }
      if (other.goodThruUtcTimestamp_ != null) {
        if (goodThruUtcTimestamp_ == null) {
          GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        GoodThruUtcTimestamp.MergeFrom(other.GoodThruUtcTimestamp);
      }
      if (other.HasIsUserAttributeChecked) {
        IsUserAttributeChecked = other.IsUserAttributeChecked;
      }
      if (other.strategyTradingParameters_ != null) {
        if (strategyTradingParameters_ == null) {
          StrategyTradingParameters = new global::Strategy2.StrategyTradingParameters();
        }
        StrategyTradingParameters.MergeFrom(other.StrategyTradingParameters);
      }
      if (other.HasOpenCloseInstruction) {
        OpenCloseInstruction = other.OpenCloseInstruction;
      }
      if (other.HasSpeculationType) {
        SpeculationType = other.SpeculationType;
      }
      if (other.HasObsoleteDiscretionaryOffset) {
        ObsoleteDiscretionaryOffset = other.ObsoleteDiscretionaryOffset;
      }
      if (other.HasContributorId) {
        ContributorId = other.ContributorId;
      }
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      if (other.crossOrderParameters_ != null) {
        if (crossOrderParameters_ == null) {
          CrossOrderParameters = new global::Order2.CrossOrderParameters();
        }
        CrossOrderParameters.MergeFrom(other.CrossOrderParameters);
      }
      if (other.HasExternalAccountNumber) {
        ExternalAccountNumber = other.ExternalAccountNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            execInstructions_.AddEntriesFrom(input, _repeated_execInstructions_codec);
            break;
          }
          case 56: {
            Duration = input.ReadUInt32();
            break;
          }
          case 64: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 72: {
            Side = input.ReadUInt32();
            break;
          }
          case 80: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 88: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 96: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 104: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 112: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 120: {
            IsManual = input.ReadBool();
            break;
          }
          case 128: {
            IsClose = input.ReadBool();
            break;
          }
          case 136: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 144: {
            ScaledTrailOffset = input.ReadSInt32();
            break;
          }
          case 152: {
            TrailingPeg = input.ReadUInt32();
            break;
          }
          case 160: {
            Uint32TriggerQty = input.ReadUInt32();
            break;
          }
          case 168: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 176: {
            SuspensionUtcTime = input.ReadSInt64();
            break;
          }
          case 186: {
            userAttributes_.AddEntriesFrom(input, _repeated_userAttributes_codec);
            break;
          }
          case 192: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 200: {
            IsUserAttributeChecked = input.ReadBool();
            break;
          }
          case 210: {
            if (strategyTradingParameters_ == null) {
              StrategyTradingParameters = new global::Strategy2.StrategyTradingParameters();
            }
            input.ReadMessage(StrategyTradingParameters);
            break;
          }
          case 218: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 226: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 234: {
            if (suspensionUtcTimestamp_ == null) {
              SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SuspensionUtcTimestamp);
            break;
          }
          case 242: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 248: {
            OpenCloseInstruction = input.ReadUInt32();
            break;
          }
          case 256: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 264: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 274: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 282: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 290: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 298: {
            if (triggerQty_ == null) {
              TriggerQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(TriggerQty);
            break;
          }
          case 306: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
          case 314: {
            AlgoStrategy = input.ReadString();
            break;
          }
          case 322: {
            ContributorId = input.ReadString();
            break;
          }
          case 330: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
          case 338: {
            if (crossOrderParameters_ == null) {
              CrossOrderParameters = new global::Order2.CrossOrderParameters();
            }
            input.ReadMessage(CrossOrderParameters);
            break;
          }
          case 346: {
            ExternalAccountNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            execInstructions_.AddEntriesFrom(ref input, _repeated_execInstructions_codec);
            break;
          }
          case 56: {
            Duration = input.ReadUInt32();
            break;
          }
          case 64: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 72: {
            Side = input.ReadUInt32();
            break;
          }
          case 80: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 88: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 96: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 104: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 112: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 120: {
            IsManual = input.ReadBool();
            break;
          }
          case 128: {
            IsClose = input.ReadBool();
            break;
          }
          case 136: {
            IsAggressive = input.ReadBool();
            break;
          }
          case 144: {
            ScaledTrailOffset = input.ReadSInt32();
            break;
          }
          case 152: {
            TrailingPeg = input.ReadUInt32();
            break;
          }
          case 160: {
            Uint32TriggerQty = input.ReadUInt32();
            break;
          }
          case 168: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 176: {
            SuspensionUtcTime = input.ReadSInt64();
            break;
          }
          case 186: {
            userAttributes_.AddEntriesFrom(ref input, _repeated_userAttributes_codec);
            break;
          }
          case 192: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 200: {
            IsUserAttributeChecked = input.ReadBool();
            break;
          }
          case 210: {
            if (strategyTradingParameters_ == null) {
              StrategyTradingParameters = new global::Strategy2.StrategyTradingParameters();
            }
            input.ReadMessage(StrategyTradingParameters);
            break;
          }
          case 218: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 226: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 234: {
            if (suspensionUtcTimestamp_ == null) {
              SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SuspensionUtcTimestamp);
            break;
          }
          case 242: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 248: {
            OpenCloseInstruction = input.ReadUInt32();
            break;
          }
          case 256: {
            SpeculationType = input.ReadUInt32();
            break;
          }
          case 264: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 274: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 282: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 290: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 298: {
            if (triggerQty_ == null) {
              TriggerQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(TriggerQty);
            break;
          }
          case 306: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
          case 314: {
            AlgoStrategy = input.ReadString();
            break;
          }
          case 322: {
            ContributorId = input.ReadString();
            break;
          }
          case 330: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
          case 338: {
            if (crossOrderParameters_ == null) {
              CrossOrderParameters = new global::Order2.CrossOrderParameters();
            }
            input.ReadMessage(CrossOrderParameters);
            break;
          }
          case 346: {
            ExternalAccountNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Order message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Side {
        /// <summary>
        /// Describes purchasing side of a trade.
        /// </summary>
        [pbr::OriginalName("SIDE_BUY")] Buy = 1,
        /// <summary>
        /// Describes selling side of a trade.
        /// </summary>
        [pbr::OriginalName("SIDE_SELL")] Sell = 2,
      }

      public enum OrderType {
        /// <summary>
        /// Market order, buy or sell by the best available opposite price.
        /// </summary>
        [pbr::OriginalName("ORDER_TYPE_MKT")] Mkt = 1,
        /// <summary>
        /// Limit order, buy or sell by price that is the same or better then specified limit price.
        /// </summary>
        [pbr::OriginalName("ORDER_TYPE_LMT")] Lmt = 2,
        /// <summary>
        /// Stop order, Order becomes a Market when market reaches order's stop price
        /// (which is on opposite side of market).
        /// </summary>
        [pbr::OriginalName("ORDER_TYPE_STP")] Stp = 3,
        /// <summary>
        /// Stop-limit order, Order becomes a Limit when market reaches order's stop price.
        /// </summary>
        [pbr::OriginalName("ORDER_TYPE_STL")] Stl = 4,
        /// <summary>
        /// Cross order type. See also CrossOrderParameters message.
        /// </summary>
        [pbr::OriginalName("ORDER_TYPE_CROSS")] Cross = 5,
      }

      public enum ExecInstruction {
        /// <summary>
        /// All or None (fill order only completely).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_AON")] Aon = 1,
        /// <summary>
        /// Iceberg (show only part of order size).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_ICEBERG")] Iceberg = 2,
        /// <summary>
        /// Quantity triggered (aka DOM Triggered, honor additional quantity threshold for triggering).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_QT")] Qt = 3,
        /// <summary>
        /// Trailing order (price of the order is following market one direction by specific offset).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_TRAIL")] Trail = 4,
        /// <summary>
        /// Funari (Limit order becomes a Market on Close).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_FUNARI")] Funari = 5,
        /// <summary>
        /// Market if Touched (Limit order becomes a Market when market reaches order's limit price).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_MIT")] Mit = 6,
        /// <summary>
        /// Market Limit Market is a limit order that is used to place a buy order above the best offer
        /// to fill by the best offer or a sell order below the best bid to fill by the best bid.
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_MLM")] Mlm = 7,
        /// <summary>
        /// Post-only order. Ensures the limit order will be added to the order book and not match with
        /// a pre-existing order.
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_POSTONLY")] Postonly = 8,
        /// <summary>
        /// [obsolete] This execution instruction is no longer supported.
        /// </summary>
        [pbr::OriginalName("OBSOLETE_EXEC_INSTRUCTION_DISCRETION")] ObsoleteExecInstructionDiscretion = 9,
        /// <summary>
        /// Market with leftover as Limit (market order then unexecuted quantity becomes limit order at last price).
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_MTL")] Mtl = 10,
        /// <summary>
        /// An auction order is an order to buy or sell in the market at the Calculated Opening Price (COP).
        /// Unmatched auction orders are converted to limit orders on the market open.
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_AUCTION")] Auction = 11,
        /// <summary>
        /// None (this means "plain order without any exec instructions").
        /// This value shall not be explicitly provided in OrderRequest.
        /// </summary>
        [pbr::OriginalName("EXEC_INSTRUCTION_NONE")] None = 12,
      }

      public enum Duration {
        /// <summary>
        /// Day order. Order is working through the current trading day only.
        /// </summary>
        [pbr::OriginalName("DURATION_DAY")] Day = 1,
        /// <summary>
        /// Good Til Canceled. Order is working until canceled or until the contract is no longer available for trading.
        /// </summary>
        [pbr::OriginalName("DURATION_GTC")] Gtc = 2,
        /// <summary>
        /// Good Til Date. Order is working through the specified trade date (good_thru_date) for the contract.
        /// Note: Exchange must have a trading session for the contract for the specified trade date.
        /// </summary>
        [pbr::OriginalName("DURATION_GTD")] Gtd = 3,
        /// <summary>
        /// Good Til Time. Order is working until the specified time.
        /// </summary>
        [pbr::OriginalName("DURATION_GTT")] Gtt = 4,
        /// <summary>
        /// Fill and Kill. Immediately fill as many as possible and cancel the rest.
        /// </summary>
        [pbr::OriginalName("DURATION_FAK")] Fak = 5,
        /// <summary>
        /// Fill Or Kill. Immediately fill this order completely or cancel.
        /// </summary>
        [pbr::OriginalName("DURATION_FOK")] Fok = 6,
        /// <summary>
        /// At The Open. Buy or sell at the very beginning of the trading day.
        /// </summary>
        [pbr::OriginalName("DURATION_ATO")] Ato = 7,
        /// <summary>
        /// At The Close. Buy or sell at the close of the market, or as near to the closing price as possible.
        /// </summary>
        [pbr::OriginalName("DURATION_ATC")] Atc = 8,
        /// <summary>
        /// Good for auction. Order only valid for the next auction.
        /// </summary>
        [pbr::OriginalName("DURATION_GFA")] Gfa = 9,
      }

      public enum TrailingPeg {
        /// <summary>
        /// Trail the best bid.
        /// </summary>
        [pbr::OriginalName("TRAILING_PEG_BESTBID")] Bestbid = 1,
        /// <summary>
        /// Trail the best ask.
        /// </summary>
        [pbr::OriginalName("TRAILING_PEG_BESTASK")] Bestask = 2,
        /// <summary>
        /// Trail the last trade.
        /// </summary>
        [pbr::OriginalName("TRAILING_PEG_LASTTRADE")] Lasttrade = 3,
      }

      /// <summary>
      /// Specifies what the order is intended to do:
      /// open (or extend) a position on the same side as the order or close (or reduce) an opposite position.
      /// Applicable only for contracts with position_tracking
      /// either LONG_SHORT_WITH_IMPLIED_CLOSE or LONG_SHORT_WITH_EXPLICIT_CLOSE.
      /// </summary>
      public enum OpenCloseInstruction {
        /// <summary>
        /// Opening a new today position.
        /// </summary>
        [pbr::OriginalName("OPEN_CLOSE_INSTRUCTION_OPEN")] Open = 1,
        /// <summary>
        /// Closing or reducing (today only if ContractMetadata.position_tracking is LONG_SHORT_WITH_EXPLICIT_CLOSE,
        /// today or yesterday if LONG_SHORT_WITH_IMPLIED_CLOSE).
        /// </summary>
        [pbr::OriginalName("OPEN_CLOSE_INSTRUCTION_CLOSE")] Close = 2,
        /// <summary>
        /// Closing or reducing a yesterday position
        /// (if ContractMetadata.position_tracking is LONG_SHORT_WITH_EXPLICIT_CLOSE).
        /// </summary>
        [pbr::OriginalName("OPEN_CLOSE_INSTRUCTION_CLOSE_YESTERDAY")] CloseYesterday = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// One of the order related requests. There must be only one optional order submessage specified per request.
  /// E.g NewOrder, but not NewOrder and CancelOrder.
  /// It is required to perform a TradeSubscription before any order requests, the subscription is required
  /// in order to receive order events.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderRequest : pb::IMessage<OrderRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRequest> _parser = new pb::MessageParser<OrderRequest>(() => new OrderRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequest(OrderRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      newOrder_ = other.newOrder_ != null ? other.newOrder_.Clone() : null;
      modifyOrder_ = other.modifyOrder_ != null ? other.modifyOrder_.Clone() : null;
      cancelOrder_ = other.cancelOrder_ != null ? other.cancelOrder_.Clone() : null;
      cancelAllOrders_ = other.cancelAllOrders_ != null ? other.cancelAllOrders_.Clone() : null;
      liquidateAll_ = other.liquidateAll_ != null ? other.liquidateAll_.Clone() : null;
      goFlat_ = other.goFlat_ != null ? other.goFlat_.Clone() : null;
      suspendOrder_ = other.suspendOrder_ != null ? other.suspendOrder_.Clone() : null;
      activateOrder_ = other.activateOrder_ != null ? other.activateOrder_.Clone() : null;
      modifyUserAttributes_ = other.modifyUserAttributes_ != null ? other.modifyUserAttributes_.Clone() : null;
      newCompoundOrder_ = other.newCompoundOrder_ != null ? other.newCompoundOrder_.Clone() : null;
      syntheticLiquidate_ = other.syntheticLiquidate_ != null ? other.syntheticLiquidate_.Clone() : null;
      syntheticScratch_ = other.syntheticScratch_ != null ? other.syntheticScratch_.Clone() : null;
      goMarket_ = other.goMarket_ != null ? other.goMarket_.Clone() : null;
      approveOrder_ = other.approveOrder_ != null ? other.approveOrder_.Clone() : null;
      onBehalfOfUser_ = other.onBehalfOfUser_;
      clientRegulatoryAlgorithmId_ = other.clientRegulatoryAlgorithmId_;
      mifidAlgorithmId_ = other.mifidAlgorithmId_;
      mifidAlgorithmIdType_ = other.mifidAlgorithmIdType_;
      overrideExecutionWithinFirmWithNore_ = other.overrideExecutionWithinFirmWithNore_;
      mifidInvestmentDecisionId_ = other.mifidInvestmentDecisionId_;
      mifidInvestmentDecisionIdType_ = other.mifidInvestmentDecisionIdType_;
      mifidExecutionDecisionId_ = other.mifidExecutionDecisionId_;
      mifidExecutionDecisionIdType_ = other.mifidExecutionDecisionIdType_;
      isAutomated_ = other.isAutomated_;
      senderLocationId_ = other.senderLocationId_;
      senderOperatorId_ = other.senderOperatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderRequest Clone() {
      return new OrderRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of a request that should be unique enough to match with possible OrderRequestReject.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "new_order" field.</summary>
    public const int NewOrderFieldNumber = 2;
    private global::Order2.NewOrder newOrder_;
    /// <summary>
    /// New order request (place order).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.NewOrder NewOrder {
      get { return newOrder_; }
      set {
        newOrder_ = value;
      }
    }

    /// <summary>Field number for the "modify_order" field.</summary>
    public const int ModifyOrderFieldNumber = 3;
    private global::Order2.ModifyOrder modifyOrder_;
    /// <summary>
    /// Modify order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.ModifyOrder ModifyOrder {
      get { return modifyOrder_; }
      set {
        modifyOrder_ = value;
      }
    }

    /// <summary>Field number for the "cancel_order" field.</summary>
    public const int CancelOrderFieldNumber = 4;
    private global::Order2.CancelOrder cancelOrder_;
    /// <summary>
    /// Cancel order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CancelOrder CancelOrder {
      get { return cancelOrder_; }
      set {
        cancelOrder_ = value;
      }
    }

    /// <summary>Field number for the "cancel_all_orders" field.</summary>
    public const int CancelAllOrdersFieldNumber = 14;
    private global::Order2.CancelAllOrders cancelAllOrders_;
    /// <summary>
    /// Cancel all orders request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CancelAllOrders CancelAllOrders {
      get { return cancelAllOrders_; }
      set {
        cancelAllOrders_ = value;
      }
    }

    /// <summary>Field number for the "liquidate_all" field.</summary>
    public const int LiquidateAllFieldNumber = 20;
    private global::Order2.LiquidateAll liquidateAll_;
    /// <summary>
    /// Liquidate all open positions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.LiquidateAll LiquidateAll {
      get { return liquidateAll_; }
      set {
        liquidateAll_ = value;
      }
    }

    /// <summary>Field number for the "go_flat" field.</summary>
    public const int GoFlatFieldNumber = 21;
    private global::Order2.GoFlat goFlat_;
    /// <summary>
    /// Cancel all orders and liquidate all open positions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.GoFlat GoFlat {
      get { return goFlat_; }
      set {
        goFlat_ = value;
      }
    }

    /// <summary>Field number for the "suspend_order" field.</summary>
    public const int SuspendOrderFieldNumber = 10;
    private global::Order2.SuspendOrder suspendOrder_;
    /// <summary>
    /// Suspend (park) order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.SuspendOrder SuspendOrder {
      get { return suspendOrder_; }
      set {
        suspendOrder_ = value;
      }
    }

    /// <summary>Field number for the "activate_order" field.</summary>
    public const int ActivateOrderFieldNumber = 5;
    private global::Order2.ActivateOrder activateOrder_;
    /// <summary>
    /// Activate suspended (parked) order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.ActivateOrder ActivateOrder {
      get { return activateOrder_; }
      set {
        activateOrder_ = value;
      }
    }

    /// <summary>Field number for the "modify_user_attributes" field.</summary>
    public const int ModifyUserAttributesFieldNumber = 6;
    private global::UserAttribute2.ModifyUserAttributes modifyUserAttributes_;
    /// <summary>
    /// Modify order's user attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::UserAttribute2.ModifyUserAttributes ModifyUserAttributes {
      get { return modifyUserAttributes_; }
      set {
        modifyUserAttributes_ = value;
      }
    }

    /// <summary>Field number for the "new_compound_order" field.</summary>
    public const int NewCompoundOrderFieldNumber = 8;
    private global::Order2.NewCompoundOrder newCompoundOrder_;
    /// <summary>
    /// New compound order request (place compound order).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.NewCompoundOrder NewCompoundOrder {
      get { return newCompoundOrder_; }
      set {
        newCompoundOrder_ = value;
      }
    }

    /// <summary>Field number for the "synthetic_liquidate" field.</summary>
    public const int SyntheticLiquidateFieldNumber = 11;
    private global::Strategy2.SyntheticLiquidate syntheticLiquidate_;
    /// <summary>
    /// Synthetic hangup liquidation with a MKT order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.SyntheticLiquidate SyntheticLiquidate {
      get { return syntheticLiquidate_; }
      set {
        syntheticLiquidate_ = value;
      }
    }

    /// <summary>Field number for the "synthetic_scratch" field.</summary>
    public const int SyntheticScratchFieldNumber = 12;
    private global::Strategy2.SyntheticScratch syntheticScratch_;
    /// <summary>
    /// Synthetic hangup liquidation with a LMT order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.SyntheticScratch SyntheticScratch {
      get { return syntheticScratch_; }
      set {
        syntheticScratch_ = value;
      }
    }

    /// <summary>Field number for the "go_market" field.</summary>
    public const int GoMarketFieldNumber = 13;
    private global::Strategy2.GoMarket goMarket_;
    /// <summary>
    /// Modify a synthetic order to get an immediate fill.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Strategy2.GoMarket GoMarket {
      get { return goMarket_; }
      set {
        goMarket_ = value;
      }
    }

    /// <summary>Field number for the "approve_order" field.</summary>
    public const int ApproveOrderFieldNumber = 22;
    private global::Order2.ApproveOrder approveOrder_;
    /// <summary>
    /// Approve order with ORDER_TYPE_CROSS type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.ApproveOrder ApproveOrder {
      get { return approveOrder_; }
      set {
        approveOrder_ = value;
      }
    }

    /// <summary>Field number for the "on_behalf_of_user" field.</summary>
    public const int OnBehalfOfUserFieldNumber = 7;
    private readonly static string OnBehalfOfUserDefaultValue = "";

    private string onBehalfOfUser_;
    /// <summary>
    /// Username of the user on whose behalf the order request is being sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OnBehalfOfUser {
      get { return onBehalfOfUser_ ?? OnBehalfOfUserDefaultValue; }
      set {
        onBehalfOfUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "on_behalf_of_user" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOnBehalfOfUser {
      get { return onBehalfOfUser_ != null; }
    }
    /// <summary>Clears the value of the "on_behalf_of_user" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOnBehalfOfUser() {
      onBehalfOfUser_ = null;
    }

    /// <summary>Field number for the "client_regulatory_algorithm_id" field.</summary>
    public const int ClientRegulatoryAlgorithmIdFieldNumber = 9;
    private readonly static uint ClientRegulatoryAlgorithmIdDefaultValue = 0;

    private uint clientRegulatoryAlgorithmId_;
    /// <summary>
    /// Regulatory Algorithm ID for client algorithm associated with this order, if any.
    /// This field is applicable only for exchanges that use it, e.g. Eurex
    /// (not currently used, remains in protocol for backward compatibility only).
    /// TransactionStatus message echoes back the value from the latest order request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClientRegulatoryAlgorithmId {
      get { if ((_hasBits0 & 2) != 0) { return clientRegulatoryAlgorithmId_; } else { return ClientRegulatoryAlgorithmIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clientRegulatoryAlgorithmId_ = value;
      }
    }
    /// <summary>Gets whether the "client_regulatory_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientRegulatoryAlgorithmId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "client_regulatory_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientRegulatoryAlgorithmId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mifid_algorithm_id" field.</summary>
    public const int MifidAlgorithmIdFieldNumber = 15;
    private readonly static string MifidAlgorithmIdDefaultValue = "";

    private string mifidAlgorithmId_;
    /// <summary>
    /// MiFID algorithm ID for this order, contents depend on mifid_algorithm_id_type.
    /// Provide only when the order must have an algorithm as Execution Within Firm under MiFID II definitions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidAlgorithmId {
      get { return mifidAlgorithmId_ ?? MifidAlgorithmIdDefaultValue; }
      set {
        mifidAlgorithmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_algorithm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAlgorithmId {
      get { return mifidAlgorithmId_ != null; }
    }
    /// <summary>Clears the value of the "mifid_algorithm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAlgorithmId() {
      mifidAlgorithmId_ = null;
    }

    /// <summary>Field number for the "mifid_algorithm_id_type" field.</summary>
    public const int MifidAlgorithmIdTypeFieldNumber = 16;
    private readonly static uint MifidAlgorithmIdTypeDefaultValue = 0;

    private uint mifidAlgorithmIdType_;
    /// <summary>
    /// The type of mifid_algorithm_id supplied. One of MiFIDAlgorithmIdType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MifidAlgorithmIdType {
      get { if ((_hasBits0 & 4) != 0) { return mifidAlgorithmIdType_; } else { return MifidAlgorithmIdTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mifidAlgorithmIdType_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_algorithm_id_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidAlgorithmIdType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mifid_algorithm_id_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidAlgorithmIdType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "override_execution_within_firm_with_nore" field.</summary>
    public const int OverrideExecutionWithinFirmWithNoreFieldNumber = 17;
    private readonly static bool OverrideExecutionWithinFirmWithNoreDefaultValue = false;

    private bool overrideExecutionWithinFirmWithNore_;
    /// <summary>
    /// True instructs server to send this order as Execution Within Firm=CLIENT/NORE
    /// rather than the user's server-side configured trader short code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OverrideExecutionWithinFirmWithNore {
      get { if ((_hasBits0 & 8) != 0) { return overrideExecutionWithinFirmWithNore_; } else { return OverrideExecutionWithinFirmWithNoreDefaultValue; } }
      set {
        _hasBits0 |= 8;
        overrideExecutionWithinFirmWithNore_ = value;
      }
    }
    /// <summary>Gets whether the "override_execution_within_firm_with_nore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOverrideExecutionWithinFirmWithNore {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "override_execution_within_firm_with_nore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOverrideExecutionWithinFirmWithNore() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "mifid_investment_decision_id" field.</summary>
    public const int MifidInvestmentDecisionIdFieldNumber = 18;
    private readonly static string MifidInvestmentDecisionIdDefaultValue = "";

    private string mifidInvestmentDecisionId_;
    /// <summary>
    /// MiFID investment decision ID for this order, contents depend on mifid_investment_decision_id_type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidInvestmentDecisionId {
      get { return mifidInvestmentDecisionId_ ?? MifidInvestmentDecisionIdDefaultValue; }
      set {
        mifidInvestmentDecisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecisionId {
      get { return mifidInvestmentDecisionId_ != null; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecisionId() {
      mifidInvestmentDecisionId_ = null;
    }

    /// <summary>Field number for the "mifid_investment_decision_id_type" field.</summary>
    public const int MifidInvestmentDecisionIdTypeFieldNumber = 19;
    private readonly static uint MifidInvestmentDecisionIdTypeDefaultValue = 0;

    private uint mifidInvestmentDecisionIdType_;
    /// <summary>
    /// The type of mifid_investment_decision_id supplied. One of MiFIDInvestmentDecisionIdType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MifidInvestmentDecisionIdType {
      get { if ((_hasBits0 & 16) != 0) { return mifidInvestmentDecisionIdType_; } else { return MifidInvestmentDecisionIdTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        mifidInvestmentDecisionIdType_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_investment_decision_id_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidInvestmentDecisionIdType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "mifid_investment_decision_id_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidInvestmentDecisionIdType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mifid_execution_decision_id" field.</summary>
    public const int MifidExecutionDecisionIdFieldNumber = 24;
    private readonly static string MifidExecutionDecisionIdDefaultValue = "";

    private string mifidExecutionDecisionId_;
    /// <summary>
    /// MiFID execution decision ID for this order, contents depend on mifid_execution_decision_id_type.
    /// Note: this field is used only by approved clients for absolute pass-through; orders from any other
    /// clients that use the field will be rejected. Use general-purpose field mifid_algorithm_id with
    /// mifid_algorithm_id_type=1 (MIFID_ALGORITHM_ID_TYPE_EXTERNAL) when execution decision is made by
    /// an algorithm with registered short code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MifidExecutionDecisionId {
      get { return mifidExecutionDecisionId_ ?? MifidExecutionDecisionIdDefaultValue; }
      set {
        mifidExecutionDecisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecisionId {
      get { return mifidExecutionDecisionId_ != null; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecisionId() {
      mifidExecutionDecisionId_ = null;
    }

    /// <summary>Field number for the "mifid_execution_decision_id_type" field.</summary>
    public const int MifidExecutionDecisionIdTypeFieldNumber = 25;
    private readonly static uint MifidExecutionDecisionIdTypeDefaultValue = 0;

    private uint mifidExecutionDecisionIdType_;
    /// <summary>
    /// The type of mifid_execution_decision_id supplied. One of MiFIDExecutionDecisionIdType enum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MifidExecutionDecisionIdType {
      get { if ((_hasBits0 & 64) != 0) { return mifidExecutionDecisionIdType_; } else { return MifidExecutionDecisionIdTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        mifidExecutionDecisionIdType_ = value;
      }
    }
    /// <summary>Gets whether the "mifid_execution_decision_id_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifidExecutionDecisionIdType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "mifid_execution_decision_id_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifidExecutionDecisionIdType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_automated" field.</summary>
    public const int IsAutomatedFieldNumber = 23;
    private readonly static bool IsAutomatedDefaultValue = false;

    private bool isAutomated_;
    /// <summary>
    /// True if this is an automated order request, manual (request placed by the user direct action) otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutomated {
      get { if ((_hasBits0 & 32) != 0) { return isAutomated_; } else { return IsAutomatedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isAutomated_ = value;
      }
    }
    /// <summary>Gets whether the "is_automated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutomated {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_automated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutomated() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "sender_location_id" field.</summary>
    public const int SenderLocationIdFieldNumber = 26;
    private readonly static string SenderLocationIdDefaultValue = "";

    private string senderLocationId_;
    /// <summary>
    /// Message originator location (i.e. geographic location and/or desk, trader etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SenderLocationId {
      get { return senderLocationId_ ?? SenderLocationIdDefaultValue; }
      set {
        senderLocationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_location_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSenderLocationId {
      get { return senderLocationId_ != null; }
    }
    /// <summary>Clears the value of the "sender_location_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSenderLocationId() {
      senderLocationId_ = null;
    }

    /// <summary>Field number for the "sender_operator_id" field.</summary>
    public const int SenderOperatorIdFieldNumber = 27;
    private readonly static string SenderOperatorIdDefaultValue = "";

    private string senderOperatorId_;
    /// <summary>
    /// Message originator identifier (desk, trader etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SenderOperatorId {
      get { return senderOperatorId_ ?? SenderOperatorIdDefaultValue; }
      set {
        senderOperatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_operator_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSenderOperatorId {
      get { return senderOperatorId_ != null; }
    }
    /// <summary>Clears the value of the "sender_operator_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSenderOperatorId() {
      senderOperatorId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(NewOrder, other.NewOrder)) return false;
      if (!object.Equals(ModifyOrder, other.ModifyOrder)) return false;
      if (!object.Equals(CancelOrder, other.CancelOrder)) return false;
      if (!object.Equals(CancelAllOrders, other.CancelAllOrders)) return false;
      if (!object.Equals(LiquidateAll, other.LiquidateAll)) return false;
      if (!object.Equals(GoFlat, other.GoFlat)) return false;
      if (!object.Equals(SuspendOrder, other.SuspendOrder)) return false;
      if (!object.Equals(ActivateOrder, other.ActivateOrder)) return false;
      if (!object.Equals(ModifyUserAttributes, other.ModifyUserAttributes)) return false;
      if (!object.Equals(NewCompoundOrder, other.NewCompoundOrder)) return false;
      if (!object.Equals(SyntheticLiquidate, other.SyntheticLiquidate)) return false;
      if (!object.Equals(SyntheticScratch, other.SyntheticScratch)) return false;
      if (!object.Equals(GoMarket, other.GoMarket)) return false;
      if (!object.Equals(ApproveOrder, other.ApproveOrder)) return false;
      if (OnBehalfOfUser != other.OnBehalfOfUser) return false;
      if (ClientRegulatoryAlgorithmId != other.ClientRegulatoryAlgorithmId) return false;
      if (MifidAlgorithmId != other.MifidAlgorithmId) return false;
      if (MifidAlgorithmIdType != other.MifidAlgorithmIdType) return false;
      if (OverrideExecutionWithinFirmWithNore != other.OverrideExecutionWithinFirmWithNore) return false;
      if (MifidInvestmentDecisionId != other.MifidInvestmentDecisionId) return false;
      if (MifidInvestmentDecisionIdType != other.MifidInvestmentDecisionIdType) return false;
      if (MifidExecutionDecisionId != other.MifidExecutionDecisionId) return false;
      if (MifidExecutionDecisionIdType != other.MifidExecutionDecisionIdType) return false;
      if (IsAutomated != other.IsAutomated) return false;
      if (SenderLocationId != other.SenderLocationId) return false;
      if (SenderOperatorId != other.SenderOperatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (newOrder_ != null) hash ^= NewOrder.GetHashCode();
      if (modifyOrder_ != null) hash ^= ModifyOrder.GetHashCode();
      if (cancelOrder_ != null) hash ^= CancelOrder.GetHashCode();
      if (cancelAllOrders_ != null) hash ^= CancelAllOrders.GetHashCode();
      if (liquidateAll_ != null) hash ^= LiquidateAll.GetHashCode();
      if (goFlat_ != null) hash ^= GoFlat.GetHashCode();
      if (suspendOrder_ != null) hash ^= SuspendOrder.GetHashCode();
      if (activateOrder_ != null) hash ^= ActivateOrder.GetHashCode();
      if (modifyUserAttributes_ != null) hash ^= ModifyUserAttributes.GetHashCode();
      if (newCompoundOrder_ != null) hash ^= NewCompoundOrder.GetHashCode();
      if (syntheticLiquidate_ != null) hash ^= SyntheticLiquidate.GetHashCode();
      if (syntheticScratch_ != null) hash ^= SyntheticScratch.GetHashCode();
      if (goMarket_ != null) hash ^= GoMarket.GetHashCode();
      if (approveOrder_ != null) hash ^= ApproveOrder.GetHashCode();
      if (HasOnBehalfOfUser) hash ^= OnBehalfOfUser.GetHashCode();
      if (HasClientRegulatoryAlgorithmId) hash ^= ClientRegulatoryAlgorithmId.GetHashCode();
      if (HasMifidAlgorithmId) hash ^= MifidAlgorithmId.GetHashCode();
      if (HasMifidAlgorithmIdType) hash ^= MifidAlgorithmIdType.GetHashCode();
      if (HasOverrideExecutionWithinFirmWithNore) hash ^= OverrideExecutionWithinFirmWithNore.GetHashCode();
      if (HasMifidInvestmentDecisionId) hash ^= MifidInvestmentDecisionId.GetHashCode();
      if (HasMifidInvestmentDecisionIdType) hash ^= MifidInvestmentDecisionIdType.GetHashCode();
      if (HasMifidExecutionDecisionId) hash ^= MifidExecutionDecisionId.GetHashCode();
      if (HasMifidExecutionDecisionIdType) hash ^= MifidExecutionDecisionIdType.GetHashCode();
      if (HasIsAutomated) hash ^= IsAutomated.GetHashCode();
      if (HasSenderLocationId) hash ^= SenderLocationId.GetHashCode();
      if (HasSenderOperatorId) hash ^= SenderOperatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (newOrder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewOrder);
      }
      if (modifyOrder_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ModifyOrder);
      }
      if (cancelOrder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CancelOrder);
      }
      if (activateOrder_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActivateOrder);
      }
      if (modifyUserAttributes_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyUserAttributes);
      }
      if (HasOnBehalfOfUser) {
        output.WriteRawTag(58);
        output.WriteString(OnBehalfOfUser);
      }
      if (newCompoundOrder_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NewCompoundOrder);
      }
      if (HasClientRegulatoryAlgorithmId) {
        output.WriteRawTag(72);
        output.WriteUInt32(ClientRegulatoryAlgorithmId);
      }
      if (suspendOrder_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SuspendOrder);
      }
      if (syntheticLiquidate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SyntheticLiquidate);
      }
      if (syntheticScratch_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SyntheticScratch);
      }
      if (goMarket_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GoMarket);
      }
      if (cancelAllOrders_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(CancelAllOrders);
      }
      if (HasMifidAlgorithmId) {
        output.WriteRawTag(122);
        output.WriteString(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MifidAlgorithmIdType);
      }
      if (HasOverrideExecutionWithinFirmWithNore) {
        output.WriteRawTag(136, 1);
        output.WriteBool(OverrideExecutionWithinFirmWithNore);
      }
      if (HasMifidInvestmentDecisionId) {
        output.WriteRawTag(146, 1);
        output.WriteString(MifidInvestmentDecisionId);
      }
      if (HasMifidInvestmentDecisionIdType) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(MifidInvestmentDecisionIdType);
      }
      if (liquidateAll_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LiquidateAll);
      }
      if (goFlat_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GoFlat);
      }
      if (approveOrder_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ApproveOrder);
      }
      if (HasIsAutomated) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsAutomated);
      }
      if (HasMifidExecutionDecisionId) {
        output.WriteRawTag(194, 1);
        output.WriteString(MifidExecutionDecisionId);
      }
      if (HasMifidExecutionDecisionIdType) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(MifidExecutionDecisionIdType);
      }
      if (HasSenderLocationId) {
        output.WriteRawTag(210, 1);
        output.WriteString(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        output.WriteRawTag(218, 1);
        output.WriteString(SenderOperatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (newOrder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewOrder);
      }
      if (modifyOrder_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ModifyOrder);
      }
      if (cancelOrder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CancelOrder);
      }
      if (activateOrder_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActivateOrder);
      }
      if (modifyUserAttributes_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyUserAttributes);
      }
      if (HasOnBehalfOfUser) {
        output.WriteRawTag(58);
        output.WriteString(OnBehalfOfUser);
      }
      if (newCompoundOrder_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NewCompoundOrder);
      }
      if (HasClientRegulatoryAlgorithmId) {
        output.WriteRawTag(72);
        output.WriteUInt32(ClientRegulatoryAlgorithmId);
      }
      if (suspendOrder_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SuspendOrder);
      }
      if (syntheticLiquidate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SyntheticLiquidate);
      }
      if (syntheticScratch_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SyntheticScratch);
      }
      if (goMarket_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GoMarket);
      }
      if (cancelAllOrders_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(CancelAllOrders);
      }
      if (HasMifidAlgorithmId) {
        output.WriteRawTag(122);
        output.WriteString(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MifidAlgorithmIdType);
      }
      if (HasOverrideExecutionWithinFirmWithNore) {
        output.WriteRawTag(136, 1);
        output.WriteBool(OverrideExecutionWithinFirmWithNore);
      }
      if (HasMifidInvestmentDecisionId) {
        output.WriteRawTag(146, 1);
        output.WriteString(MifidInvestmentDecisionId);
      }
      if (HasMifidInvestmentDecisionIdType) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(MifidInvestmentDecisionIdType);
      }
      if (liquidateAll_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LiquidateAll);
      }
      if (goFlat_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GoFlat);
      }
      if (approveOrder_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ApproveOrder);
      }
      if (HasIsAutomated) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsAutomated);
      }
      if (HasMifidExecutionDecisionId) {
        output.WriteRawTag(194, 1);
        output.WriteString(MifidExecutionDecisionId);
      }
      if (HasMifidExecutionDecisionIdType) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(MifidExecutionDecisionIdType);
      }
      if (HasSenderLocationId) {
        output.WriteRawTag(210, 1);
        output.WriteString(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        output.WriteRawTag(218, 1);
        output.WriteString(SenderOperatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (newOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewOrder);
      }
      if (modifyOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyOrder);
      }
      if (cancelOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelOrder);
      }
      if (cancelAllOrders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelAllOrders);
      }
      if (liquidateAll_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiquidateAll);
      }
      if (goFlat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoFlat);
      }
      if (suspendOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuspendOrder);
      }
      if (activateOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivateOrder);
      }
      if (modifyUserAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyUserAttributes);
      }
      if (newCompoundOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewCompoundOrder);
      }
      if (syntheticLiquidate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyntheticLiquidate);
      }
      if (syntheticScratch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyntheticScratch);
      }
      if (goMarket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoMarket);
      }
      if (approveOrder_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ApproveOrder);
      }
      if (HasOnBehalfOfUser) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnBehalfOfUser);
      }
      if (HasClientRegulatoryAlgorithmId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientRegulatoryAlgorithmId);
      }
      if (HasMifidAlgorithmId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MifidAlgorithmId);
      }
      if (HasMifidAlgorithmIdType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MifidAlgorithmIdType);
      }
      if (HasOverrideExecutionWithinFirmWithNore) {
        size += 2 + 1;
      }
      if (HasMifidInvestmentDecisionId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidInvestmentDecisionId);
      }
      if (HasMifidInvestmentDecisionIdType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MifidInvestmentDecisionIdType);
      }
      if (HasMifidExecutionDecisionId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MifidExecutionDecisionId);
      }
      if (HasMifidExecutionDecisionIdType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MifidExecutionDecisionIdType);
      }
      if (HasIsAutomated) {
        size += 2 + 1;
      }
      if (HasSenderLocationId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SenderLocationId);
      }
      if (HasSenderOperatorId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SenderOperatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.newOrder_ != null) {
        if (newOrder_ == null) {
          NewOrder = new global::Order2.NewOrder();
        }
        NewOrder.MergeFrom(other.NewOrder);
      }
      if (other.modifyOrder_ != null) {
        if (modifyOrder_ == null) {
          ModifyOrder = new global::Order2.ModifyOrder();
        }
        ModifyOrder.MergeFrom(other.ModifyOrder);
      }
      if (other.cancelOrder_ != null) {
        if (cancelOrder_ == null) {
          CancelOrder = new global::Order2.CancelOrder();
        }
        CancelOrder.MergeFrom(other.CancelOrder);
      }
      if (other.cancelAllOrders_ != null) {
        if (cancelAllOrders_ == null) {
          CancelAllOrders = new global::Order2.CancelAllOrders();
        }
        CancelAllOrders.MergeFrom(other.CancelAllOrders);
      }
      if (other.liquidateAll_ != null) {
        if (liquidateAll_ == null) {
          LiquidateAll = new global::Order2.LiquidateAll();
        }
        LiquidateAll.MergeFrom(other.LiquidateAll);
      }
      if (other.goFlat_ != null) {
        if (goFlat_ == null) {
          GoFlat = new global::Order2.GoFlat();
        }
        GoFlat.MergeFrom(other.GoFlat);
      }
      if (other.suspendOrder_ != null) {
        if (suspendOrder_ == null) {
          SuspendOrder = new global::Order2.SuspendOrder();
        }
        SuspendOrder.MergeFrom(other.SuspendOrder);
      }
      if (other.activateOrder_ != null) {
        if (activateOrder_ == null) {
          ActivateOrder = new global::Order2.ActivateOrder();
        }
        ActivateOrder.MergeFrom(other.ActivateOrder);
      }
      if (other.modifyUserAttributes_ != null) {
        if (modifyUserAttributes_ == null) {
          ModifyUserAttributes = new global::UserAttribute2.ModifyUserAttributes();
        }
        ModifyUserAttributes.MergeFrom(other.ModifyUserAttributes);
      }
      if (other.newCompoundOrder_ != null) {
        if (newCompoundOrder_ == null) {
          NewCompoundOrder = new global::Order2.NewCompoundOrder();
        }
        NewCompoundOrder.MergeFrom(other.NewCompoundOrder);
      }
      if (other.syntheticLiquidate_ != null) {
        if (syntheticLiquidate_ == null) {
          SyntheticLiquidate = new global::Strategy2.SyntheticLiquidate();
        }
        SyntheticLiquidate.MergeFrom(other.SyntheticLiquidate);
      }
      if (other.syntheticScratch_ != null) {
        if (syntheticScratch_ == null) {
          SyntheticScratch = new global::Strategy2.SyntheticScratch();
        }
        SyntheticScratch.MergeFrom(other.SyntheticScratch);
      }
      if (other.goMarket_ != null) {
        if (goMarket_ == null) {
          GoMarket = new global::Strategy2.GoMarket();
        }
        GoMarket.MergeFrom(other.GoMarket);
      }
      if (other.approveOrder_ != null) {
        if (approveOrder_ == null) {
          ApproveOrder = new global::Order2.ApproveOrder();
        }
        ApproveOrder.MergeFrom(other.ApproveOrder);
      }
      if (other.HasOnBehalfOfUser) {
        OnBehalfOfUser = other.OnBehalfOfUser;
      }
      if (other.HasClientRegulatoryAlgorithmId) {
        ClientRegulatoryAlgorithmId = other.ClientRegulatoryAlgorithmId;
      }
      if (other.HasMifidAlgorithmId) {
        MifidAlgorithmId = other.MifidAlgorithmId;
      }
      if (other.HasMifidAlgorithmIdType) {
        MifidAlgorithmIdType = other.MifidAlgorithmIdType;
      }
      if (other.HasOverrideExecutionWithinFirmWithNore) {
        OverrideExecutionWithinFirmWithNore = other.OverrideExecutionWithinFirmWithNore;
      }
      if (other.HasMifidInvestmentDecisionId) {
        MifidInvestmentDecisionId = other.MifidInvestmentDecisionId;
      }
      if (other.HasMifidInvestmentDecisionIdType) {
        MifidInvestmentDecisionIdType = other.MifidInvestmentDecisionIdType;
      }
      if (other.HasMifidExecutionDecisionId) {
        MifidExecutionDecisionId = other.MifidExecutionDecisionId;
      }
      if (other.HasMifidExecutionDecisionIdType) {
        MifidExecutionDecisionIdType = other.MifidExecutionDecisionIdType;
      }
      if (other.HasIsAutomated) {
        IsAutomated = other.IsAutomated;
      }
      if (other.HasSenderLocationId) {
        SenderLocationId = other.SenderLocationId;
      }
      if (other.HasSenderOperatorId) {
        SenderOperatorId = other.SenderOperatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (newOrder_ == null) {
              NewOrder = new global::Order2.NewOrder();
            }
            input.ReadMessage(NewOrder);
            break;
          }
          case 26: {
            if (modifyOrder_ == null) {
              ModifyOrder = new global::Order2.ModifyOrder();
            }
            input.ReadMessage(ModifyOrder);
            break;
          }
          case 34: {
            if (cancelOrder_ == null) {
              CancelOrder = new global::Order2.CancelOrder();
            }
            input.ReadMessage(CancelOrder);
            break;
          }
          case 42: {
            if (activateOrder_ == null) {
              ActivateOrder = new global::Order2.ActivateOrder();
            }
            input.ReadMessage(ActivateOrder);
            break;
          }
          case 50: {
            if (modifyUserAttributes_ == null) {
              ModifyUserAttributes = new global::UserAttribute2.ModifyUserAttributes();
            }
            input.ReadMessage(ModifyUserAttributes);
            break;
          }
          case 58: {
            OnBehalfOfUser = input.ReadString();
            break;
          }
          case 66: {
            if (newCompoundOrder_ == null) {
              NewCompoundOrder = new global::Order2.NewCompoundOrder();
            }
            input.ReadMessage(NewCompoundOrder);
            break;
          }
          case 72: {
            ClientRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (suspendOrder_ == null) {
              SuspendOrder = new global::Order2.SuspendOrder();
            }
            input.ReadMessage(SuspendOrder);
            break;
          }
          case 90: {
            if (syntheticLiquidate_ == null) {
              SyntheticLiquidate = new global::Strategy2.SyntheticLiquidate();
            }
            input.ReadMessage(SyntheticLiquidate);
            break;
          }
          case 98: {
            if (syntheticScratch_ == null) {
              SyntheticScratch = new global::Strategy2.SyntheticScratch();
            }
            input.ReadMessage(SyntheticScratch);
            break;
          }
          case 106: {
            if (goMarket_ == null) {
              GoMarket = new global::Strategy2.GoMarket();
            }
            input.ReadMessage(GoMarket);
            break;
          }
          case 114: {
            if (cancelAllOrders_ == null) {
              CancelAllOrders = new global::Order2.CancelAllOrders();
            }
            input.ReadMessage(CancelAllOrders);
            break;
          }
          case 122: {
            MifidAlgorithmId = input.ReadString();
            break;
          }
          case 128: {
            MifidAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 136: {
            OverrideExecutionWithinFirmWithNore = input.ReadBool();
            break;
          }
          case 146: {
            MifidInvestmentDecisionId = input.ReadString();
            break;
          }
          case 152: {
            MifidInvestmentDecisionIdType = input.ReadUInt32();
            break;
          }
          case 162: {
            if (liquidateAll_ == null) {
              LiquidateAll = new global::Order2.LiquidateAll();
            }
            input.ReadMessage(LiquidateAll);
            break;
          }
          case 170: {
            if (goFlat_ == null) {
              GoFlat = new global::Order2.GoFlat();
            }
            input.ReadMessage(GoFlat);
            break;
          }
          case 178: {
            if (approveOrder_ == null) {
              ApproveOrder = new global::Order2.ApproveOrder();
            }
            input.ReadMessage(ApproveOrder);
            break;
          }
          case 184: {
            IsAutomated = input.ReadBool();
            break;
          }
          case 194: {
            MifidExecutionDecisionId = input.ReadString();
            break;
          }
          case 200: {
            MifidExecutionDecisionIdType = input.ReadUInt32();
            break;
          }
          case 210: {
            SenderLocationId = input.ReadString();
            break;
          }
          case 218: {
            SenderOperatorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (newOrder_ == null) {
              NewOrder = new global::Order2.NewOrder();
            }
            input.ReadMessage(NewOrder);
            break;
          }
          case 26: {
            if (modifyOrder_ == null) {
              ModifyOrder = new global::Order2.ModifyOrder();
            }
            input.ReadMessage(ModifyOrder);
            break;
          }
          case 34: {
            if (cancelOrder_ == null) {
              CancelOrder = new global::Order2.CancelOrder();
            }
            input.ReadMessage(CancelOrder);
            break;
          }
          case 42: {
            if (activateOrder_ == null) {
              ActivateOrder = new global::Order2.ActivateOrder();
            }
            input.ReadMessage(ActivateOrder);
            break;
          }
          case 50: {
            if (modifyUserAttributes_ == null) {
              ModifyUserAttributes = new global::UserAttribute2.ModifyUserAttributes();
            }
            input.ReadMessage(ModifyUserAttributes);
            break;
          }
          case 58: {
            OnBehalfOfUser = input.ReadString();
            break;
          }
          case 66: {
            if (newCompoundOrder_ == null) {
              NewCompoundOrder = new global::Order2.NewCompoundOrder();
            }
            input.ReadMessage(NewCompoundOrder);
            break;
          }
          case 72: {
            ClientRegulatoryAlgorithmId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (suspendOrder_ == null) {
              SuspendOrder = new global::Order2.SuspendOrder();
            }
            input.ReadMessage(SuspendOrder);
            break;
          }
          case 90: {
            if (syntheticLiquidate_ == null) {
              SyntheticLiquidate = new global::Strategy2.SyntheticLiquidate();
            }
            input.ReadMessage(SyntheticLiquidate);
            break;
          }
          case 98: {
            if (syntheticScratch_ == null) {
              SyntheticScratch = new global::Strategy2.SyntheticScratch();
            }
            input.ReadMessage(SyntheticScratch);
            break;
          }
          case 106: {
            if (goMarket_ == null) {
              GoMarket = new global::Strategy2.GoMarket();
            }
            input.ReadMessage(GoMarket);
            break;
          }
          case 114: {
            if (cancelAllOrders_ == null) {
              CancelAllOrders = new global::Order2.CancelAllOrders();
            }
            input.ReadMessage(CancelAllOrders);
            break;
          }
          case 122: {
            MifidAlgorithmId = input.ReadString();
            break;
          }
          case 128: {
            MifidAlgorithmIdType = input.ReadUInt32();
            break;
          }
          case 136: {
            OverrideExecutionWithinFirmWithNore = input.ReadBool();
            break;
          }
          case 146: {
            MifidInvestmentDecisionId = input.ReadString();
            break;
          }
          case 152: {
            MifidInvestmentDecisionIdType = input.ReadUInt32();
            break;
          }
          case 162: {
            if (liquidateAll_ == null) {
              LiquidateAll = new global::Order2.LiquidateAll();
            }
            input.ReadMessage(LiquidateAll);
            break;
          }
          case 170: {
            if (goFlat_ == null) {
              GoFlat = new global::Order2.GoFlat();
            }
            input.ReadMessage(GoFlat);
            break;
          }
          case 178: {
            if (approveOrder_ == null) {
              ApproveOrder = new global::Order2.ApproveOrder();
            }
            input.ReadMessage(ApproveOrder);
            break;
          }
          case 184: {
            IsAutomated = input.ReadBool();
            break;
          }
          case 194: {
            MifidExecutionDecisionId = input.ReadString();
            break;
          }
          case 200: {
            MifidExecutionDecisionIdType = input.ReadUInt32();
            break;
          }
          case 210: {
            SenderLocationId = input.ReadString();
            break;
          }
          case 218: {
            SenderOperatorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// New order request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NewOrder : pb::IMessage<NewOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewOrder> _parser = new pb::MessageParser<NewOrder>(() => new NewOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NewOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewOrder(NewOrder other) : this() {
      _hasBits0 = other._hasBits0;
      order_ = other.order_ != null ? other.order_.Clone() : null;
      suspend_ = other.suspend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewOrder Clone() {
      return new NewOrder(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private global::Order2.Order order_;
    /// <summary>
    /// Order to place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "suspend" field.</summary>
    public const int SuspendFieldNumber = 2;
    private readonly static bool SuspendDefaultValue = false;

    private bool suspend_;
    /// <summary>
    /// True if order should be suspended (parked) and wait a separate activate request or activation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Suspend {
      get { if ((_hasBits0 & 1) != 0) { return suspend_; } else { return SuspendDefaultValue; } }
      set {
        _hasBits0 |= 1;
        suspend_ = value;
      }
    }
    /// <summary>Gets whether the "suspend" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspend {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "suspend" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspend() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NewOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NewOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Order, other.Order)) return false;
      if (Suspend != other.Suspend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (order_ != null) hash ^= Order.GetHashCode();
      if (HasSuspend) hash ^= Suspend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (order_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Order);
      }
      if (HasSuspend) {
        output.WriteRawTag(16);
        output.WriteBool(Suspend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (order_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Order);
      }
      if (HasSuspend) {
        output.WriteRawTag(16);
        output.WriteBool(Suspend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (HasSuspend) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NewOrder other) {
      if (other == null) {
        return;
      }
      if (other.order_ != null) {
        if (order_ == null) {
          Order = new global::Order2.Order();
        }
        Order.MergeFrom(other.Order);
      }
      if (other.HasSuspend) {
        Suspend = other.Suspend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 16: {
            Suspend = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 16: {
            Suspend = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Modify order request, include only fields that are supposed to be modified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ModifyOrder : pb::IMessage<ModifyOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModifyOrder> _parser = new pb::MessageParser<ModifyOrder>(() => new ModifyOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ModifyOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyOrder(ModifyOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      origClOrderId_ = other.origClOrderId_;
      clOrderId_ = other.clOrderId_;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      uint32Qty_ = other.uint32Qty_;
      uint32VisibleQty_ = other.uint32VisibleQty_;
      uint32MinVisibleQty_ = other.uint32MinVisibleQty_;
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      visibleQty_ = other.visibleQty_ != null ? other.visibleQty_.Clone() : null;
      minVisibleQty_ = other.minVisibleQty_ != null ? other.minVisibleQty_.Clone() : null;
      scaledLimitPrice_ = other.scaledLimitPrice_;
      scaledStopPrice_ = other.scaledStopPrice_;
      activationUtcTime_ = other.activationUtcTime_;
      activationUtcTimestamp_ = other.activationUtcTimestamp_ != null ? other.activationUtcTimestamp_.Clone() : null;
      removeActivationTime_ = other.removeActivationTime_;
      suspensionUtcTime_ = other.suspensionUtcTime_;
      suspensionUtcTimestamp_ = other.suspensionUtcTimestamp_ != null ? other.suspensionUtcTimestamp_.Clone() : null;
      removeSuspensionUtcTime_ = other.removeSuspensionUtcTime_;
      duration_ = other.duration_;
      goodThruDate_ = other.goodThruDate_;
      goodThruUtcTime_ = other.goodThruUtcTime_;
      goodThruUtcTimestamp_ = other.goodThruUtcTimestamp_ != null ? other.goodThruUtcTimestamp_.Clone() : null;
      obsoleteDiscretionaryOffset_ = other.obsoleteDiscretionaryOffset_;
      extraAttributes_ = other.extraAttributes_.Clone();
      executionSourceCode_ = other.executionSourceCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyOrder Clone() {
      return new ModifyOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id assigned by server after last modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "orig_cl_order_id" field.</summary>
    public const int OrigClOrderIdFieldNumber = 3;
    private readonly static string OrigClOrderIdDefaultValue = "";

    private string origClOrderId_;
    /// <summary>
    /// This client order ID of the order to modify.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigClOrderId {
      get { return origClOrderId_ ?? OrigClOrderIdDefaultValue; }
      set {
        origClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orig_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigClOrderId {
      get { return origClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "orig_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigClOrderId() {
      origClOrderId_ = null;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 4;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of this modify request (will become new client order Id if modify is accepted).
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 5;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 18;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "uint32_qty" field.</summary>
    public const int Uint32QtyFieldNumber = 6;
    private readonly static uint Uint32QtyDefaultValue = 0;

    private uint uint32Qty_;
    /// <summary>
    /// Note: use qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32Qty {
      get { if ((_hasBits0 & 4) != 0) { return uint32Qty_; } else { return Uint32QtyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        uint32Qty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32Qty {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "uint32_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32Qty() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "uint32_visible_qty" field.</summary>
    public const int Uint32VisibleQtyFieldNumber = 7;
    private readonly static uint Uint32VisibleQtyDefaultValue = 0;

    private uint uint32VisibleQty_;
    /// <summary>
    /// Note: use visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32VisibleQty {
      get { if ((_hasBits0 & 8) != 0) { return uint32VisibleQty_; } else { return Uint32VisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        uint32VisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32VisibleQty {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "uint32_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32VisibleQty() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "uint32_min_visible_qty" field.</summary>
    public const int Uint32MinVisibleQtyFieldNumber = 8;
    private readonly static uint Uint32MinVisibleQtyDefaultValue = 0;

    private uint uint32MinVisibleQty_;
    /// <summary>
    /// Note: use min_visible_qty field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uint32MinVisibleQty {
      get { if ((_hasBits0 & 16) != 0) { return uint32MinVisibleQty_; } else { return Uint32MinVisibleQtyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uint32MinVisibleQty_ = value;
      }
    }
    /// <summary>Gets whether the "uint32_min_visible_qty" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUint32MinVisibleQty {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uint32_min_visible_qty" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUint32MinVisibleQty() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 23;
    private global::Cqg.Decimal qty_;
    /// <summary>
    /// Order size what the client wants the total size to become.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "visible_qty" field.</summary>
    public const int VisibleQtyFieldNumber = 24;
    private global::Cqg.Decimal visibleQty_;
    /// <summary>
    /// What the client wants the visible size to become.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal VisibleQty {
      get { return visibleQty_; }
      set {
        visibleQty_ = value;
      }
    }

    /// <summary>Field number for the "min_visible_qty" field.</summary>
    public const int MinVisibleQtyFieldNumber = 25;
    private global::Cqg.Decimal minVisibleQty_;
    /// <summary>
    /// What the client wants the minimum visible size to become.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal MinVisibleQty {
      get { return minVisibleQty_; }
      set {
        minVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "scaled_limit_price" field.</summary>
    public const int ScaledLimitPriceFieldNumber = 9;
    private readonly static long ScaledLimitPriceDefaultValue = 0L;

    private long scaledLimitPrice_;
    /// <summary>
    /// What the client wants the limit price to become.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledLimitPrice {
      get { if ((_hasBits0 & 32) != 0) { return scaledLimitPrice_; } else { return ScaledLimitPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_limit_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledLimitPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_limit_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledLimitPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scaled_stop_price" field.</summary>
    public const int ScaledStopPriceFieldNumber = 10;
    private readonly static long ScaledStopPriceDefaultValue = 0L;

    private long scaledStopPrice_;
    /// <summary>
    /// What the client wants the stop price to become.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ScaledStopPrice {
      get { if ((_hasBits0 & 64) != 0) { return scaledStopPrice_; } else { return ScaledStopPriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scaledStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_stop_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaledStopPrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scaled_stop_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaledStopPrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "activation_utc_time" field.</summary>
    public const int ActivationUtcTimeFieldNumber = 11;
    private readonly static long ActivationUtcTimeDefaultValue = 0L;

    private long activationUtcTime_;
    /// <summary>
    /// What the client wants the activation time to become (UTC).
    /// Note: use activation_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActivationUtcTime {
      get { if ((_hasBits0 & 128) != 0) { return activationUtcTime_; } else { return ActivationUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        activationUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "activation_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActivationUtcTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "activation_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActivationUtcTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "activation_utc_timestamp" field.</summary>
    public const int ActivationUtcTimestampFieldNumber = 19;
    private global::Google.Protobuf.Timestamp activationUtcTimestamp_;
    /// <summary>
    /// What the client wants the activation time to become (UTC).
    /// If specified it's used instead of activation_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp ActivationUtcTimestamp {
      get { return activationUtcTimestamp_; }
      set {
        activationUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "remove_activation_time" field.</summary>
    public const int RemoveActivationTimeFieldNumber = 12;
    private readonly static bool RemoveActivationTimeDefaultValue = false;

    private bool removeActivationTime_;
    /// <summary>
    /// True if activation time should be removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RemoveActivationTime {
      get { if ((_hasBits0 & 256) != 0) { return removeActivationTime_; } else { return RemoveActivationTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        removeActivationTime_ = value;
      }
    }
    /// <summary>Gets whether the "remove_activation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemoveActivationTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "remove_activation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemoveActivationTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "suspension_utc_time" field.</summary>
    public const int SuspensionUtcTimeFieldNumber = 13;
    private readonly static long SuspensionUtcTimeDefaultValue = 0L;

    private long suspensionUtcTime_;
    /// <summary>
    /// What the client wants the suspension time to become (UTC).
    /// Note: use suspension_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SuspensionUtcTime {
      get { if ((_hasBits0 & 512) != 0) { return suspensionUtcTime_; } else { return SuspensionUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        suspensionUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "suspension_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspensionUtcTime {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "suspension_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspensionUtcTime() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "suspension_utc_timestamp" field.</summary>
    public const int SuspensionUtcTimestampFieldNumber = 20;
    private global::Google.Protobuf.Timestamp suspensionUtcTimestamp_;
    /// <summary>
    /// What the client wants the suspension time to become (UTC).
    /// If specified it's used instead of suspension_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp SuspensionUtcTimestamp {
      get { return suspensionUtcTimestamp_; }
      set {
        suspensionUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "remove_suspension_utc_time" field.</summary>
    public const int RemoveSuspensionUtcTimeFieldNumber = 14;
    private readonly static bool RemoveSuspensionUtcTimeDefaultValue = false;

    private bool removeSuspensionUtcTime_;
    /// <summary>
    /// True if suspension time should be removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RemoveSuspensionUtcTime {
      get { if ((_hasBits0 & 1024) != 0) { return removeSuspensionUtcTime_; } else { return RemoveSuspensionUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        removeSuspensionUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "remove_suspension_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemoveSuspensionUtcTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "remove_suspension_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemoveSuspensionUtcTime() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 15;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    /// <summary>
    /// What the client wants the order duration to become.
    /// This field is associated with Order.Duration enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Duration {
      get { if ((_hasBits0 & 2048) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "good_thru_date" field.</summary>
    public const int GoodThruDateFieldNumber = 16;
    private readonly static long GoodThruDateDefaultValue = 0L;

    private long goodThruDate_;
    /// <summary>
    /// What the client wants the order expiration date to become (see Order.good_thru_date).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruDate {
      get { if ((_hasBits0 & 4096) != 0) { return goodThruDate_; } else { return GoodThruDateDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        goodThruDate_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruDate {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruDate() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "good_thru_utc_time" field.</summary>
    public const int GoodThruUtcTimeFieldNumber = 17;
    private readonly static long GoodThruUtcTimeDefaultValue = 0L;

    private long goodThruUtcTime_;
    /// <summary>
    /// What the client wants the order expiration time to become (see Order.good_thru_utc_time).
    /// Note: use good_thru_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GoodThruUtcTime {
      get { if ((_hasBits0 & 8192) != 0) { return goodThruUtcTime_; } else { return GoodThruUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        goodThruUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "good_thru_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodThruUtcTime {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "good_thru_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodThruUtcTime() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "good_thru_utc_timestamp" field.</summary>
    public const int GoodThruUtcTimestampFieldNumber = 21;
    private global::Google.Protobuf.Timestamp goodThruUtcTimestamp_;
    /// <summary>
    /// What the client wants the order expiration time to become (see Order.good_thru_utc_timestamp).
    /// If specified by the user it's used instead of good_thru_utc_time field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp GoodThruUtcTimestamp {
      get { return goodThruUtcTimestamp_; }
      set {
        goodThruUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "obsolete_discretionary_offset" field.</summary>
    public const int ObsoleteDiscretionaryOffsetFieldNumber = 22;
    private readonly static uint ObsoleteDiscretionaryOffsetDefaultValue = 0;

    private uint obsoleteDiscretionaryOffset_;
    /// <summary>
    /// [obsolete] This operation is no longer supported.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ObsoleteDiscretionaryOffset {
      get { if ((_hasBits0 & 16384) != 0) { return obsoleteDiscretionaryOffset_; } else { return ObsoleteDiscretionaryOffsetDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        obsoleteDiscretionaryOffset_ = value;
      }
    }
    /// <summary>Gets whether the "obsolete_discretionary_offset" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObsoleteDiscretionaryOffset {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "obsolete_discretionary_offset" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObsoleteDiscretionaryOffset() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 26;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(210, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of order extra attributes, can be used to remove or modify existing or add new attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 27;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value of the operation.
    /// See Order.execution_source_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ModifyOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ModifyOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      if (OrigClOrderId != other.OrigClOrderId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (Uint32Qty != other.Uint32Qty) return false;
      if (Uint32VisibleQty != other.Uint32VisibleQty) return false;
      if (Uint32MinVisibleQty != other.Uint32MinVisibleQty) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (!object.Equals(VisibleQty, other.VisibleQty)) return false;
      if (!object.Equals(MinVisibleQty, other.MinVisibleQty)) return false;
      if (ScaledLimitPrice != other.ScaledLimitPrice) return false;
      if (ScaledStopPrice != other.ScaledStopPrice) return false;
      if (ActivationUtcTime != other.ActivationUtcTime) return false;
      if (!object.Equals(ActivationUtcTimestamp, other.ActivationUtcTimestamp)) return false;
      if (RemoveActivationTime != other.RemoveActivationTime) return false;
      if (SuspensionUtcTime != other.SuspensionUtcTime) return false;
      if (!object.Equals(SuspensionUtcTimestamp, other.SuspensionUtcTimestamp)) return false;
      if (RemoveSuspensionUtcTime != other.RemoveSuspensionUtcTime) return false;
      if (Duration != other.Duration) return false;
      if (GoodThruDate != other.GoodThruDate) return false;
      if (GoodThruUtcTime != other.GoodThruUtcTime) return false;
      if (!object.Equals(GoodThruUtcTimestamp, other.GoodThruUtcTimestamp)) return false;
      if (ObsoleteDiscretionaryOffset != other.ObsoleteDiscretionaryOffset) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOrigClOrderId) hash ^= OrigClOrderId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasUint32Qty) hash ^= Uint32Qty.GetHashCode();
      if (HasUint32VisibleQty) hash ^= Uint32VisibleQty.GetHashCode();
      if (HasUint32MinVisibleQty) hash ^= Uint32MinVisibleQty.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (visibleQty_ != null) hash ^= VisibleQty.GetHashCode();
      if (minVisibleQty_ != null) hash ^= MinVisibleQty.GetHashCode();
      if (HasScaledLimitPrice) hash ^= ScaledLimitPrice.GetHashCode();
      if (HasScaledStopPrice) hash ^= ScaledStopPrice.GetHashCode();
      if (HasActivationUtcTime) hash ^= ActivationUtcTime.GetHashCode();
      if (activationUtcTimestamp_ != null) hash ^= ActivationUtcTimestamp.GetHashCode();
      if (HasRemoveActivationTime) hash ^= RemoveActivationTime.GetHashCode();
      if (HasSuspensionUtcTime) hash ^= SuspensionUtcTime.GetHashCode();
      if (suspensionUtcTimestamp_ != null) hash ^= SuspensionUtcTimestamp.GetHashCode();
      if (HasRemoveSuspensionUtcTime) hash ^= RemoveSuspensionUtcTime.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGoodThruDate) hash ^= GoodThruDate.GetHashCode();
      if (HasGoodThruUtcTime) hash ^= GoodThruUtcTime.GetHashCode();
      if (goodThruUtcTimestamp_ != null) hash ^= GoodThruUtcTimestamp.GetHashCode();
      if (HasObsoleteDiscretionaryOffset) hash ^= ObsoleteDiscretionaryOffset.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(56);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(64);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(80);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(88);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (HasRemoveActivationTime) {
        output.WriteRawTag(96);
        output.WriteBool(RemoveActivationTime);
      }
      if (HasSuspensionUtcTime) {
        output.WriteRawTag(104);
        output.WriteSInt64(SuspensionUtcTime);
      }
      if (HasRemoveSuspensionUtcTime) {
        output.WriteRawTag(112);
        output.WriteBool(RemoveSuspensionUtcTime);
      }
      if (HasDuration) {
        output.WriteRawTag(120);
        output.WriteUInt32(Duration);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      if (suspensionUtcTimestamp_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SuspensionUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (qty_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Qty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinVisibleQty);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        output.WriteRawTag(218, 1);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasUint32Qty) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        output.WriteRawTag(56);
        output.WriteUInt32(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        output.WriteRawTag(64);
        output.WriteUInt32(Uint32MinVisibleQty);
      }
      if (HasScaledLimitPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        output.WriteRawTag(80);
        output.WriteSInt64(ScaledStopPrice);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(88);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (HasRemoveActivationTime) {
        output.WriteRawTag(96);
        output.WriteBool(RemoveActivationTime);
      }
      if (HasSuspensionUtcTime) {
        output.WriteRawTag(104);
        output.WriteSInt64(SuspensionUtcTime);
      }
      if (HasRemoveSuspensionUtcTime) {
        output.WriteRawTag(112);
        output.WriteBool(RemoveSuspensionUtcTime);
      }
      if (HasDuration) {
        output.WriteRawTag(120);
        output.WriteUInt32(Duration);
      }
      if (HasGoodThruDate) {
        output.WriteRawTag(128, 1);
        output.WriteSInt64(GoodThruDate);
      }
      if (HasGoodThruUtcTime) {
        output.WriteRawTag(136, 1);
        output.WriteSInt64(GoodThruUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      if (suspensionUtcTimestamp_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SuspensionUtcTimestamp);
      }
      if (goodThruUtcTimestamp_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GoodThruUtcTimestamp);
      }
      if (HasObsoleteDiscretionaryOffset) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(ObsoleteDiscretionaryOffset);
      }
      if (qty_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Qty);
      }
      if (visibleQty_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinVisibleQty);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        output.WriteRawTag(218, 1);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasOrigClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrigClOrderId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasUint32Qty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Qty);
      }
      if (HasUint32VisibleQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32VisibleQty);
      }
      if (HasUint32MinVisibleQty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32MinVisibleQty);
      }
      if (qty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (visibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisibleQty);
      }
      if (minVisibleQty_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinVisibleQty);
      }
      if (HasScaledLimitPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLimitPrice);
      }
      if (HasScaledStopPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledStopPrice);
      }
      if (HasActivationUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ActivationUtcTime);
      }
      if (activationUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActivationUtcTimestamp);
      }
      if (HasRemoveActivationTime) {
        size += 1 + 1;
      }
      if (HasSuspensionUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SuspensionUtcTime);
      }
      if (suspensionUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuspensionUtcTimestamp);
      }
      if (HasRemoveSuspensionUtcTime) {
        size += 1 + 1;
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGoodThruDate) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruDate);
      }
      if (HasGoodThruUtcTime) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(GoodThruUtcTime);
      }
      if (goodThruUtcTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodThruUtcTimestamp);
      }
      if (HasObsoleteDiscretionaryOffset) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsoleteDiscretionaryOffset);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ModifyOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOrigClOrderId) {
        OrigClOrderId = other.OrigClOrderId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasUint32Qty) {
        Uint32Qty = other.Uint32Qty;
      }
      if (other.HasUint32VisibleQty) {
        Uint32VisibleQty = other.Uint32VisibleQty;
      }
      if (other.HasUint32MinVisibleQty) {
        Uint32MinVisibleQty = other.Uint32MinVisibleQty;
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          Qty = new global::Cqg.Decimal();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.visibleQty_ != null) {
        if (visibleQty_ == null) {
          VisibleQty = new global::Cqg.Decimal();
        }
        VisibleQty.MergeFrom(other.VisibleQty);
      }
      if (other.minVisibleQty_ != null) {
        if (minVisibleQty_ == null) {
          MinVisibleQty = new global::Cqg.Decimal();
        }
        MinVisibleQty.MergeFrom(other.MinVisibleQty);
      }
      if (other.HasScaledLimitPrice) {
        ScaledLimitPrice = other.ScaledLimitPrice;
      }
      if (other.HasScaledStopPrice) {
        ScaledStopPrice = other.ScaledStopPrice;
      }
      if (other.HasActivationUtcTime) {
        ActivationUtcTime = other.ActivationUtcTime;
      }
      if (other.activationUtcTimestamp_ != null) {
        if (activationUtcTimestamp_ == null) {
          ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        ActivationUtcTimestamp.MergeFrom(other.ActivationUtcTimestamp);
      }
      if (other.HasRemoveActivationTime) {
        RemoveActivationTime = other.RemoveActivationTime;
      }
      if (other.HasSuspensionUtcTime) {
        SuspensionUtcTime = other.SuspensionUtcTime;
      }
      if (other.suspensionUtcTimestamp_ != null) {
        if (suspensionUtcTimestamp_ == null) {
          SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        SuspensionUtcTimestamp.MergeFrom(other.SuspensionUtcTimestamp);
      }
      if (other.HasRemoveSuspensionUtcTime) {
        RemoveSuspensionUtcTime = other.RemoveSuspensionUtcTime;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGoodThruDate) {
        GoodThruDate = other.GoodThruDate;
      }
      if (other.HasGoodThruUtcTime) {
        GoodThruUtcTime = other.GoodThruUtcTime;
      }
      if (other.goodThruUtcTimestamp_ != null) {
        if (goodThruUtcTimestamp_ == null) {
          GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        GoodThruUtcTimestamp.MergeFrom(other.GoodThruUtcTimestamp);
      }
      if (other.HasObsoleteDiscretionaryOffset) {
        ObsoleteDiscretionaryOffset = other.ObsoleteDiscretionaryOffset;
      }
      extraAttributes_.Add(other.extraAttributes_);
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 56: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 64: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 72: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 88: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 96: {
            RemoveActivationTime = input.ReadBool();
            break;
          }
          case 104: {
            SuspensionUtcTime = input.ReadSInt64();
            break;
          }
          case 112: {
            RemoveSuspensionUtcTime = input.ReadBool();
            break;
          }
          case 120: {
            Duration = input.ReadUInt32();
            break;
          }
          case 128: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 136: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 146: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 154: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 162: {
            if (suspensionUtcTimestamp_ == null) {
              SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SuspensionUtcTimestamp);
            break;
          }
          case 170: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 176: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 186: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 194: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 202: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 210: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
          case 218: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            Uint32Qty = input.ReadUInt32();
            break;
          }
          case 56: {
            Uint32VisibleQty = input.ReadUInt32();
            break;
          }
          case 64: {
            Uint32MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 72: {
            ScaledLimitPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            ScaledStopPrice = input.ReadSInt64();
            break;
          }
          case 88: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 96: {
            RemoveActivationTime = input.ReadBool();
            break;
          }
          case 104: {
            SuspensionUtcTime = input.ReadSInt64();
            break;
          }
          case 112: {
            RemoveSuspensionUtcTime = input.ReadBool();
            break;
          }
          case 120: {
            Duration = input.ReadUInt32();
            break;
          }
          case 128: {
            GoodThruDate = input.ReadSInt64();
            break;
          }
          case 136: {
            GoodThruUtcTime = input.ReadSInt64();
            break;
          }
          case 146: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 154: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 162: {
            if (suspensionUtcTimestamp_ == null) {
              SuspensionUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(SuspensionUtcTimestamp);
            break;
          }
          case 170: {
            if (goodThruUtcTimestamp_ == null) {
              GoodThruUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(GoodThruUtcTimestamp);
            break;
          }
          case 176: {
            ObsoleteDiscretionaryOffset = input.ReadUInt32();
            break;
          }
          case 186: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 194: {
            if (visibleQty_ == null) {
              VisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(VisibleQty);
            break;
          }
          case 202: {
            if (minVisibleQty_ == null) {
              MinVisibleQty = new global::Cqg.Decimal();
            }
            input.ReadMessage(MinVisibleQty);
            break;
          }
          case 210: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
          case 218: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel order request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CancelOrder : pb::IMessage<CancelOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelOrder> _parser = new pb::MessageParser<CancelOrder>(() => new CancelOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CancelOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelOrder(CancelOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      origClOrderId_ = other.origClOrderId_;
      clOrderId_ = other.clOrderId_;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      extraAttributes_ = other.extraAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelOrder Clone() {
      return new CancelOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id assigned by server after last modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "orig_cl_order_id" field.</summary>
    public const int OrigClOrderIdFieldNumber = 3;
    private readonly static string OrigClOrderIdDefaultValue = "";

    private string origClOrderId_;
    /// <summary>
    /// This client order ID of the order to cancel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigClOrderId {
      get { return origClOrderId_ ?? OrigClOrderIdDefaultValue; }
      set {
        origClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orig_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigClOrderId {
      get { return origClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "orig_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigClOrderId() {
      origClOrderId_ = null;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 4;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of this cancel request.
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 5;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 6;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(58, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of order extra attributes, can be used to remove or modify existing or add new attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CancelOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CancelOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      if (OrigClOrderId != other.OrigClOrderId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOrigClOrderId) hash ^= OrigClOrderId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WhenUtcTimestamp);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WhenUtcTimestamp);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasOrigClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrigClOrderId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CancelOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOrigClOrderId) {
        OrigClOrderId = other.OrigClOrderId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      extraAttributes_.Add(other.extraAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 50: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 58: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 50: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 58: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specifies an account and what orders to use in the account.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AccountOrderFilter : pb::IMessage<AccountOrderFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountOrderFilter> _parser = new pb::MessageParser<AccountOrderFilter>(() => new AccountOrderFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccountOrderFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountOrderFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountOrderFilter(AccountOrderFilter other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      mine_ = other.mine_;
      suspended_ = other.suspended_;
      side_ = other.side_;
      contractId_ = other.contractId_;
      currentDayOnly_ = other.currentDayOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountOrderFilter Clone() {
      return new AccountOrderFilter(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "mine" field.</summary>
    public const int MineFieldNumber = 2;
    private readonly static bool MineDefaultValue = true;

    private bool mine_;
    /// <summary>
    /// Specifies either all orders in the account or just orders in the
    /// account associated with the trader sending the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mine {
      get { if ((_hasBits0 & 2) != 0) { return mine_; } else { return MineDefaultValue; } }
      set {
        _hasBits0 |= 2;
        mine_ = value;
      }
    }
    /// <summary>Gets whether the "mine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMine {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "mine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMine() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "suspended" field.</summary>
    public const int SuspendedFieldNumber = 3;
    private readonly static bool SuspendedDefaultValue = false;

    private bool suspended_;
    /// <summary>
    /// Specifies whether only suspended orders or all not suspended orders in the
    /// account associated with the trader sending the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Suspended {
      get { if ((_hasBits0 & 4) != 0) { return suspended_; } else { return SuspendedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        suspended_ = value;
      }
    }
    /// <summary>Gets whether the "suspended" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspended {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "suspended" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspended() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private readonly static uint SideDefaultValue = 0;

    private uint side_;
    /// <summary>
    /// Specifies whether only BUY orders or only SELL orders.
    /// This field is associated with Order.Side enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Side {
      get { if ((_hasBits0 & 8) != 0) { return side_; } else { return SideDefaultValue; } }
      set {
        _hasBits0 |= 8;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 5;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Use only orders of specified contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 16) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "current_day_only" field.</summary>
    public const int CurrentDayOnlyFieldNumber = 6;
    private readonly static bool CurrentDayOnlyDefaultValue = false;

    private bool currentDayOnly_;
    /// <summary>
    /// Specifies whether only order(s) expiring during the
    /// current/nearest session should be considered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CurrentDayOnly {
      get { if ((_hasBits0 & 32) != 0) { return currentDayOnly_; } else { return CurrentDayOnlyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        currentDayOnly_ = value;
      }
    }
    /// <summary>Gets whether the "current_day_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentDayOnly {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "current_day_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentDayOnly() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccountOrderFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccountOrderFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Mine != other.Mine) return false;
      if (Suspended != other.Suspended) return false;
      if (Side != other.Side) return false;
      if (ContractId != other.ContractId) return false;
      if (CurrentDayOnly != other.CurrentDayOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasMine) hash ^= Mine.GetHashCode();
      if (HasSuspended) hash ^= Suspended.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasCurrentDayOnly) hash ^= CurrentDayOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasMine) {
        output.WriteRawTag(16);
        output.WriteBool(Mine);
      }
      if (HasSuspended) {
        output.WriteRawTag(24);
        output.WriteBool(Suspended);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteUInt32(Side);
      }
      if (HasContractId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ContractId);
      }
      if (HasCurrentDayOnly) {
        output.WriteRawTag(48);
        output.WriteBool(CurrentDayOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasMine) {
        output.WriteRawTag(16);
        output.WriteBool(Mine);
      }
      if (HasSuspended) {
        output.WriteRawTag(24);
        output.WriteBool(Suspended);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteUInt32(Side);
      }
      if (HasContractId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ContractId);
      }
      if (HasCurrentDayOnly) {
        output.WriteRawTag(48);
        output.WriteBool(CurrentDayOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasMine) {
        size += 1 + 1;
      }
      if (HasSuspended) {
        size += 1 + 1;
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasCurrentDayOnly) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccountOrderFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasMine) {
        Mine = other.Mine;
      }
      if (other.HasSuspended) {
        Suspended = other.Suspended;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasCurrentDayOnly) {
        CurrentDayOnly = other.CurrentDayOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            Mine = input.ReadBool();
            break;
          }
          case 24: {
            Suspended = input.ReadBool();
            break;
          }
          case 32: {
            Side = input.ReadUInt32();
            break;
          }
          case 40: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 48: {
            CurrentDayOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            Mine = input.ReadBool();
            break;
          }
          case 24: {
            Suspended = input.ReadBool();
            break;
          }
          case 32: {
            Side = input.ReadUInt32();
            break;
          }
          case 40: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 48: {
            CurrentDayOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel all orders request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CancelAllOrders : pb::IMessage<CancelAllOrders>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelAllOrders> _parser = new pb::MessageParser<CancelAllOrders>(() => new CancelAllOrders());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CancelAllOrders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelAllOrders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelAllOrders(CancelAllOrders other) : this() {
      _hasBits0 = other._hasBits0;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      clOrderId_ = other.clOrderId_;
      accountOrderFilters_ = other.accountOrderFilters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CancelAllOrders Clone() {
      return new CancelAllOrders(this);
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 1;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 4;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 2;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of this cancel request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "account_order_filters" field.</summary>
    public const int AccountOrderFiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Order2.AccountOrderFilter> _repeated_accountOrderFilters_codec
        = pb::FieldCodec.ForMessage(26, global::Order2.AccountOrderFilter.Parser);
    private readonly pbc::RepeatedField<global::Order2.AccountOrderFilter> accountOrderFilters_ = new pbc::RepeatedField<global::Order2.AccountOrderFilter>();
    /// <summary>
    /// Specifies an account and what orders to cancel in the account.
    /// All orders that meet the criteria (account, mine, suspended etc.) will be canceled.
    /// At least one AccountOrderFilter should be present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.AccountOrderFilter> AccountOrderFilters {
      get { return accountOrderFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CancelAllOrders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CancelAllOrders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if(!accountOrderFilters_.Equals(other.accountOrderFilters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      hash ^= accountOrderFilters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWhenUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasClOrderId) {
        output.WriteRawTag(18);
        output.WriteString(ClOrderId);
      }
      accountOrderFilters_.WriteTo(output, _repeated_accountOrderFilters_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWhenUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasClOrderId) {
        output.WriteRawTag(18);
        output.WriteString(ClOrderId);
      }
      accountOrderFilters_.WriteTo(ref output, _repeated_accountOrderFilters_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      size += accountOrderFilters_.CalculateSize(_repeated_accountOrderFilters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CancelAllOrders other) {
      if (other == null) {
        return;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      accountOrderFilters_.Add(other.accountOrderFilters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 18: {
            ClOrderId = input.ReadString();
            break;
          }
          case 26: {
            accountOrderFilters_.AddEntriesFrom(input, _repeated_accountOrderFilters_codec);
            break;
          }
          case 34: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 18: {
            ClOrderId = input.ReadString();
            break;
          }
          case 26: {
            accountOrderFilters_.AddEntriesFrom(ref input, _repeated_accountOrderFilters_codec);
            break;
          }
          case 34: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Activate suspended (parked) order request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ActivateOrder : pb::IMessage<ActivateOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActivateOrder> _parser = new pb::MessageParser<ActivateOrder>(() => new ActivateOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ActivateOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActivateOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActivateOrder(ActivateOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      origClOrderId_ = other.origClOrderId_;
      clOrderId_ = other.clOrderId_;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      extraAttributes_ = other.extraAttributes_.Clone();
      executionSourceCode_ = other.executionSourceCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActivateOrder Clone() {
      return new ActivateOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id assigned by server after last modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "orig_cl_order_id" field.</summary>
    public const int OrigClOrderIdFieldNumber = 3;
    private readonly static string OrigClOrderIdDefaultValue = "";

    private string origClOrderId_;
    /// <summary>
    /// This client order ID of the order to activate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigClOrderId {
      get { return origClOrderId_ ?? OrigClOrderIdDefaultValue; }
      set {
        origClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orig_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigClOrderId {
      get { return origClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "orig_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigClOrderId() {
      origClOrderId_ = null;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 4;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of this activation request (will become new client order Id if activation is accepted).
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 5;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 6;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(58, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of order extra attributes, can be used to remove or modify existing or add new attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 8;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value of the operation.
    /// See Order.execution_source_code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ActivateOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ActivateOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      if (OrigClOrderId != other.OrigClOrderId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOrigClOrderId) hash ^= OrigClOrderId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WhenUtcTimestamp);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        output.WriteRawTag(66);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WhenUtcTimestamp);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        output.WriteRawTag(66);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasOrigClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrigClOrderId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (HasExecutionSourceCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ActivateOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOrigClOrderId) {
        OrigClOrderId = other.OrigClOrderId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      extraAttributes_.Add(other.extraAttributes_);
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 50: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 58: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
          case 66: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 50: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 58: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
          case 66: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Placement of a compound order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NewCompoundOrder : pb::IMessage<NewCompoundOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewCompoundOrder> _parser = new pb::MessageParser<NewCompoundOrder>(() => new NewCompoundOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NewCompoundOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewCompoundOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewCompoundOrder(NewCompoundOrder other) : this() {
      _hasBits0 = other._hasBits0;
      compoundOrder_ = other.compoundOrder_ != null ? other.compoundOrder_.Clone() : null;
      partialFillsHandling_ = other.partialFillsHandling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewCompoundOrder Clone() {
      return new NewCompoundOrder(this);
    }

    /// <summary>Field number for the "compound_order" field.</summary>
    public const int CompoundOrderFieldNumber = 1;
    private global::Order2.CompoundOrder compoundOrder_;
    /// <summary>
    /// Compound order to place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CompoundOrder CompoundOrder {
      get { return compoundOrder_; }
      set {
        compoundOrder_ = value;
      }
    }

    /// <summary>Field number for the "partial_fills_handling" field.</summary>
    public const int PartialFillsHandlingFieldNumber = 2;
    private readonly static bool PartialFillsHandlingDefaultValue = true;

    private bool partialFillsHandling_;
    /// <summary>
    /// Indicates whether compound order execution shall happen on a partial fill (true or omitted)
    /// or complete fill (false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PartialFillsHandling {
      get { if ((_hasBits0 & 1) != 0) { return partialFillsHandling_; } else { return PartialFillsHandlingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partialFillsHandling_ = value;
      }
    }
    /// <summary>Gets whether the "partial_fills_handling" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPartialFillsHandling {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "partial_fills_handling" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPartialFillsHandling() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NewCompoundOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NewCompoundOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CompoundOrder, other.CompoundOrder)) return false;
      if (PartialFillsHandling != other.PartialFillsHandling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (compoundOrder_ != null) hash ^= CompoundOrder.GetHashCode();
      if (HasPartialFillsHandling) hash ^= PartialFillsHandling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (compoundOrder_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CompoundOrder);
      }
      if (HasPartialFillsHandling) {
        output.WriteRawTag(16);
        output.WriteBool(PartialFillsHandling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (compoundOrder_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CompoundOrder);
      }
      if (HasPartialFillsHandling) {
        output.WriteRawTag(16);
        output.WriteBool(PartialFillsHandling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (compoundOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompoundOrder);
      }
      if (HasPartialFillsHandling) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NewCompoundOrder other) {
      if (other == null) {
        return;
      }
      if (other.compoundOrder_ != null) {
        if (compoundOrder_ == null) {
          CompoundOrder = new global::Order2.CompoundOrder();
        }
        CompoundOrder.MergeFrom(other.CompoundOrder);
      }
      if (other.HasPartialFillsHandling) {
        PartialFillsHandling = other.PartialFillsHandling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (compoundOrder_ == null) {
              CompoundOrder = new global::Order2.CompoundOrder();
            }
            input.ReadMessage(CompoundOrder);
            break;
          }
          case 16: {
            PartialFillsHandling = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (compoundOrder_ == null) {
              CompoundOrder = new global::Order2.CompoundOrder();
            }
            input.ReadMessage(CompoundOrder);
            break;
          }
          case 16: {
            PartialFillsHandling = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Compound order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CompoundOrder : pb::IMessage<CompoundOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CompoundOrder> _parser = new pb::MessageParser<CompoundOrder>(() => new CompoundOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CompoundOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrder(CompoundOrder other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      clCompoundId_ = other.clCompoundId_;
      compoundOrderEntries_ = other.compoundOrderEntries_.Clone();
      profitTickOffset_ = other.profitTickOffset_;
      lossTickOffset_ = other.lossTickOffset_;
      stopLimitTickOffset_ = other.stopLimitTickOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrder Clone() {
      return new CompoundOrder(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// This field is associated with Type enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cl_compound_id" field.</summary>
    public const int ClCompoundIdFieldNumber = 2;
    private readonly static string ClCompoundIdDefaultValue = "";

    private string clCompoundId_;
    /// <summary>
    /// ID of the compound order assigned by client.
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClCompoundId {
      get { return clCompoundId_ ?? ClCompoundIdDefaultValue; }
      set {
        clCompoundId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_compound_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClCompoundId {
      get { return clCompoundId_ != null; }
    }
    /// <summary>Clears the value of the "cl_compound_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClCompoundId() {
      clCompoundId_ = null;
    }

    /// <summary>Field number for the "compound_order_entries" field.</summary>
    public const int CompoundOrderEntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Order2.CompoundOrderEntry> _repeated_compoundOrderEntries_codec
        = pb::FieldCodec.ForMessage(26, global::Order2.CompoundOrderEntry.Parser);
    private readonly pbc::RepeatedField<global::Order2.CompoundOrderEntry> compoundOrderEntries_ = new pbc::RepeatedField<global::Order2.CompoundOrderEntry>();
    /// <summary>
    /// List of entires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.CompoundOrderEntry> CompoundOrderEntries {
      get { return compoundOrderEntries_; }
    }

    /// <summary>Field number for the "profit_tick_offset" field.</summary>
    public const int ProfitTickOffsetFieldNumber = 4;
    private readonly static int ProfitTickOffsetDefaultValue = 0;

    private int profitTickOffset_;
    /// <summary>
    /// Offset in ticks from fill price (variable ticks size is supported). New order price will be
    /// calculated as (fill price + offset) for buy master orders and (price - offset) for sell master orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProfitTickOffset {
      get { if ((_hasBits0 & 2) != 0) { return profitTickOffset_; } else { return ProfitTickOffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        profitTickOffset_ = value;
      }
    }
    /// <summary>Gets whether the "profit_tick_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfitTickOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "profit_tick_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfitTickOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "loss_tick_offset" field.</summary>
    public const int LossTickOffsetFieldNumber = 5;
    private readonly static int LossTickOffsetDefaultValue = 0;

    private int lossTickOffset_;
    /// <summary>
    /// Offset in ticks from fill price (variable ticks size is supported). New order price will be
    /// calculated as (fill price - offset) for buy master orders and (price + offset) for sell master orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LossTickOffset {
      get { if ((_hasBits0 & 4) != 0) { return lossTickOffset_; } else { return LossTickOffsetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lossTickOffset_ = value;
      }
    }
    /// <summary>Gets whether the "loss_tick_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLossTickOffset {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "loss_tick_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLossTickOffset() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stop_limit_tick_offset" field.</summary>
    public const int StopLimitTickOffsetFieldNumber = 6;
    private readonly static int StopLimitTickOffsetDefaultValue = 0;

    private int stopLimitTickOffset_;
    /// <summary>
    /// Offset in ticks from loss_tick_offset for stop limit orders (variable ticks size is supported).
    /// The offset determines the limit price for stop limit order after the stop price is hit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StopLimitTickOffset {
      get { if ((_hasBits0 & 8) != 0) { return stopLimitTickOffset_; } else { return StopLimitTickOffsetDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stopLimitTickOffset_ = value;
      }
    }
    /// <summary>Gets whether the "stop_limit_tick_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStopLimitTickOffset {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stop_limit_tick_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStopLimitTickOffset() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CompoundOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CompoundOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ClCompoundId != other.ClCompoundId) return false;
      if(!compoundOrderEntries_.Equals(other.compoundOrderEntries_)) return false;
      if (ProfitTickOffset != other.ProfitTickOffset) return false;
      if (LossTickOffset != other.LossTickOffset) return false;
      if (StopLimitTickOffset != other.StopLimitTickOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasClCompoundId) hash ^= ClCompoundId.GetHashCode();
      hash ^= compoundOrderEntries_.GetHashCode();
      if (HasProfitTickOffset) hash ^= ProfitTickOffset.GetHashCode();
      if (HasLossTickOffset) hash ^= LossTickOffset.GetHashCode();
      if (HasStopLimitTickOffset) hash ^= StopLimitTickOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasClCompoundId) {
        output.WriteRawTag(18);
        output.WriteString(ClCompoundId);
      }
      compoundOrderEntries_.WriteTo(output, _repeated_compoundOrderEntries_codec);
      if (HasProfitTickOffset) {
        output.WriteRawTag(32);
        output.WriteSInt32(ProfitTickOffset);
      }
      if (HasLossTickOffset) {
        output.WriteRawTag(40);
        output.WriteSInt32(LossTickOffset);
      }
      if (HasStopLimitTickOffset) {
        output.WriteRawTag(48);
        output.WriteSInt32(StopLimitTickOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasClCompoundId) {
        output.WriteRawTag(18);
        output.WriteString(ClCompoundId);
      }
      compoundOrderEntries_.WriteTo(ref output, _repeated_compoundOrderEntries_codec);
      if (HasProfitTickOffset) {
        output.WriteRawTag(32);
        output.WriteSInt32(ProfitTickOffset);
      }
      if (HasLossTickOffset) {
        output.WriteRawTag(40);
        output.WriteSInt32(LossTickOffset);
      }
      if (HasStopLimitTickOffset) {
        output.WriteRawTag(48);
        output.WriteSInt32(StopLimitTickOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasClCompoundId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClCompoundId);
      }
      size += compoundOrderEntries_.CalculateSize(_repeated_compoundOrderEntries_codec);
      if (HasProfitTickOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ProfitTickOffset);
      }
      if (HasLossTickOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LossTickOffset);
      }
      if (HasStopLimitTickOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StopLimitTickOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CompoundOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasClCompoundId) {
        ClCompoundId = other.ClCompoundId;
      }
      compoundOrderEntries_.Add(other.compoundOrderEntries_);
      if (other.HasProfitTickOffset) {
        ProfitTickOffset = other.ProfitTickOffset;
      }
      if (other.HasLossTickOffset) {
        LossTickOffset = other.LossTickOffset;
      }
      if (other.HasStopLimitTickOffset) {
        StopLimitTickOffset = other.StopLimitTickOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            ClCompoundId = input.ReadString();
            break;
          }
          case 26: {
            compoundOrderEntries_.AddEntriesFrom(input, _repeated_compoundOrderEntries_codec);
            break;
          }
          case 32: {
            ProfitTickOffset = input.ReadSInt32();
            break;
          }
          case 40: {
            LossTickOffset = input.ReadSInt32();
            break;
          }
          case 48: {
            StopLimitTickOffset = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            ClCompoundId = input.ReadString();
            break;
          }
          case 26: {
            compoundOrderEntries_.AddEntriesFrom(ref input, _repeated_compoundOrderEntries_codec);
            break;
          }
          case 32: {
            ProfitTickOffset = input.ReadSInt32();
            break;
          }
          case 40: {
            LossTickOffset = input.ReadSInt32();
            break;
          }
          case 48: {
            StopLimitTickOffset = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CompoundOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Type of the compound order.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Order Places Order.
        /// [Partial] fill of the first entry triggers [partial] placement of all other orders.
        /// </summary>
        [pbr::OriginalName("TYPE_OPO")] Opo = 1,
        /// <summary>
        /// Order Cancels Order. This type allows several compound order entires.
        /// [Partial] fill of any order triggers [partial] canceling of all other orders.
        /// </summary>
        [pbr::OriginalName("TYPE_OCO")] Oco = 2,
        /// <summary>
        /// A set of otherwise unrelated orders being placed in one action.
        /// </summary>
        [pbr::OriginalName("TYPE_INDEPENDENT")] Independent = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Use existing order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UseOrder : pb::IMessage<UseOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UseOrder> _parser = new pb::MessageParser<UseOrder>(() => new UseOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UseOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UseOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UseOrder(UseOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UseOrder Clone() {
      return new UseOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id of existing order assigned by server after last modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UseOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UseOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UseOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Entry of a compound order. Only one of optional fields has to be specified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CompoundOrderEntry : pb::IMessage<CompoundOrderEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CompoundOrderEntry> _parser = new pb::MessageParser<CompoundOrderEntry>(() => new CompoundOrderEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CompoundOrderEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderEntry(CompoundOrderEntry other) : this() {
      order_ = other.order_ != null ? other.order_.Clone() : null;
      compoundOrder_ = other.compoundOrder_ != null ? other.compoundOrder_.Clone() : null;
      useOrder_ = other.useOrder_ != null ? other.useOrder_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CompoundOrderEntry Clone() {
      return new CompoundOrderEntry(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private global::Order2.Order order_;
    /// <summary>
    /// Regular order entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "compound_order" field.</summary>
    public const int CompoundOrderFieldNumber = 2;
    private global::Order2.CompoundOrder compoundOrder_;
    /// <summary>
    /// Sub-compound order entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.CompoundOrder CompoundOrder {
      get { return compoundOrder_; }
      set {
        compoundOrder_ = value;
      }
    }

    /// <summary>Field number for the "use_order" field.</summary>
    public const int UseOrderFieldNumber = 3;
    private global::Order2.UseOrder useOrder_;
    /// <summary>
    /// Existing order entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.UseOrder UseOrder {
      get { return useOrder_; }
      set {
        useOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CompoundOrderEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CompoundOrderEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Order, other.Order)) return false;
      if (!object.Equals(CompoundOrder, other.CompoundOrder)) return false;
      if (!object.Equals(UseOrder, other.UseOrder)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (order_ != null) hash ^= Order.GetHashCode();
      if (compoundOrder_ != null) hash ^= CompoundOrder.GetHashCode();
      if (useOrder_ != null) hash ^= UseOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (order_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Order);
      }
      if (compoundOrder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CompoundOrder);
      }
      if (useOrder_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UseOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (order_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Order);
      }
      if (compoundOrder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CompoundOrder);
      }
      if (useOrder_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UseOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (compoundOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompoundOrder);
      }
      if (useOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseOrder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CompoundOrderEntry other) {
      if (other == null) {
        return;
      }
      if (other.order_ != null) {
        if (order_ == null) {
          Order = new global::Order2.Order();
        }
        Order.MergeFrom(other.Order);
      }
      if (other.compoundOrder_ != null) {
        if (compoundOrder_ == null) {
          CompoundOrder = new global::Order2.CompoundOrder();
        }
        CompoundOrder.MergeFrom(other.CompoundOrder);
      }
      if (other.useOrder_ != null) {
        if (useOrder_ == null) {
          UseOrder = new global::Order2.UseOrder();
        }
        UseOrder.MergeFrom(other.UseOrder);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 18: {
            if (compoundOrder_ == null) {
              CompoundOrder = new global::Order2.CompoundOrder();
            }
            input.ReadMessage(CompoundOrder);
            break;
          }
          case 26: {
            if (useOrder_ == null) {
              UseOrder = new global::Order2.UseOrder();
            }
            input.ReadMessage(UseOrder);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (order_ == null) {
              Order = new global::Order2.Order();
            }
            input.ReadMessage(Order);
            break;
          }
          case 18: {
            if (compoundOrder_ == null) {
              CompoundOrder = new global::Order2.CompoundOrder();
            }
            input.ReadMessage(CompoundOrder);
            break;
          }
          case 26: {
            if (useOrder_ == null) {
              UseOrder = new global::Order2.UseOrder();
            }
            input.ReadMessage(UseOrder);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Suspend (park) order request.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SuspendOrder : pb::IMessage<SuspendOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SuspendOrder> _parser = new pb::MessageParser<SuspendOrder>(() => new SuspendOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SuspendOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SuspendOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SuspendOrder(SuspendOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      origClOrderId_ = other.origClOrderId_;
      clOrderId_ = other.clOrderId_;
      whenUtcTime_ = other.whenUtcTime_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      activationUtcTime_ = other.activationUtcTime_;
      activationUtcTimestamp_ = other.activationUtcTimestamp_ != null ? other.activationUtcTimestamp_.Clone() : null;
      extraAttributes_ = other.extraAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SuspendOrder Clone() {
      return new SuspendOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id assigned by server after last modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "orig_cl_order_id" field.</summary>
    public const int OrigClOrderIdFieldNumber = 3;
    private readonly static string OrigClOrderIdDefaultValue = "";

    private string origClOrderId_;
    /// <summary>
    /// This client order ID of the order to suspend (park).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrigClOrderId {
      get { return origClOrderId_ ?? OrigClOrderIdDefaultValue; }
      set {
        origClOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orig_cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigClOrderId {
      get { return origClOrderId_ != null; }
    }
    /// <summary>Clears the value of the "orig_cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigClOrderId() {
      origClOrderId_ = null;
    }

    /// <summary>Field number for the "cl_order_id" field.</summary>
    public const int ClOrderIdFieldNumber = 4;
    private readonly static string ClOrderIdDefaultValue = "";

    private string clOrderId_;
    /// <summary>
    /// Client order ID of this suspension request (will become new client order Id if suspension is accepted).
    /// Maximum allowed length is 64 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClOrderId {
      get { return clOrderId_ ?? ClOrderIdDefaultValue; }
      set {
        clOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cl_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClOrderId {
      get { return clOrderId_ != null; }
    }
    /// <summary>Clears the value of the "cl_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClOrderId() {
      clOrderId_ = null;
    }

    /// <summary>Field number for the "when_utc_time" field.</summary>
    public const int WhenUtcTimeFieldNumber = 5;
    private readonly static long WhenUtcTimeDefaultValue = 0L;

    private long whenUtcTime_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// Note: use when_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WhenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return whenUtcTime_; } else { return WhenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        whenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "when_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "when_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 7;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when a modify request was submitted (UTC).
    /// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "activation_utc_time" field.</summary>
    public const int ActivationUtcTimeFieldNumber = 6;
    private readonly static long ActivationUtcTimeDefaultValue = 0L;

    private long activationUtcTime_;
    /// <summary>
    /// Time when the suspended (parked) order should automatically activate (UTC).
    /// Note: use activation_utc_timestamp field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActivationUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return activationUtcTime_; } else { return ActivationUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        activationUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "activation_utc_time" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActivationUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "activation_utc_time" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActivationUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "activation_utc_timestamp" field.</summary>
    public const int ActivationUtcTimestampFieldNumber = 8;
    private global::Google.Protobuf.Timestamp activationUtcTimestamp_;
    /// <summary>
    /// Time when the suspended (parked) order should automatically activate (UTC).
    /// If specified it's used instead of activation_utc_time field.
    /// If neither this nor activation_utc_time field is specified, order must be activated by ActivateOrder request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp ActivationUtcTimestamp {
      get { return activationUtcTimestamp_; }
      set {
        activationUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(74, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of order extra attributes, can be used to remove or modify existing or add new attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SuspendOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SuspendOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      if (OrigClOrderId != other.OrigClOrderId) return false;
      if (ClOrderId != other.ClOrderId) return false;
      if (WhenUtcTime != other.WhenUtcTime) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (ActivationUtcTime != other.ActivationUtcTime) return false;
      if (!object.Equals(ActivationUtcTimestamp, other.ActivationUtcTimestamp)) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOrigClOrderId) hash ^= OrigClOrderId.GetHashCode();
      if (HasClOrderId) hash ^= ClOrderId.GetHashCode();
      if (HasWhenUtcTime) hash ^= WhenUtcTime.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasActivationUtcTime) hash ^= ActivationUtcTime.GetHashCode();
      if (activationUtcTimestamp_ != null) hash ^= ActivationUtcTimestamp.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(48);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasOrigClOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrigClOrderId);
      }
      if (HasClOrderId) {
        output.WriteRawTag(34);
        output.WriteString(ClOrderId);
      }
      if (HasWhenUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(WhenUtcTime);
      }
      if (HasActivationUtcTime) {
        output.WriteRawTag(48);
        output.WriteSInt64(ActivationUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (activationUtcTimestamp_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ActivationUtcTimestamp);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasOrigClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrigClOrderId);
      }
      if (HasClOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrderId);
      }
      if (HasWhenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WhenUtcTime);
      }
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasActivationUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ActivationUtcTime);
      }
      if (activationUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivationUtcTimestamp);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SuspendOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOrigClOrderId) {
        OrigClOrderId = other.OrigClOrderId;
      }
      if (other.HasClOrderId) {
        ClOrderId = other.ClOrderId;
      }
      if (other.HasWhenUtcTime) {
        WhenUtcTime = other.WhenUtcTime;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasActivationUtcTime) {
        ActivationUtcTime = other.ActivationUtcTime;
      }
      if (other.activationUtcTimestamp_ != null) {
        if (activationUtcTimestamp_ == null) {
          ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        ActivationUtcTimestamp.MergeFrom(other.ActivationUtcTimestamp);
      }
      extraAttributes_.Add(other.extraAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 58: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 66: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 74: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            OrigClOrderId = input.ReadString();
            break;
          }
          case 34: {
            ClOrderId = input.ReadString();
            break;
          }
          case 40: {
            WhenUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            ActivationUtcTime = input.ReadSInt64();
            break;
          }
          case 58: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 66: {
            if (activationUtcTimestamp_ == null) {
              ActivationUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(ActivationUtcTimestamp);
            break;
          }
          case 74: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specify account and its positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AccountPositionFilter : pb::IMessage<AccountPositionFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountPositionFilter> _parser = new pb::MessageParser<AccountPositionFilter>(() => new AccountPositionFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccountPositionFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPositionFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPositionFilter(AccountPositionFilter other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      contractId_ = other.contractId_;
      isShort_ = other.isShort_;
      currentDayOnly_ = other.currentDayOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPositionFilter Clone() {
      return new AccountPositionFilter(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Id of an account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server side contract id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 2) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_short" field.</summary>
    public const int IsShortFieldNumber = 3;
    private readonly static bool IsShortDefaultValue = false;

    private bool isShort_;
    /// <summary>
    /// Specifies whether only short (true) or only long (false) positions should be selected.
    /// If not specified, both short and long positions will be selected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsShort {
      get { if ((_hasBits0 & 4) != 0) { return isShort_; } else { return IsShortDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isShort_ = value;
      }
    }
    /// <summary>Gets whether the "is_short" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsShort {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_short" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsShort() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "current_day_only" field.</summary>
    public const int CurrentDayOnlyFieldNumber = 4;
    private readonly static bool CurrentDayOnlyDefaultValue = false;

    private bool currentDayOnly_;
    /// <summary>
    /// Specifies whether only positions of current day (true)
    /// or only positions of previous days (false) should be selected.
    /// If not specified, positions of current and previous day(s) will be selected.
    /// Should be used only if instrument supports explicit close for positions.
    /// If specified, and any instrument not supporting explicit close matches this filter,
    /// ServerMsg.OrderRequestReject is sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CurrentDayOnly {
      get { if ((_hasBits0 & 8) != 0) { return currentDayOnly_; } else { return CurrentDayOnlyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentDayOnly_ = value;
      }
    }
    /// <summary>Gets whether the "current_day_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentDayOnly {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "current_day_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentDayOnly() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccountPositionFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccountPositionFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (ContractId != other.ContractId) return false;
      if (IsShort != other.IsShort) return false;
      if (CurrentDayOnly != other.CurrentDayOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasIsShort) hash ^= IsShort.GetHashCode();
      if (HasCurrentDayOnly) hash ^= CurrentDayOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContractId);
      }
      if (HasIsShort) {
        output.WriteRawTag(24);
        output.WriteBool(IsShort);
      }
      if (HasCurrentDayOnly) {
        output.WriteRawTag(32);
        output.WriteBool(CurrentDayOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteSInt32(AccountId);
      }
      if (HasContractId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContractId);
      }
      if (HasIsShort) {
        output.WriteRawTag(24);
        output.WriteBool(IsShort);
      }
      if (HasCurrentDayOnly) {
        output.WriteRawTag(32);
        output.WriteBool(CurrentDayOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasIsShort) {
        size += 1 + 1;
      }
      if (HasCurrentDayOnly) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccountPositionFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasIsShort) {
        IsShort = other.IsShort;
      }
      if (other.HasCurrentDayOnly) {
        CurrentDayOnly = other.CurrentDayOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsShort = input.ReadBool();
            break;
          }
          case 32: {
            CurrentDayOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 16: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsShort = input.ReadBool();
            break;
          }
          case 32: {
            CurrentDayOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Liquidate all open positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LiquidateAll : pb::IMessage<LiquidateAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiquidateAll> _parser = new pb::MessageParser<LiquidateAll>(() => new LiquidateAll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiquidateAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiquidateAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiquidateAll(LiquidateAll other) : this() {
      accountPositionFilters_ = other.accountPositionFilters_.Clone();
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      executionSourceCode_ = other.executionSourceCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiquidateAll Clone() {
      return new LiquidateAll(this);
    }

    /// <summary>Field number for the "account_position_filters" field.</summary>
    public const int AccountPositionFiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Order2.AccountPositionFilter> _repeated_accountPositionFilters_codec
        = pb::FieldCodec.ForMessage(10, global::Order2.AccountPositionFilter.Parser);
    private readonly pbc::RepeatedField<global::Order2.AccountPositionFilter> accountPositionFilters_ = new pbc::RepeatedField<global::Order2.AccountPositionFilter>();
    /// <summary>
    /// Accounts and positions to liquidate.
    /// At least one AccountPositionFilter should be specified, otherwise ServerMsg.OrderRequestReject is sent.
    /// Position matching any filter is to be liquidated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.AccountPositionFilter> AccountPositionFilters {
      get { return accountPositionFilters_; }
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 2;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when this request was submitted (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 3;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value of the operation.
    /// See Order.execution_source_code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiquidateAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiquidateAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountPositionFilters_.Equals(other.accountPositionFilters_)) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountPositionFilters_.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountPositionFilters_.WriteTo(output, _repeated_accountPositionFilters_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(26);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountPositionFilters_.WriteTo(ref output, _repeated_accountPositionFilters_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(26);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += accountPositionFilters_.CalculateSize(_repeated_accountPositionFilters_codec);
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiquidateAll other) {
      if (other == null) {
        return;
      }
      accountPositionFilters_.Add(other.accountPositionFilters_);
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accountPositionFilters_.AddEntriesFrom(input, _repeated_accountPositionFilters_codec);
            break;
          }
          case 18: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 26: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accountPositionFilters_.AddEntriesFrom(ref input, _repeated_accountPositionFilters_codec);
            break;
          }
          case 18: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 26: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel all orders (including parked) and liquidate all open positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GoFlat : pb::IMessage<GoFlat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoFlat> _parser = new pb::MessageParser<GoFlat>(() => new GoFlat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GoFlat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GoFlat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GoFlat(GoFlat other) : this() {
      accountIds_ = other.accountIds_.Clone();
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      executionSourceCode_ = other.executionSourceCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GoFlat Clone() {
      return new GoFlat(this);
    }

    /// <summary>Field number for the "account_ids" field.</summary>
    public const int AccountIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_accountIds_codec
        = pb::FieldCodec.ForSInt32(8);
    private readonly pbc::RepeatedField<int> accountIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Id of an account. At least one should be specified, otherwise ServerMsg.OrderRequestReject is sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> AccountIds {
      get { return accountIds_; }
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 2;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when this request was submitted (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "execution_source_code" field.</summary>
    public const int ExecutionSourceCodeFieldNumber = 3;
    private readonly static string ExecutionSourceCodeDefaultValue = "";

    private string executionSourceCode_;
    /// <summary>
    /// FIA Execution Source Code value of the operation.
    /// See Order.execution_source_code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutionSourceCode {
      get { return executionSourceCode_ ?? ExecutionSourceCodeDefaultValue; }
      set {
        executionSourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execution_source_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutionSourceCode {
      get { return executionSourceCode_ != null; }
    }
    /// <summary>Clears the value of the "execution_source_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutionSourceCode() {
      executionSourceCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GoFlat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GoFlat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountIds_.Equals(other.accountIds_)) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (ExecutionSourceCode != other.ExecutionSourceCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountIds_.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (HasExecutionSourceCode) hash ^= ExecutionSourceCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountIds_.WriteTo(output, _repeated_accountIds_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(26);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountIds_.WriteTo(ref output, _repeated_accountIds_codec);
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        output.WriteRawTag(26);
        output.WriteString(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += accountIds_.CalculateSize(_repeated_accountIds_codec);
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (HasExecutionSourceCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionSourceCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GoFlat other) {
      if (other == null) {
        return;
      }
      accountIds_.Add(other.accountIds_);
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.HasExecutionSourceCode) {
        ExecutionSourceCode = other.ExecutionSourceCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
            break;
          }
          case 18: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 26: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(ref input, _repeated_accountIds_codec);
            break;
          }
          case 18: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 26: {
            ExecutionSourceCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request of order entitlements.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderEntitlementRequest : pb::IMessage<OrderEntitlementRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderEntitlementRequest> _parser = new pb::MessageParser<OrderEntitlementRequest>(() => new OrderEntitlementRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderEntitlementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementRequest(OrderEntitlementRequest other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementRequest Clone() {
      return new OrderEntitlementRequest(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server side contract id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Account ID in CQG trade routing system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderEntitlementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderEntitlementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderEntitlementRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with order entitlements.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderEntitlementReport : pb::IMessage<OrderEntitlementReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderEntitlementReport> _parser = new pb::MessageParser<OrderEntitlementReport>(() => new OrderEntitlementReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderEntitlementReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementReport(OrderEntitlementReport other) : this() {
      orderEntitlements_ = other.orderEntitlements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlementReport Clone() {
      return new OrderEntitlementReport(this);
    }

    /// <summary>Field number for the "order_entitlements" field.</summary>
    public const int OrderEntitlementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Order2.OrderEntitlement> _repeated_orderEntitlements_codec
        = pb::FieldCodec.ForMessage(10, global::Order2.OrderEntitlement.Parser);
    private readonly pbc::RepeatedField<global::Order2.OrderEntitlement> orderEntitlements_ = new pbc::RepeatedField<global::Order2.OrderEntitlement>();
    /// <summary>
    /// Set of order entitlements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.OrderEntitlement> OrderEntitlements {
      get { return orderEntitlements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderEntitlementReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderEntitlementReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orderEntitlements_.Equals(other.orderEntitlements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orderEntitlements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderEntitlements_.WriteTo(output, _repeated_orderEntitlements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderEntitlements_.WriteTo(ref output, _repeated_orderEntitlements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += orderEntitlements_.CalculateSize(_repeated_orderEntitlements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderEntitlementReport other) {
      if (other == null) {
        return;
      }
      orderEntitlements_.Add(other.orderEntitlements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderEntitlements_.AddEntriesFrom(input, _repeated_orderEntitlements_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderEntitlements_.AddEntriesFrom(ref input, _repeated_orderEntitlements_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Entitlements for order.
  /// For future compatibility unknown order types/durations/execution instructions should be ignored.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderEntitlement : pb::IMessage<OrderEntitlement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderEntitlement> _parser = new pb::MessageParser<OrderEntitlement>(() => new OrderEntitlement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderEntitlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlement(OrderEntitlement other) : this() {
      _hasBits0 = other._hasBits0;
      orderType_ = other.orderType_;
      isSynthetic_ = other.isSynthetic_;
      duration_ = other.duration_;
      execInstruction_ = other.execInstruction_;
      algoStrategyRequired_ = other.algoStrategyRequired_;
      algoStrategies_ = other.algoStrategies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderEntitlement Clone() {
      return new OrderEntitlement(this);
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 1;
    private readonly static uint OrderTypeDefaultValue = 0;

    private uint orderType_;
    /// <summary>
    /// Order type.
    /// This field is associated with Order.OrderType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OrderType {
      get { if ((_hasBits0 & 1) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_synthetic" field.</summary>
    public const int IsSyntheticFieldNumber = 2;
    private readonly static bool IsSyntheticDefaultValue = false;

    private bool isSynthetic_;
    /// <summary>
    /// Value indicating whether order_type may be executed synthetically by CQG.
    /// E.g. if is_synthetic is true and order_type is MKT, it means that there will be synthetic processing
    /// of Market order by CQG before the order is sent to the exchange, where Market order is not natively supported.
    /// This is an informational field. The Client cannot specify this field in an order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSynthetic {
      get { if ((_hasBits0 & 2) != 0) { return isSynthetic_; } else { return IsSyntheticDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isSynthetic_ = value;
      }
    }
    /// <summary>Gets whether the "is_synthetic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSynthetic {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_synthetic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSynthetic() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    /// <summary>
    /// Order duration.
    /// This field is associated with Order.Duration enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "exec_instruction" field.</summary>
    public const int ExecInstructionFieldNumber = 4;
    private readonly static uint ExecInstructionDefaultValue = 0;

    private uint execInstruction_;
    /// <summary>
    /// Order execution instruction.
    /// This field is associated with Order.ExecInstruction enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExecInstruction {
      get { if ((_hasBits0 & 8) != 0) { return execInstruction_; } else { return ExecInstructionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        execInstruction_ = value;
      }
    }
    /// <summary>Gets whether the "exec_instruction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecInstruction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "exec_instruction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecInstruction() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "algo_strategy_required" field.</summary>
    public const int AlgoStrategyRequiredFieldNumber = 5;
    private readonly static bool AlgoStrategyRequiredDefaultValue = false;

    private bool algoStrategyRequired_;
    /// <summary>
    /// Whether the algo strategy is required to be set for the order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AlgoStrategyRequired {
      get { if ((_hasBits0 & 16) != 0) { return algoStrategyRequired_; } else { return AlgoStrategyRequiredDefaultValue; } }
      set {
        _hasBits0 |= 16;
        algoStrategyRequired_ = value;
      }
    }
    /// <summary>Gets whether the "algo_strategy_required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgoStrategyRequired {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "algo_strategy_required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgoStrategyRequired() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "algo_strategies" field.</summary>
    public const int AlgoStrategiesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_algoStrategies_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> algoStrategies_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of algo strategies enabled for the order (abbreviations).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AlgoStrategies {
      get { return algoStrategies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderEntitlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderEntitlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if (IsSynthetic != other.IsSynthetic) return false;
      if (Duration != other.Duration) return false;
      if (ExecInstruction != other.ExecInstruction) return false;
      if (AlgoStrategyRequired != other.AlgoStrategyRequired) return false;
      if(!algoStrategies_.Equals(other.algoStrategies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      if (HasIsSynthetic) hash ^= IsSynthetic.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasExecInstruction) hash ^= ExecInstruction.GetHashCode();
      if (HasAlgoStrategyRequired) hash ^= AlgoStrategyRequired.GetHashCode();
      hash ^= algoStrategies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderType) {
        output.WriteRawTag(8);
        output.WriteUInt32(OrderType);
      }
      if (HasIsSynthetic) {
        output.WriteRawTag(16);
        output.WriteBool(IsSynthetic);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasExecInstruction) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExecInstruction);
      }
      if (HasAlgoStrategyRequired) {
        output.WriteRawTag(40);
        output.WriteBool(AlgoStrategyRequired);
      }
      algoStrategies_.WriteTo(output, _repeated_algoStrategies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderType) {
        output.WriteRawTag(8);
        output.WriteUInt32(OrderType);
      }
      if (HasIsSynthetic) {
        output.WriteRawTag(16);
        output.WriteBool(IsSynthetic);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasExecInstruction) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExecInstruction);
      }
      if (HasAlgoStrategyRequired) {
        output.WriteRawTag(40);
        output.WriteBool(AlgoStrategyRequired);
      }
      algoStrategies_.WriteTo(ref output, _repeated_algoStrategies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderType);
      }
      if (HasIsSynthetic) {
        size += 1 + 1;
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasExecInstruction) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExecInstruction);
      }
      if (HasAlgoStrategyRequired) {
        size += 1 + 1;
      }
      size += algoStrategies_.CalculateSize(_repeated_algoStrategies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderEntitlement other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      if (other.HasIsSynthetic) {
        IsSynthetic = other.IsSynthetic;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasExecInstruction) {
        ExecInstruction = other.ExecInstruction;
      }
      if (other.HasAlgoStrategyRequired) {
        AlgoStrategyRequired = other.AlgoStrategyRequired;
      }
      algoStrategies_.Add(other.algoStrategies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 16: {
            IsSynthetic = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            ExecInstruction = input.ReadUInt32();
            break;
          }
          case 40: {
            AlgoStrategyRequired = input.ReadBool();
            break;
          }
          case 50: {
            algoStrategies_.AddEntriesFrom(input, _repeated_algoStrategies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderType = input.ReadUInt32();
            break;
          }
          case 16: {
            IsSynthetic = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            ExecInstruction = input.ReadUInt32();
            break;
          }
          case 40: {
            AlgoStrategyRequired = input.ReadBool();
            break;
          }
          case 50: {
            algoStrategies_.AddEntriesFrom(ref input, _repeated_algoStrategies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cross order parameters.
  /// This message allows to report or register privately negotiated pre-agreed
  /// transactions with one or multiple counter parties. Matching at exchange can
  /// either immediately occur when the request is submitted as a dual-sided
  /// or will occur when the different counterparts have all replied
  /// to the cross order initiator (see ApproveOrder message).
  /// Examples of these transactions: cross orders, Approved Publication
  /// Arrangement (APA) and wholesale orders.
  /// Transaction type is chosen by specifying corresponding execution instruction
  /// (see Order.ExecInstruction). Note that some transaction types have various
  /// exchange specific custom parameters (e.g. see Order.extra_attribute,
  /// SideAllocation.extra_attributes and ApproveOrder.extra_attributes).
  /// All these transaction types are referred to as "cross orders" within the
  /// protocol for simplicity.
  ///
  /// Note that exchanges may support LegAllocation as independent children of a
  /// cross order. This is used when each leg is an independent trade, so submitting the
  /// cross order on a recognized strategy symbol is not possible. In this case, the
  /// cross order symbol is a exchange-specific placeholder agreed between client and server
  /// rather than a tradable symbol. Note: there are several required fields related to
  /// placeholder contract like "qty" and "price" in Order, CrossOrderParameters and
  /// SideAllocation messages. Client should fill these fields by some acceptable stub data,
  /// like qty = "1".
  ///
  /// Possible scenarios:
  /// 1) Dual-sided submission (no match process)
  ///    Initiator submits a cross order and specifies all participants involved
  ///    on buy and sell sides of the order; approve from the participants may be
  ///    required for some exchanges.
  ///    Two or more side allocations are provided for this type of cross order.
  /// 2) Single-sided submission
  ///    Each participant submits its own side (buy or sell) of a cross order.
  ///    Matching could be done with an associated identifier (see transaction_id
  ///    field) or with an approve request.
  ///    One side allocation is provided for this type of cross order.
  /// 3) Approved Publication Arrangement (APA)
  ///    Allows users to publish trade reports in all instruments subject to the
  ///    OTC publication requirement.
  ///    No side allocations are provided for this type of cross order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CrossOrderParameters : pb::IMessage<CrossOrderParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CrossOrderParameters> _parser = new pb::MessageParser<CrossOrderParameters>(() => new CrossOrderParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CrossOrderParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrossOrderParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrossOrderParameters(CrossOrderParameters other) : this() {
      _hasBits0 = other._hasBits0;
      sideAllocations_ = other.sideAllocations_.Clone();
      price_ = other.price_;
      transactionId_ = other.transactionId_;
      legAllocations_ = other.legAllocations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrossOrderParameters Clone() {
      return new CrossOrderParameters(this);
    }

    /// <summary>Field number for the "side_allocations" field.</summary>
    public const int SideAllocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Order2.SideAllocation> _repeated_sideAllocations_codec
        = pb::FieldCodec.ForMessage(10, global::Order2.SideAllocation.Parser);
    private readonly pbc::RepeatedField<global::Order2.SideAllocation> sideAllocations_ = new pbc::RepeatedField<global::Order2.SideAllocation>();
    /// <summary>
    /// Side allocations of the cross order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.SideAllocation> SideAllocations {
      get { return sideAllocations_; }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private readonly static double PriceDefaultValue = 0D;

    private double price_;
    /// <summary>
    /// Price of the cross order (in correct format).
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 3;
    private readonly static string TransactionIdDefaultValue = "";

    private string transactionId_;
    /// <summary>
    /// Optional ID that can be used to associate the single-sided 
    /// cross orders with the same transaction (used by Euronext exchange).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransactionId {
      get { return transactionId_ ?? TransactionIdDefaultValue; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "transaction_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransactionId {
      get { return transactionId_ != null; }
    }
    /// <summary>Clears the value of the "transaction_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransactionId() {
      transactionId_ = null;
    }

    /// <summary>Field number for the "leg_allocations" field.</summary>
    public const int LegAllocationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Order2.LegAllocation> _repeated_legAllocations_codec
        = pb::FieldCodec.ForMessage(34, global::Order2.LegAllocation.Parser);
    private readonly pbc::RepeatedField<global::Order2.LegAllocation> legAllocations_ = new pbc::RepeatedField<global::Order2.LegAllocation>();
    /// <summary>
    /// Leg allocations of the cross order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Order2.LegAllocation> LegAllocations {
      get { return legAllocations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CrossOrderParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CrossOrderParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sideAllocations_.Equals(other.sideAllocations_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (TransactionId != other.TransactionId) return false;
      if(!legAllocations_.Equals(other.legAllocations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sideAllocations_.GetHashCode();
      if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (HasTransactionId) hash ^= TransactionId.GetHashCode();
      hash ^= legAllocations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sideAllocations_.WriteTo(output, _repeated_sideAllocations_codec);
      if (HasPrice) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (HasTransactionId) {
        output.WriteRawTag(26);
        output.WriteString(TransactionId);
      }
      legAllocations_.WriteTo(output, _repeated_legAllocations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sideAllocations_.WriteTo(ref output, _repeated_sideAllocations_codec);
      if (HasPrice) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (HasTransactionId) {
        output.WriteRawTag(26);
        output.WriteString(TransactionId);
      }
      legAllocations_.WriteTo(ref output, _repeated_legAllocations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += sideAllocations_.CalculateSize(_repeated_sideAllocations_codec);
      if (HasPrice) {
        size += 1 + 8;
      }
      if (HasTransactionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      size += legAllocations_.CalculateSize(_repeated_legAllocations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CrossOrderParameters other) {
      if (other == null) {
        return;
      }
      sideAllocations_.Add(other.sideAllocations_);
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasTransactionId) {
        TransactionId = other.TransactionId;
      }
      legAllocations_.Add(other.legAllocations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sideAllocations_.AddEntriesFrom(input, _repeated_sideAllocations_codec);
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 26: {
            TransactionId = input.ReadString();
            break;
          }
          case 34: {
            legAllocations_.AddEntriesFrom(input, _repeated_legAllocations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sideAllocations_.AddEntriesFrom(ref input, _repeated_sideAllocations_codec);
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 26: {
            TransactionId = input.ReadString();
            break;
          }
          case 34: {
            legAllocations_.AddEntriesFrom(ref input, _repeated_legAllocations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Side allocation of the cross order.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SideAllocation : pb::IMessage<SideAllocation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SideAllocation> _parser = new pb::MessageParser<SideAllocation>(() => new SideAllocation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SideAllocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SideAllocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SideAllocation(SideAllocation other) : this() {
      _hasBits0 = other._hasBits0;
      sideId_ = other.sideId_;
      accountId_ = other.accountId_;
      externalAccount_ = other.externalAccount_ != null ? other.externalAccount_.Clone() : null;
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      side_ = other.side_;
      extraAttributes_ = other.extraAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SideAllocation Clone() {
      return new SideAllocation(this);
    }

    /// <summary>Field number for the "side_id" field.</summary>
    public const int SideIdFieldNumber = 1;
    private readonly static long SideIdDefaultValue = 0L;

    private long sideId_;
    /// <summary>
    /// Identifier of the side allocation record, this field is generated by
    /// server.
    /// Client should set this field to modify/approve existing side allocation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SideId {
      get { if ((_hasBits0 & 1) != 0) { return sideId_; } else { return SideIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sideId_ = value;
      }
    }
    /// <summary>Gets whether the "side_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSideId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "side_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSideId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// Either this or external_account field must be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "external_account" field.</summary>
    public const int ExternalAccountFieldNumber = 3;
    private global::Order2.ExternalAccount externalAccount_;
    /// <summary>
    /// Either this or account_id field must be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.ExternalAccount ExternalAccount {
      get { return externalAccount_; }
      set {
        externalAccount_ = value;
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 4;
    private global::Cqg.Decimal qty_;
    /// <summary>
    /// Allocation size.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 5;
    private readonly static uint SideDefaultValue = 0;

    private uint side_;
    /// <summary>
    /// Allocation side.
    /// This field is associated with Order.Side enum type.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Side {
      get { if ((_hasBits0 & 4) != 0) { return side_; } else { return SideDefaultValue; } }
      set {
        _hasBits0 |= 4;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(50, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of side allocation extra attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SideAllocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SideAllocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SideId != other.SideId) return false;
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(ExternalAccount, other.ExternalAccount)) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (Side != other.Side) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSideId) hash ^= SideId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (externalAccount_ != null) hash ^= ExternalAccount.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSideId) {
        output.WriteRawTag(8);
        output.WriteSInt64(SideId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (externalAccount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalAccount);
      }
      if (qty_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Qty);
      }
      if (HasSide) {
        output.WriteRawTag(40);
        output.WriteUInt32(Side);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSideId) {
        output.WriteRawTag(8);
        output.WriteSInt64(SideId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (externalAccount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalAccount);
      }
      if (qty_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Qty);
      }
      if (HasSide) {
        output.WriteRawTag(40);
        output.WriteUInt32(Side);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSideId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SideId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (externalAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalAccount);
      }
      if (qty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SideAllocation other) {
      if (other == null) {
        return;
      }
      if (other.HasSideId) {
        SideId = other.SideId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.externalAccount_ != null) {
        if (externalAccount_ == null) {
          ExternalAccount = new global::Order2.ExternalAccount();
        }
        ExternalAccount.MergeFrom(other.ExternalAccount);
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          Qty = new global::Cqg.Decimal();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      extraAttributes_.Add(other.extraAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SideId = input.ReadSInt64();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            if (externalAccount_ == null) {
              ExternalAccount = new global::Order2.ExternalAccount();
            }
            input.ReadMessage(ExternalAccount);
            break;
          }
          case 34: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 40: {
            Side = input.ReadUInt32();
            break;
          }
          case 50: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SideId = input.ReadSInt64();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 26: {
            if (externalAccount_ == null) {
              ExternalAccount = new global::Order2.ExternalAccount();
            }
            input.ReadMessage(ExternalAccount);
            break;
          }
          case 34: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 40: {
            Side = input.ReadUInt32();
            break;
          }
          case 50: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Leg allocation of the cross order
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LegAllocation : pb::IMessage<LegAllocation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LegAllocation> _parser = new pb::MessageParser<LegAllocation>(() => new LegAllocation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LegAllocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LegAllocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LegAllocation(LegAllocation other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      price_ = other.price_;
      side_ = other.side_;
      legAllocId_ = other.legAllocId_;
      tradeMatchId_ = other.tradeMatchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LegAllocation Clone() {
      return new LegAllocation(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Server side contract Id of the leg (see ContractMetadata message).
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 2;
    private global::Cqg.Decimal qty_;
    /// <summary>
    /// Size of the leg.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cqg.Decimal Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private readonly static double PriceDefaultValue = 0D;

    private double price_;
    /// <summary>
    /// Price of the leg (in correct format).
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private readonly static uint SideDefaultValue = 0;

    private uint side_;
    /// <summary>
    /// Side of the leg, for exchanges that support LegAllocation as independent
    /// child of CrossOrderParameters rather than child of SideAllocation.
    /// This field is associated with Order.Side enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Side {
      get { if ((_hasBits0 & 4) != 0) { return side_; } else { return SideDefaultValue; } }
      set {
        _hasBits0 |= 4;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "leg_alloc_id" field.</summary>
    public const int LegAllocIdFieldNumber = 5;
    private readonly static long LegAllocIdDefaultValue = 0L;

    private long legAllocId_;
    /// <summary>
    /// Identifier of the leg allocation record, this field is generated by server.
    /// Client may require to set this field to modify/approve existing leg allocation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LegAllocId {
      get { if ((_hasBits0 & 8) != 0) { return legAllocId_; } else { return LegAllocIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        legAllocId_ = value;
      }
    }
    /// <summary>Gets whether the "leg_alloc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLegAllocId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "leg_alloc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLegAllocId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trade_match_id" field.</summary>
    public const int TradeMatchIdFieldNumber = 6;
    private readonly static string TradeMatchIdDefaultValue = "";

    private string tradeMatchId_;
    /// <summary>
    /// Identifier assigned to a trade by a matching system.
    /// This field is only sent from server to client.
    /// Check if the field is supported for specific execution system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeMatchId {
      get { return tradeMatchId_ ?? TradeMatchIdDefaultValue; }
      set {
        tradeMatchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trade_match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeMatchId {
      get { return tradeMatchId_ != null; }
    }
    /// <summary>Clears the value of the "trade_match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeMatchId() {
      tradeMatchId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LegAllocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LegAllocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Side != other.Side) return false;
      if (LegAllocId != other.LegAllocId) return false;
      if (TradeMatchId != other.TradeMatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasLegAllocId) hash ^= LegAllocId.GetHashCode();
      if (HasTradeMatchId) hash ^= TradeMatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (qty_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Qty);
      }
      if (HasPrice) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteUInt32(Side);
      }
      if (HasLegAllocId) {
        output.WriteRawTag(40);
        output.WriteSInt64(LegAllocId);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(50);
        output.WriteString(TradeMatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (qty_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Qty);
      }
      if (HasPrice) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteUInt32(Side);
      }
      if (HasLegAllocId) {
        output.WriteRawTag(40);
        output.WriteSInt64(LegAllocId);
      }
      if (HasTradeMatchId) {
        output.WriteRawTag(50);
        output.WriteString(TradeMatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (qty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (HasPrice) {
        size += 1 + 8;
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (HasLegAllocId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LegAllocId);
      }
      if (HasTradeMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeMatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LegAllocation other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          Qty = new global::Cqg.Decimal();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasLegAllocId) {
        LegAllocId = other.LegAllocId;
      }
      if (other.HasTradeMatchId) {
        TradeMatchId = other.TradeMatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 32: {
            Side = input.ReadUInt32();
            break;
          }
          case 40: {
            LegAllocId = input.ReadSInt64();
            break;
          }
          case 50: {
            TradeMatchId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (qty_ == null) {
              Qty = new global::Cqg.Decimal();
            }
            input.ReadMessage(Qty);
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 32: {
            Side = input.ReadUInt32();
            break;
          }
          case 40: {
            LegAllocId = input.ReadSInt64();
            break;
          }
          case 50: {
            TradeMatchId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Account related information that is specific for the exchange and/or the 
  /// brokerage.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ExternalAccount : pb::IMessage<ExternalAccount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExternalAccount> _parser = new pb::MessageParser<ExternalAccount>(() => new ExternalAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExternalAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalAccount(ExternalAccount other) : this() {
      externalAccountNumber_ = other.externalAccountNumber_;
      accountType_ = other.accountType_;
      accountOrigin_ = other.accountOrigin_;
      giveUpMemberId_ = other.giveUpMemberId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalAccount Clone() {
      return new ExternalAccount(this);
    }

    /// <summary>Field number for the "external_account_number" field.</summary>
    public const int ExternalAccountNumberFieldNumber = 1;
    private readonly static string ExternalAccountNumberDefaultValue = "";

    private string externalAccountNumber_;
    /// <summary>
    /// Unique identifier of account within the exchange's Member to place order
    /// on it.
    /// This account can be external for CQG.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternalAccountNumber {
      get { return externalAccountNumber_ ?? ExternalAccountNumberDefaultValue; }
      set {
        externalAccountNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "external_account_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExternalAccountNumber {
      get { return externalAccountNumber_ != null; }
    }
    /// <summary>Clears the value of the "external_account_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExternalAccountNumber() {
      externalAccountNumber_ = null;
    }

    /// <summary>Field number for the "account_type" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private readonly static string AccountTypeDefaultValue = "";

    private string accountType_;
    /// <summary>
    /// Account type (aka Customer Type Indicator), values are specific per
    /// execution systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccountType {
      get { return accountType_ ?? AccountTypeDefaultValue; }
      set {
        accountType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "account_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountType {
      get { return accountType_ != null; }
    }
    /// <summary>Clears the value of the "account_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountType() {
      accountType_ = null;
    }

    /// <summary>Field number for the "account_origin" field.</summary>
    public const int AccountOriginFieldNumber = 3;
    private readonly static string AccountOriginDefaultValue = "";

    private string accountOrigin_;
    /// <summary>
    /// Account origin, values are specific per execution systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccountOrigin {
      get { return accountOrigin_ ?? AccountOriginDefaultValue; }
      set {
        accountOrigin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "account_origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountOrigin {
      get { return accountOrigin_ != null; }
    }
    /// <summary>Clears the value of the "account_origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountOrigin() {
      accountOrigin_ = null;
    }

    /// <summary>Field number for the "give_up_member_id" field.</summary>
    public const int GiveUpMemberIdFieldNumber = 4;
    private readonly static string GiveUpMemberIdDefaultValue = "";

    private string giveUpMemberId_;
    /// <summary>
    /// Member ID that 'takes up' this account on the target exchange.
    /// Should be considered only if account is 'give up'. Can be empty for
    /// 'give up' accounts too, means that Member is not specified for current
    /// account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GiveUpMemberId {
      get { return giveUpMemberId_ ?? GiveUpMemberIdDefaultValue; }
      set {
        giveUpMemberId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "give_up_member_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGiveUpMemberId {
      get { return giveUpMemberId_ != null; }
    }
    /// <summary>Clears the value of the "give_up_member_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGiveUpMemberId() {
      giveUpMemberId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExternalAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExternalAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExternalAccountNumber != other.ExternalAccountNumber) return false;
      if (AccountType != other.AccountType) return false;
      if (AccountOrigin != other.AccountOrigin) return false;
      if (GiveUpMemberId != other.GiveUpMemberId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExternalAccountNumber) hash ^= ExternalAccountNumber.GetHashCode();
      if (HasAccountType) hash ^= AccountType.GetHashCode();
      if (HasAccountOrigin) hash ^= AccountOrigin.GetHashCode();
      if (HasGiveUpMemberId) hash ^= GiveUpMemberId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExternalAccountNumber) {
        output.WriteRawTag(10);
        output.WriteString(ExternalAccountNumber);
      }
      if (HasAccountType) {
        output.WriteRawTag(18);
        output.WriteString(AccountType);
      }
      if (HasAccountOrigin) {
        output.WriteRawTag(26);
        output.WriteString(AccountOrigin);
      }
      if (HasGiveUpMemberId) {
        output.WriteRawTag(34);
        output.WriteString(GiveUpMemberId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExternalAccountNumber) {
        output.WriteRawTag(10);
        output.WriteString(ExternalAccountNumber);
      }
      if (HasAccountType) {
        output.WriteRawTag(18);
        output.WriteString(AccountType);
      }
      if (HasAccountOrigin) {
        output.WriteRawTag(26);
        output.WriteString(AccountOrigin);
      }
      if (HasGiveUpMemberId) {
        output.WriteRawTag(34);
        output.WriteString(GiveUpMemberId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasExternalAccountNumber) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalAccountNumber);
      }
      if (HasAccountType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountType);
      }
      if (HasAccountOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountOrigin);
      }
      if (HasGiveUpMemberId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiveUpMemberId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExternalAccount other) {
      if (other == null) {
        return;
      }
      if (other.HasExternalAccountNumber) {
        ExternalAccountNumber = other.ExternalAccountNumber;
      }
      if (other.HasAccountType) {
        AccountType = other.AccountType;
      }
      if (other.HasAccountOrigin) {
        AccountOrigin = other.AccountOrigin;
      }
      if (other.HasGiveUpMemberId) {
        GiveUpMemberId = other.GiveUpMemberId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExternalAccountNumber = input.ReadString();
            break;
          }
          case 18: {
            AccountType = input.ReadString();
            break;
          }
          case 26: {
            AccountOrigin = input.ReadString();
            break;
          }
          case 34: {
            GiveUpMemberId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExternalAccountNumber = input.ReadString();
            break;
          }
          case 18: {
            AccountType = input.ReadString();
            break;
          }
          case 26: {
            AccountOrigin = input.ReadString();
            break;
          }
          case 34: {
            GiveUpMemberId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This message is sent by contra to approve the alleged order of CROSS type.
  /// See CrossOrderParameters message for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveOrder : pb::IMessage<ApproveOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveOrder> _parser = new pb::MessageParser<ApproveOrder>(() => new ApproveOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOrder(ApproveOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      accountId_ = other.accountId_;
      action_ = other.action_;
      whenUtcTimestamp_ = other.whenUtcTimestamp_ != null ? other.whenUtcTimestamp_.Clone() : null;
      sideAllocation_ = other.sideAllocation_ != null ? other.sideAllocation_.Clone() : null;
      extraAttributes_ = other.extraAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOrder Clone() {
      return new ApproveOrder(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    /// <summary>
    /// Order id assigned by server after last modification.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private readonly static uint ActionDefaultValue = 0;

    private uint action_;
    /// <summary>
    /// This field is associated with Action enum type.
    /// APPROVE is used if this field is empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "when_utc_timestamp" field.</summary>
    public const int WhenUtcTimestampFieldNumber = 4;
    private global::Google.Protobuf.Timestamp whenUtcTimestamp_;
    /// <summary>
    /// Client side time when an approve order request was submitted (UTC).
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Timestamp WhenUtcTimestamp {
      get { return whenUtcTimestamp_; }
      set {
        whenUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "side_allocation" field.</summary>
    public const int SideAllocationFieldNumber = 5;
    private global::Order2.SideAllocation sideAllocation_;
    /// <summary>
    /// The contra is expected to provide its own side of the cross order in this
    /// field.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.SideAllocation SideAllocation {
      get { return sideAllocation_; }
      set {
        sideAllocation_ = value;
      }
    }

    /// <summary>Field number for the "extra_attributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Shared1.NamedValue> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForMessage(50, global::Shared1.NamedValue.Parser);
    private readonly pbc::RepeatedField<global::Shared1.NamedValue> extraAttributes_ = new pbc::RepeatedField<global::Shared1.NamedValue>();
    /// <summary>
    /// List of extra attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Shared1.NamedValue> ExtraAttributes {
      get { return extraAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (AccountId != other.AccountId) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(WhenUtcTimestamp, other.WhenUtcTimestamp)) return false;
      if (!object.Equals(SideAllocation, other.SideAllocation)) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (whenUtcTimestamp_ != null) hash ^= WhenUtcTimestamp.GetHashCode();
      if (sideAllocation_ != null) hash ^= SideAllocation.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasAction) {
        output.WriteRawTag(24);
        output.WriteUInt32(Action);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (sideAllocation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SideAllocation);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (HasAction) {
        output.WriteRawTag(24);
        output.WriteUInt32(Action);
      }
      if (whenUtcTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhenUtcTimestamp);
      }
      if (sideAllocation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SideAllocation);
      }
      extraAttributes_.WriteTo(ref output, _repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Action);
      }
      if (whenUtcTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhenUtcTimestamp);
      }
      if (sideAllocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SideAllocation);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.whenUtcTimestamp_ != null) {
        if (whenUtcTimestamp_ == null) {
          WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
        }
        WhenUtcTimestamp.MergeFrom(other.WhenUtcTimestamp);
      }
      if (other.sideAllocation_ != null) {
        if (sideAllocation_ == null) {
          SideAllocation = new global::Order2.SideAllocation();
        }
        SideAllocation.MergeFrom(other.SideAllocation);
      }
      extraAttributes_.Add(other.extraAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 24: {
            Action = input.ReadUInt32();
            break;
          }
          case 34: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 42: {
            if (sideAllocation_ == null) {
              SideAllocation = new global::Order2.SideAllocation();
            }
            input.ReadMessage(SideAllocation);
            break;
          }
          case 50: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
          case 24: {
            Action = input.ReadUInt32();
            break;
          }
          case 34: {
            if (whenUtcTimestamp_ == null) {
              WhenUtcTimestamp = new global::Google.Protobuf.Timestamp();
            }
            input.ReadMessage(WhenUtcTimestamp);
            break;
          }
          case 42: {
            if (sideAllocation_ == null) {
              SideAllocation = new global::Order2.SideAllocation();
            }
            input.ReadMessage(SideAllocation);
            break;
          }
          case 50: {
            extraAttributes_.AddEntriesFrom(ref input, _repeated_extraAttributes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ApproveOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Action {
        /// <summary>
        /// Action to approve the cross order.
        /// </summary>
        [pbr::OriginalName("APPROVE_ORDER_ACTION_APPROVE")] ApproveOrderActionApprove = 0,
        /// <summary>
        /// Action to reject the cross order.
        /// </summary>
        [pbr::OriginalName("APPROVE_ORDER_ACTION_REJECT")] ApproveOrderActionReject = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Allows to get an order status with all transactions.
  /// Works for current day and historical orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderStatusRequest : pb::IMessage<OrderStatusRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderStatusRequest> _parser = new pb::MessageParser<OrderStatusRequest>(() => new OrderStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusRequest(OrderStatusRequest other) : this() {
      _hasBits0 = other._hasBits0;
      chainOrderId_ = other.chainOrderId_;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusRequest Clone() {
      return new OrderStatusRequest(this);
    }

    /// <summary>Field number for the "chain_order_id" field.</summary>
    public const int ChainOrderIdFieldNumber = 1;
    private readonly static string ChainOrderIdDefaultValue = "";

    private string chainOrderId_;
    /// <summary>
    /// Chain order id from an order status.
    /// See OrderStatus.chain_order_id.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChainOrderId {
      get { return chainOrderId_ ?? ChainOrderIdDefaultValue; }
      set {
        chainOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "chain_order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChainOrderId {
      get { return chainOrderId_ != null; }
    }
    /// <summary>Clears the value of the "chain_order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChainOrderId() {
      chainOrderId_ = null;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    /// <summary>
    /// ID of the order's account.
    /// It is required field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChainOrderId != other.ChainOrderId) return false;
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChainOrderId) hash ^= ChainOrderId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChainOrderId) {
        output.WriteRawTag(10);
        output.WriteString(ChainOrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChainOrderId) {
        output.WriteRawTag(10);
        output.WriteString(ChainOrderId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteSInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChainOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainOrderId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasChainOrderId) {
        ChainOrderId = other.ChainOrderId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChainOrderId = input.ReadString();
            break;
          }
          case 16: {
            AccountId = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with requested information in OrderStatusRequest
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderStatusReport : pb::IMessage<OrderStatusReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderStatusReport> _parser = new pb::MessageParser<OrderStatusReport>(() => new OrderStatusReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderStatusReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Order2.Order2Reflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusReport(OrderStatusReport other) : this() {
      orderStatus_ = other.orderStatus_ != null ? other.orderStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusReport Clone() {
      return new OrderStatusReport(this);
    }

    /// <summary>Field number for the "order_status" field.</summary>
    public const int OrderStatusFieldNumber = 1;
    private global::Order2.OrderStatus orderStatus_;
    /// <summary>
    /// Order status with all transactions, if found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Order2.OrderStatus OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderStatusReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OrderStatus, other.OrderStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (orderStatus_ != null) hash ^= OrderStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (orderStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OrderStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (orderStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OrderStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (orderStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderStatusReport other) {
      if (other == null) {
        return;
      }
      if (other.orderStatus_ != null) {
        if (orderStatus_ == null) {
          OrderStatus = new global::Order2.OrderStatus();
        }
        OrderStatus.MergeFrom(other.OrderStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (orderStatus_ == null) {
              OrderStatus = new global::Order2.OrderStatus();
            }
            input.ReadMessage(OrderStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (orderStatus_ == null) {
              OrderStatus = new global::Order2.OrderStatus();
            }
            input.ReadMessage(OrderStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
