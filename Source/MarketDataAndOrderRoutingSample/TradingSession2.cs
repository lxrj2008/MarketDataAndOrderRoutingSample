// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/trading_session_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TradingSession2 {

  /// <summary>Holder for reflection information generated from WebAPI/trading_session_2.proto</summary>
  public static partial class TradingSession2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/trading_session_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradingSession2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XZWJBUEkvdHJhZGluZ19zZXNzaW9uXzIucHJvdG8SEXRyYWRpbmdfc2Vz",
            "c2lvbl8yImAKGVNlc3Npb25JbmZvcm1hdGlvblJlcXVlc3QSFwoPc2Vzc2lv",
            "bl9pbmZvX2lkGAEgAigREhUKDWZyb21fdXRjX3RpbWUYAiABKBISEwoLdG9f",
            "dXRjX3RpbWUYAyABKBIicAoYU2Vzc2lvbkluZm9ybWF0aW9uUmVwb3J0EhcK",
            "D3Nlc3Npb25faW5mb19pZBgBIAIoERI7ChBzZXNzaW9uX3NlZ21lbnRzGAIg",
            "AygLMiEudHJhZGluZ19zZXNzaW9uXzIuU2Vzc2lvblNlZ21lbnQimAIKDlNl",
            "c3Npb25TZWdtZW50EhoKEnNlc3Npb25fc2VnbWVudF9pZBgBIAIoEhIPCgdk",
            "ZWxldGVkGAIgASgIEhUKDWZyb21fdXRjX3RpbWUYAyABKBISEwoLdG9fdXRj",
            "X3RpbWUYBCABKBISPQoRc2Vzc2lvbl9zY2hlZHVsZXMYBSADKAsyIi50cmFk",
            "aW5nX3Nlc3Npb25fMi5TZXNzaW9uU2NoZWR1bGUSMwoMdHJhZGluZ19kYXlz",
            "GAYgAygLMh0udHJhZGluZ19zZXNzaW9uXzIuVHJhZGluZ0RheRI5Cg5kYWls",
            "eV9ob2xpZGF5cxgHIAMoCzIhLnRyYWRpbmdfc2Vzc2lvbl8yLlNlc3Npb25I",
            "b2xpZGF5IqUBCg9TZXNzaW9uU2NoZWR1bGUSDAoEbmFtZRgBIAIoCRIzCgxz",
            "ZXNzaW9uX2RheXMYAiADKAsyHS50cmFkaW5nX3Nlc3Npb25fMi5TZXNzaW9u",
            "RGF5EjsKEHNlc3Npb25faG9saWRheXMYAyADKAsyIS50cmFkaW5nX3Nlc3Np",
            "b25fMi5TZXNzaW9uSG9saWRheRISCgppc19wcmltYXJ5GAQgASgIIlYKClRy",
            "YWRpbmdEYXkSMgoMZGF5c19vZl93ZWVrGAEgAygOMhwudHJhZGluZ19zZXNz",
            "aW9uXzIuRGF5T2ZXZWVrEhQKDHN0YXJ0X29mZnNldBgCIAEoEiKfAQoKU2Vz",
            "c2lvbkRheRIyCgxkYXlzX29mX3dlZWsYASADKA4yHC50cmFkaW5nX3Nlc3Np",
            "b25fMi5EYXlPZldlZWsSFwoPcHJlX29wZW5fb2Zmc2V0GAIgASgSEhMKC29w",
            "ZW5fb2Zmc2V0GAMgASgSEhQKDGNsb3NlX29mZnNldBgEIAEoEhIZChFwb3N0",
            "X2Nsb3NlX29mZnNldBgFIAEoEiI8Cg5TZXNzaW9uSG9saWRheRIUCgxob2xp",
            "ZGF5X2RhdGUYASACKBISFAoMaG9saWRheV9uYW1lGAIgAigJIm0KF1Nlc3Np",
            "b25UaW1lUmFuZ2VSZXF1ZXN0EhcKD3Nlc3Npb25faW5mb19pZBgBIAIoERIV",
            "Cg1mcm9tX3V0Y190aW1lGAIgASgSEhMKC3RvX3V0Y190aW1lGAMgASgSEg0K",
            "BWNvdW50GAQgASgNIm0KFlNlc3Npb25UaW1lUmFuZ2VSZXBvcnQSQAoTc2Vz",
            "c2lvbl90aW1lX3JhbmdlcxgBIAMoCzIjLnRyYWRpbmdfc2Vzc2lvbl8yLlNl",
            "c3Npb25UaW1lUmFuZ2USEQoJdHJ1bmNhdGVkGAIgASgIIqMBChBTZXNzaW9u",
            "VGltZVJhbmdlEhkKEXByZV9vcGVuX3V0Y190aW1lGAEgAigSEhUKDW9wZW5f",
            "dXRjX3RpbWUYAiACKBISFgoOY2xvc2VfdXRjX3RpbWUYAyACKBISGwoTcG9z",
            "dF9jbG9zZV91dGNfdGltZRgEIAIoEhISCgp0cmFkZV9kYXRlGAUgAigSEhQK",
            "DHNlc3Npb25fbmFtZRgGIAIoCSKKAQoaVHJhZGluZ0RheVRpbWVSYW5nZVJl",
            "cXVlc3QSFwoPc2Vzc2lvbl9pbmZvX2lkGAEgAigREhgKEGluY2x1ZGVfaG9s",
            "aWRheXMYAiABKAgSFQoNZnJvbV91dGNfdGltZRgDIAEoEhITCgt0b191dGNf",
            "dGltZRgEIAEoEhINCgVjb3VudBgFIAEoDSJ3ChlUcmFkaW5nRGF5VGltZVJh",
            "bmdlUmVwb3J0EkcKF3RyYWRpbmdfZGF5X3RpbWVfcmFuZ2VzGAEgAygLMiYu",
            "dHJhZGluZ19zZXNzaW9uXzIuVHJhZGluZ0RheVRpbWVSYW5nZRIRCgl0cnVu",
            "Y2F0ZWQYAiABKAgiVwoTVHJhZGluZ0RheVRpbWVSYW5nZRISCgp0cmFkZV9k",
            "YXRlGAEgAigSEhYKDnN0YXJ0X3V0Y190aW1lGAIgASgSEhQKDGVuZF91dGNf",
            "dGltZRgDIAEoEiq7AQoJRGF5T2ZXZWVrEhYKEkRBWV9PRl9XRUVLX1NVTkRB",
            "WRAAEhYKEkRBWV9PRl9XRUVLX01PTkRBWRABEhcKE0RBWV9PRl9XRUVLX1RV",
            "RVNEQVkQAhIZChVEQVlfT0ZfV0VFS19XRURORVNEQVkQAxIYChREQVlfT0Zf",
            "V0VFS19USFVSU0RBWRAEEhYKEkRBWV9PRl9XRUVLX0ZSSURBWRAFEhgKFERB",
            "WV9PRl9XRUVLX1NBVFVSREFZEAY="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TradingSession2.DayOfWeek), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionInformationRequest), global::TradingSession2.SessionInformationRequest.Parser, new[]{ "SessionInfoId", "FromUtcTime", "ToUtcTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionInformationReport), global::TradingSession2.SessionInformationReport.Parser, new[]{ "SessionInfoId", "SessionSegments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionSegment), global::TradingSession2.SessionSegment.Parser, new[]{ "SessionSegmentId", "Deleted", "FromUtcTime", "ToUtcTime", "SessionSchedules", "TradingDays", "DailyHolidays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionSchedule), global::TradingSession2.SessionSchedule.Parser, new[]{ "Name", "SessionDays", "SessionHolidays", "IsPrimary" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.TradingDay), global::TradingSession2.TradingDay.Parser, new[]{ "DaysOfWeek", "StartOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionDay), global::TradingSession2.SessionDay.Parser, new[]{ "DaysOfWeek", "PreOpenOffset", "OpenOffset", "CloseOffset", "PostCloseOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionHoliday), global::TradingSession2.SessionHoliday.Parser, new[]{ "HolidayDate", "HolidayName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionTimeRangeRequest), global::TradingSession2.SessionTimeRangeRequest.Parser, new[]{ "SessionInfoId", "FromUtcTime", "ToUtcTime", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionTimeRangeReport), global::TradingSession2.SessionTimeRangeReport.Parser, new[]{ "SessionTimeRanges", "Truncated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.SessionTimeRange), global::TradingSession2.SessionTimeRange.Parser, new[]{ "PreOpenUtcTime", "OpenUtcTime", "CloseUtcTime", "PostCloseUtcTime", "TradeDate", "SessionName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.TradingDayTimeRangeRequest), global::TradingSession2.TradingDayTimeRangeRequest.Parser, new[]{ "SessionInfoId", "IncludeHolidays", "FromUtcTime", "ToUtcTime", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.TradingDayTimeRangeReport), global::TradingSession2.TradingDayTimeRangeReport.Parser, new[]{ "TradingDayTimeRanges", "Truncated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSession2.TradingDayTimeRange), global::TradingSession2.TradingDayTimeRange.Parser, new[]{ "TradeDate", "StartUtcTime", "EndUtcTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Days of week enumeration.
  /// </summary>
  public enum DayOfWeek {
    [pbr::OriginalName("DAY_OF_WEEK_SUNDAY")] Sunday = 0,
    [pbr::OriginalName("DAY_OF_WEEK_MONDAY")] Monday = 1,
    [pbr::OriginalName("DAY_OF_WEEK_TUESDAY")] Tuesday = 2,
    [pbr::OriginalName("DAY_OF_WEEK_WEDNESDAY")] Wednesday = 3,
    [pbr::OriginalName("DAY_OF_WEEK_THURSDAY")] Thursday = 4,
    [pbr::OriginalName("DAY_OF_WEEK_FRIDAY")] Friday = 5,
    [pbr::OriginalName("DAY_OF_WEEK_SATURDAY")] Saturday = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Request for session information per instrument group.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionInformationRequest : pb::IMessage<SessionInformationRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionInformationRequest> _parser = new pb::MessageParser<SessionInformationRequest>(() => new SessionInformationRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationRequest(SessionInformationRequest other) : this() {
      _hasBits0 = other._hasBits0;
      sessionInfoId_ = other.sessionInfoId_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationRequest Clone() {
      return new SessionInformationRequest(this);
    }

    /// <summary>Field number for the "session_info_id" field.</summary>
    public const int SessionInfoIdFieldNumber = 1;
    private readonly static int SessionInfoIdDefaultValue = 0;

    private int sessionInfoId_;
    /// <summary>
    /// ID of a session information from contract meta-data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionInfoId {
      get { if ((_hasBits0 & 1) != 0) { return sessionInfoId_; } else { return SessionInfoIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sessionInfoId_ = value;
      }
    }
    /// <summary>Gets whether the "session_info_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionInfoId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session_info_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionInfoId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 2;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// UTC time from which session information is requested (e.g. if historical session times are necessary).
    /// Current time is used by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 3;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// UTC time up to which session information is requested (e.g. if future session times are necessary).
    /// Current time is used by default. This field must not be used with subscriptions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUtcTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionInfoId != other.SessionInfoId) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSessionInfoId) hash ^= SessionInfoId.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(ToUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(ToUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSessionInfoId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SessionInfoId);
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSessionInfoId) {
        SessionInfoId = other.SessionInfoId;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with session information.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionInformationReport : pb::IMessage<SessionInformationReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionInformationReport> _parser = new pb::MessageParser<SessionInformationReport>(() => new SessionInformationReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionInformationReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationReport(SessionInformationReport other) : this() {
      _hasBits0 = other._hasBits0;
      sessionInfoId_ = other.sessionInfoId_;
      sessionSegments_ = other.sessionSegments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionInformationReport Clone() {
      return new SessionInformationReport(this);
    }

    /// <summary>Field number for the "session_info_id" field.</summary>
    public const int SessionInfoIdFieldNumber = 1;
    private readonly static int SessionInfoIdDefaultValue = 0;

    private int sessionInfoId_;
    /// <summary>
    /// Session information ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionInfoId {
      get { if ((_hasBits0 & 1) != 0) { return sessionInfoId_; } else { return SessionInfoIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sessionInfoId_ = value;
      }
    }
    /// <summary>Gets whether the "session_info_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionInfoId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session_info_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionInfoId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "session_segments" field.</summary>
    public const int SessionSegmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionSegment> _repeated_sessionSegments_codec
        = pb::FieldCodec.ForMessage(18, global::TradingSession2.SessionSegment.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionSegment> sessionSegments_ = new pbc::RepeatedField<global::TradingSession2.SessionSegment>();
    /// <summary>
    /// List of session segment records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionSegment> SessionSegments {
      get { return sessionSegments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionInformationReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionInformationReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionInfoId != other.SessionInfoId) return false;
      if(!sessionSegments_.Equals(other.sessionSegments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSessionInfoId) hash ^= SessionInfoId.GetHashCode();
      hash ^= sessionSegments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      sessionSegments_.WriteTo(output, _repeated_sessionSegments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      sessionSegments_.WriteTo(ref output, _repeated_sessionSegments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSessionInfoId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SessionInfoId);
      }
      size += sessionSegments_.CalculateSize(_repeated_sessionSegments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionInformationReport other) {
      if (other == null) {
        return;
      }
      if (other.HasSessionInfoId) {
        SessionInfoId = other.SessionInfoId;
      }
      sessionSegments_.Add(other.sessionSegments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 18: {
            sessionSegments_.AddEntriesFrom(input, _repeated_sessionSegments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 18: {
            sessionSegments_.AddEntriesFrom(ref input, _repeated_sessionSegments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Session segment record.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionSegment : pb::IMessage<SessionSegment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionSegment> _parser = new pb::MessageParser<SessionSegment>(() => new SessionSegment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSegment(SessionSegment other) : this() {
      _hasBits0 = other._hasBits0;
      sessionSegmentId_ = other.sessionSegmentId_;
      deleted_ = other.deleted_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      sessionSchedules_ = other.sessionSchedules_.Clone();
      tradingDays_ = other.tradingDays_.Clone();
      dailyHolidays_ = other.dailyHolidays_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSegment Clone() {
      return new SessionSegment(this);
    }

    /// <summary>Field number for the "session_segment_id" field.</summary>
    public const int SessionSegmentIdFieldNumber = 1;
    private readonly static long SessionSegmentIdDefaultValue = 0L;

    private long sessionSegmentId_;
    /// <summary>
    /// Session segment ID useful for updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SessionSegmentId {
      get { if ((_hasBits0 & 1) != 0) { return sessionSegmentId_; } else { return SessionSegmentIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sessionSegmentId_ = value;
      }
    }
    /// <summary>Gets whether the "session_segment_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionSegmentId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session_segment_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionSegmentId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 2;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Session group is deleted (used for updates).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 3;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// UTC time from which this session information is effective (inclusive).
    /// It is omitted if this session information was the same since Instrument group was introduced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 4;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// UTC time up to which this session information is effective (exclusive).
    /// It is omitted if this session information is not planned yet to be changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "session_schedules" field.</summary>
    public const int SessionSchedulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionSchedule> _repeated_sessionSchedules_codec
        = pb::FieldCodec.ForMessage(42, global::TradingSession2.SessionSchedule.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionSchedule> sessionSchedules_ = new pbc::RepeatedField<global::TradingSession2.SessionSchedule>();
    /// <summary>
    /// Schedule for all sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionSchedule> SessionSchedules {
      get { return sessionSchedules_; }
    }

    /// <summary>Field number for the "trading_days" field.</summary>
    public const int TradingDaysFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TradingSession2.TradingDay> _repeated_tradingDays_codec
        = pb::FieldCodec.ForMessage(50, global::TradingSession2.TradingDay.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.TradingDay> tradingDays_ = new pbc::RepeatedField<global::TradingSession2.TradingDay>();
    /// <summary>
    /// Trading day schedule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.TradingDay> TradingDays {
      get { return tradingDays_; }
    }

    /// <summary>Field number for the "daily_holidays" field.</summary>
    public const int DailyHolidaysFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionHoliday> _repeated_dailyHolidays_codec
        = pb::FieldCodec.ForMessage(58, global::TradingSession2.SessionHoliday.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionHoliday> dailyHolidays_ = new pbc::RepeatedField<global::TradingSession2.SessionHoliday>();
    /// <summary>
    /// Daily holidays. May have some sessions interday, but daily bar is not created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionHoliday> DailyHolidays {
      get { return dailyHolidays_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionSegmentId != other.SessionSegmentId) return false;
      if (Deleted != other.Deleted) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      if(!sessionSchedules_.Equals(other.sessionSchedules_)) return false;
      if(!tradingDays_.Equals(other.tradingDays_)) return false;
      if(!dailyHolidays_.Equals(other.dailyHolidays_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSessionSegmentId) hash ^= SessionSegmentId.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      hash ^= sessionSchedules_.GetHashCode();
      hash ^= tradingDays_.GetHashCode();
      hash ^= dailyHolidays_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSessionSegmentId) {
        output.WriteRawTag(8);
        output.WriteSInt64(SessionSegmentId);
      }
      if (HasDeleted) {
        output.WriteRawTag(16);
        output.WriteBool(Deleted);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      sessionSchedules_.WriteTo(output, _repeated_sessionSchedules_codec);
      tradingDays_.WriteTo(output, _repeated_tradingDays_codec);
      dailyHolidays_.WriteTo(output, _repeated_dailyHolidays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSessionSegmentId) {
        output.WriteRawTag(8);
        output.WriteSInt64(SessionSegmentId);
      }
      if (HasDeleted) {
        output.WriteRawTag(16);
        output.WriteBool(Deleted);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      sessionSchedules_.WriteTo(ref output, _repeated_sessionSchedules_codec);
      tradingDays_.WriteTo(ref output, _repeated_tradingDays_codec);
      dailyHolidays_.WriteTo(ref output, _repeated_dailyHolidays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSessionSegmentId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SessionSegmentId);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      size += sessionSchedules_.CalculateSize(_repeated_sessionSchedules_codec);
      size += tradingDays_.CalculateSize(_repeated_tradingDays_codec);
      size += dailyHolidays_.CalculateSize(_repeated_dailyHolidays_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionSegment other) {
      if (other == null) {
        return;
      }
      if (other.HasSessionSegmentId) {
        SessionSegmentId = other.SessionSegmentId;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      sessionSchedules_.Add(other.sessionSchedules_);
      tradingDays_.Add(other.tradingDays_);
      dailyHolidays_.Add(other.dailyHolidays_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionSegmentId = input.ReadSInt64();
            break;
          }
          case 16: {
            Deleted = input.ReadBool();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 42: {
            sessionSchedules_.AddEntriesFrom(input, _repeated_sessionSchedules_codec);
            break;
          }
          case 50: {
            tradingDays_.AddEntriesFrom(input, _repeated_tradingDays_codec);
            break;
          }
          case 58: {
            dailyHolidays_.AddEntriesFrom(input, _repeated_dailyHolidays_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SessionSegmentId = input.ReadSInt64();
            break;
          }
          case 16: {
            Deleted = input.ReadBool();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 42: {
            sessionSchedules_.AddEntriesFrom(ref input, _repeated_sessionSchedules_codec);
            break;
          }
          case 50: {
            tradingDays_.AddEntriesFrom(ref input, _repeated_tradingDays_codec);
            break;
          }
          case 58: {
            dailyHolidays_.AddEntriesFrom(ref input, _repeated_dailyHolidays_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Session schedule.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionSchedule : pb::IMessage<SessionSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionSchedule> _parser = new pb::MessageParser<SessionSchedule>(() => new SessionSchedule());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSchedule(SessionSchedule other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      sessionDays_ = other.sessionDays_.Clone();
      sessionHolidays_ = other.sessionHolidays_.Clone();
      isPrimary_ = other.isPrimary_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionSchedule Clone() {
      return new SessionSchedule(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Session name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "session_days" field.</summary>
    public const int SessionDaysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionDay> _repeated_sessionDays_codec
        = pb::FieldCodec.ForMessage(18, global::TradingSession2.SessionDay.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionDay> sessionDays_ = new pbc::RepeatedField<global::TradingSession2.SessionDay>();
    /// <summary>
    /// List of session times per day of week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionDay> SessionDays {
      get { return sessionDays_; }
    }

    /// <summary>Field number for the "session_holidays" field.</summary>
    public const int SessionHolidaysFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionHoliday> _repeated_sessionHolidays_codec
        = pb::FieldCodec.ForMessage(26, global::TradingSession2.SessionHoliday.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionHoliday> sessionHolidays_ = new pbc::RepeatedField<global::TradingSession2.SessionHoliday>();
    /// <summary>
    /// List of exchange specific dates when this session is closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionHoliday> SessionHolidays {
      get { return sessionHolidays_; }
    }

    /// <summary>Field number for the "is_primary" field.</summary>
    public const int IsPrimaryFieldNumber = 4;
    private readonly static bool IsPrimaryDefaultValue = false;

    private bool isPrimary_;
    /// <summary>
    /// True if this is a primary session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPrimary {
      get { if ((_hasBits0 & 1) != 0) { return isPrimary_; } else { return IsPrimaryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPrimary_ = value;
      }
    }
    /// <summary>Gets whether the "is_primary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPrimary {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_primary" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPrimary() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!sessionDays_.Equals(other.sessionDays_)) return false;
      if(!sessionHolidays_.Equals(other.sessionHolidays_)) return false;
      if (IsPrimary != other.IsPrimary) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= sessionDays_.GetHashCode();
      hash ^= sessionHolidays_.GetHashCode();
      if (HasIsPrimary) hash ^= IsPrimary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      sessionDays_.WriteTo(output, _repeated_sessionDays_codec);
      sessionHolidays_.WriteTo(output, _repeated_sessionHolidays_codec);
      if (HasIsPrimary) {
        output.WriteRawTag(32);
        output.WriteBool(IsPrimary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      sessionDays_.WriteTo(ref output, _repeated_sessionDays_codec);
      sessionHolidays_.WriteTo(ref output, _repeated_sessionHolidays_codec);
      if (HasIsPrimary) {
        output.WriteRawTag(32);
        output.WriteBool(IsPrimary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += sessionDays_.CalculateSize(_repeated_sessionDays_codec);
      size += sessionHolidays_.CalculateSize(_repeated_sessionHolidays_codec);
      if (HasIsPrimary) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionSchedule other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      sessionDays_.Add(other.sessionDays_);
      sessionHolidays_.Add(other.sessionHolidays_);
      if (other.HasIsPrimary) {
        IsPrimary = other.IsPrimary;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            sessionDays_.AddEntriesFrom(input, _repeated_sessionDays_codec);
            break;
          }
          case 26: {
            sessionHolidays_.AddEntriesFrom(input, _repeated_sessionHolidays_codec);
            break;
          }
          case 32: {
            IsPrimary = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            sessionDays_.AddEntriesFrom(ref input, _repeated_sessionDays_codec);
            break;
          }
          case 26: {
            sessionHolidays_.AddEntriesFrom(ref input, _repeated_sessionHolidays_codec);
            break;
          }
          case 32: {
            IsPrimary = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Trading day schedule.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingDay : pb::IMessage<TradingDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDay> _parser = new pb::MessageParser<TradingDay>(() => new TradingDay());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay(TradingDay other) : this() {
      _hasBits0 = other._hasBits0;
      daysOfWeek_ = other.daysOfWeek_.Clone();
      startOffset_ = other.startOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay Clone() {
      return new TradingDay(this);
    }

    /// <summary>Field number for the "days_of_week" field.</summary>
    public const int DaysOfWeekFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TradingSession2.DayOfWeek> _repeated_daysOfWeek_codec
        = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::TradingSession2.DayOfWeek) x);
    private readonly pbc::RepeatedField<global::TradingSession2.DayOfWeek> daysOfWeek_ = new pbc::RepeatedField<global::TradingSession2.DayOfWeek>();
    /// <summary>
    /// Days of week list with the same day schedule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.DayOfWeek> DaysOfWeek {
      get { return daysOfWeek_; }
    }

    /// <summary>Field number for the "start_offset" field.</summary>
    public const int StartOffsetFieldNumber = 2;
    private readonly static long StartOffsetDefaultValue = 0L;

    private long startOffset_;
    /// <summary>
    /// Trading day start offset in milliseconds from 00:00 UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartOffset {
      get { if ((_hasBits0 & 1) != 0) { return startOffset_; } else { return StartOffsetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startOffset_ = value;
      }
    }
    /// <summary>Gets whether the "start_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartOffset {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartOffset() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!daysOfWeek_.Equals(other.daysOfWeek_)) return false;
      if (StartOffset != other.StartOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= daysOfWeek_.GetHashCode();
      if (HasStartOffset) hash ^= StartOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      daysOfWeek_.WriteTo(output, _repeated_daysOfWeek_codec);
      if (HasStartOffset) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      daysOfWeek_.WriteTo(ref output, _repeated_daysOfWeek_codec);
      if (HasStartOffset) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += daysOfWeek_.CalculateSize(_repeated_daysOfWeek_codec);
      if (HasStartOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDay other) {
      if (other == null) {
        return;
      }
      daysOfWeek_.Add(other.daysOfWeek_);
      if (other.HasStartOffset) {
        StartOffset = other.StartOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            daysOfWeek_.AddEntriesFrom(input, _repeated_daysOfWeek_codec);
            break;
          }
          case 16: {
            StartOffset = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            daysOfWeek_.AddEntriesFrom(ref input, _repeated_daysOfWeek_codec);
            break;
          }
          case 16: {
            StartOffset = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Session times per day of week.
  /// All time offsets are in milliseconds from 00:00 UTC time of a specific date that corresponds to specific day of week.
  /// Offset values are optional and can be positive and negative
  /// (e.g. session can be completely 'pre-open' so only pre_open_offset and post_close_offset values are set).
  /// NOTE: Session times may not match exact exchange schedule especially if exchange have dynamic times
  /// (e.g. session starts after publishing a settlement, after underlying contract trade, etc.)
  /// or if exchange sends market data outside of session boundaries (e.g. late trades)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionDay : pb::IMessage<SessionDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionDay> _parser = new pb::MessageParser<SessionDay>(() => new SessionDay());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionDay(SessionDay other) : this() {
      _hasBits0 = other._hasBits0;
      daysOfWeek_ = other.daysOfWeek_.Clone();
      preOpenOffset_ = other.preOpenOffset_;
      openOffset_ = other.openOffset_;
      closeOffset_ = other.closeOffset_;
      postCloseOffset_ = other.postCloseOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionDay Clone() {
      return new SessionDay(this);
    }

    /// <summary>Field number for the "days_of_week" field.</summary>
    public const int DaysOfWeekFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TradingSession2.DayOfWeek> _repeated_daysOfWeek_codec
        = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::TradingSession2.DayOfWeek) x);
    private readonly pbc::RepeatedField<global::TradingSession2.DayOfWeek> daysOfWeek_ = new pbc::RepeatedField<global::TradingSession2.DayOfWeek>();
    /// <summary>
    /// Days of week list with the same day schedule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.DayOfWeek> DaysOfWeek {
      get { return daysOfWeek_; }
    }

    /// <summary>Field number for the "pre_open_offset" field.</summary>
    public const int PreOpenOffsetFieldNumber = 2;
    private readonly static long PreOpenOffsetDefaultValue = 0L;

    private long preOpenOffset_;
    /// <summary>
    /// Session pre-open time offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PreOpenOffset {
      get { if ((_hasBits0 & 1) != 0) { return preOpenOffset_; } else { return PreOpenOffsetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        preOpenOffset_ = value;
      }
    }
    /// <summary>Gets whether the "pre_open_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreOpenOffset {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pre_open_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreOpenOffset() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "open_offset" field.</summary>
    public const int OpenOffsetFieldNumber = 3;
    private readonly static long OpenOffsetDefaultValue = 0L;

    private long openOffset_;
    /// <summary>
    /// Session open time offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OpenOffset {
      get { if ((_hasBits0 & 2) != 0) { return openOffset_; } else { return OpenOffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        openOffset_ = value;
      }
    }
    /// <summary>Gets whether the "open_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "open_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "close_offset" field.</summary>
    public const int CloseOffsetFieldNumber = 4;
    private readonly static long CloseOffsetDefaultValue = 0L;

    private long closeOffset_;
    /// <summary>
    /// Session close time offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CloseOffset {
      get { if ((_hasBits0 & 4) != 0) { return closeOffset_; } else { return CloseOffsetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        closeOffset_ = value;
      }
    }
    /// <summary>Gets whether the "close_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCloseOffset {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "close_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCloseOffset() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "post_close_offset" field.</summary>
    public const int PostCloseOffsetFieldNumber = 5;
    private readonly static long PostCloseOffsetDefaultValue = 0L;

    private long postCloseOffset_;
    /// <summary>
    /// Session post-close time offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PostCloseOffset {
      get { if ((_hasBits0 & 8) != 0) { return postCloseOffset_; } else { return PostCloseOffsetDefaultValue; } }
      set {
        _hasBits0 |= 8;
        postCloseOffset_ = value;
      }
    }
    /// <summary>Gets whether the "post_close_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPostCloseOffset {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "post_close_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPostCloseOffset() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!daysOfWeek_.Equals(other.daysOfWeek_)) return false;
      if (PreOpenOffset != other.PreOpenOffset) return false;
      if (OpenOffset != other.OpenOffset) return false;
      if (CloseOffset != other.CloseOffset) return false;
      if (PostCloseOffset != other.PostCloseOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= daysOfWeek_.GetHashCode();
      if (HasPreOpenOffset) hash ^= PreOpenOffset.GetHashCode();
      if (HasOpenOffset) hash ^= OpenOffset.GetHashCode();
      if (HasCloseOffset) hash ^= CloseOffset.GetHashCode();
      if (HasPostCloseOffset) hash ^= PostCloseOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      daysOfWeek_.WriteTo(output, _repeated_daysOfWeek_codec);
      if (HasPreOpenOffset) {
        output.WriteRawTag(16);
        output.WriteSInt64(PreOpenOffset);
      }
      if (HasOpenOffset) {
        output.WriteRawTag(24);
        output.WriteSInt64(OpenOffset);
      }
      if (HasCloseOffset) {
        output.WriteRawTag(32);
        output.WriteSInt64(CloseOffset);
      }
      if (HasPostCloseOffset) {
        output.WriteRawTag(40);
        output.WriteSInt64(PostCloseOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      daysOfWeek_.WriteTo(ref output, _repeated_daysOfWeek_codec);
      if (HasPreOpenOffset) {
        output.WriteRawTag(16);
        output.WriteSInt64(PreOpenOffset);
      }
      if (HasOpenOffset) {
        output.WriteRawTag(24);
        output.WriteSInt64(OpenOffset);
      }
      if (HasCloseOffset) {
        output.WriteRawTag(32);
        output.WriteSInt64(CloseOffset);
      }
      if (HasPostCloseOffset) {
        output.WriteRawTag(40);
        output.WriteSInt64(PostCloseOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += daysOfWeek_.CalculateSize(_repeated_daysOfWeek_codec);
      if (HasPreOpenOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PreOpenOffset);
      }
      if (HasOpenOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OpenOffset);
      }
      if (HasCloseOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseOffset);
      }
      if (HasPostCloseOffset) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PostCloseOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionDay other) {
      if (other == null) {
        return;
      }
      daysOfWeek_.Add(other.daysOfWeek_);
      if (other.HasPreOpenOffset) {
        PreOpenOffset = other.PreOpenOffset;
      }
      if (other.HasOpenOffset) {
        OpenOffset = other.OpenOffset;
      }
      if (other.HasCloseOffset) {
        CloseOffset = other.CloseOffset;
      }
      if (other.HasPostCloseOffset) {
        PostCloseOffset = other.PostCloseOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            daysOfWeek_.AddEntriesFrom(input, _repeated_daysOfWeek_codec);
            break;
          }
          case 16: {
            PreOpenOffset = input.ReadSInt64();
            break;
          }
          case 24: {
            OpenOffset = input.ReadSInt64();
            break;
          }
          case 32: {
            CloseOffset = input.ReadSInt64();
            break;
          }
          case 40: {
            PostCloseOffset = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            daysOfWeek_.AddEntriesFrom(ref input, _repeated_daysOfWeek_codec);
            break;
          }
          case 16: {
            PreOpenOffset = input.ReadSInt64();
            break;
          }
          case 24: {
            OpenOffset = input.ReadSInt64();
            break;
          }
          case 32: {
            CloseOffset = input.ReadSInt64();
            break;
          }
          case 40: {
            PostCloseOffset = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Session holiday record.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionHoliday : pb::IMessage<SessionHoliday>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionHoliday> _parser = new pb::MessageParser<SessionHoliday>(() => new SessionHoliday());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionHoliday> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionHoliday() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionHoliday(SessionHoliday other) : this() {
      _hasBits0 = other._hasBits0;
      holidayDate_ = other.holidayDate_;
      holidayName_ = other.holidayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionHoliday Clone() {
      return new SessionHoliday(this);
    }

    /// <summary>Field number for the "holiday_date" field.</summary>
    public const int HolidayDateFieldNumber = 1;
    private readonly static long HolidayDateDefaultValue = 0L;

    private long holidayDate_;
    /// <summary>
    /// Date of a holiday.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HolidayDate {
      get { if ((_hasBits0 & 1) != 0) { return holidayDate_; } else { return HolidayDateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        holidayDate_ = value;
      }
    }
    /// <summary>Gets whether the "holiday_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHolidayDate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "holiday_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHolidayDate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "holiday_name" field.</summary>
    public const int HolidayNameFieldNumber = 2;
    private readonly static string HolidayNameDefaultValue = "";

    private string holidayName_;
    /// <summary>
    /// Name of a holiday.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HolidayName {
      get { return holidayName_ ?? HolidayNameDefaultValue; }
      set {
        holidayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "holiday_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHolidayName {
      get { return holidayName_ != null; }
    }
    /// <summary>Clears the value of the "holiday_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHolidayName() {
      holidayName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionHoliday);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionHoliday other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HolidayDate != other.HolidayDate) return false;
      if (HolidayName != other.HolidayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHolidayDate) hash ^= HolidayDate.GetHashCode();
      if (HasHolidayName) hash ^= HolidayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHolidayDate) {
        output.WriteRawTag(8);
        output.WriteSInt64(HolidayDate);
      }
      if (HasHolidayName) {
        output.WriteRawTag(18);
        output.WriteString(HolidayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHolidayDate) {
        output.WriteRawTag(8);
        output.WriteSInt64(HolidayDate);
      }
      if (HasHolidayName) {
        output.WriteRawTag(18);
        output.WriteString(HolidayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHolidayDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(HolidayDate);
      }
      if (HasHolidayName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HolidayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionHoliday other) {
      if (other == null) {
        return;
      }
      if (other.HasHolidayDate) {
        HolidayDate = other.HolidayDate;
      }
      if (other.HasHolidayName) {
        HolidayName = other.HolidayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HolidayDate = input.ReadSInt64();
            break;
          }
          case 18: {
            HolidayName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HolidayDate = input.ReadSInt64();
            break;
          }
          case 18: {
            HolidayName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for session open/close times.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionTimeRangeRequest : pb::IMessage<SessionTimeRangeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionTimeRangeRequest> _parser = new pb::MessageParser<SessionTimeRangeRequest>(() => new SessionTimeRangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionTimeRangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeRequest(SessionTimeRangeRequest other) : this() {
      _hasBits0 = other._hasBits0;
      sessionInfoId_ = other.sessionInfoId_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeRequest Clone() {
      return new SessionTimeRangeRequest(this);
    }

    /// <summary>Field number for the "session_info_id" field.</summary>
    public const int SessionInfoIdFieldNumber = 1;
    private readonly static int SessionInfoIdDefaultValue = 0;

    private int sessionInfoId_;
    /// <summary>
    /// ID of a session information from contract meta-data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionInfoId {
      get { if ((_hasBits0 & 1) != 0) { return sessionInfoId_; } else { return SessionInfoIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sessionInfoId_ = value;
      }
    }
    /// <summary>Gets whether the "session_info_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionInfoId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session_info_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionInfoId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 2;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// Exactly two of the next three fields have to be set:
    /// UTC time of start of the time range to get information for.
    /// Sessions with post-close time > from_utc_time are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 3;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// UTC time of end of the time range to get information for.
    /// Sessions with pre-open time &lt; to_utc_time are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    /// Number of session timeranges to return.
    /// If used with from_utc_time then it is the number of timeranges to return starting from that time.
    /// If used with to_utc_time then it is the number of timeranges to return preceding that time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 8) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionTimeRangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionTimeRangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionInfoId != other.SessionInfoId) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSessionInfoId) hash ^= SessionInfoId.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSessionInfoId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SessionInfoId);
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionTimeRangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSessionInfoId) {
        SessionInfoId = other.SessionInfoId;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This may come in multiple chunks if many items are reported.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionTimeRangeReport : pb::IMessage<SessionTimeRangeReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionTimeRangeReport> _parser = new pb::MessageParser<SessionTimeRangeReport>(() => new SessionTimeRangeReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionTimeRangeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeReport(SessionTimeRangeReport other) : this() {
      _hasBits0 = other._hasBits0;
      sessionTimeRanges_ = other.sessionTimeRanges_.Clone();
      truncated_ = other.truncated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRangeReport Clone() {
      return new SessionTimeRangeReport(this);
    }

    /// <summary>Field number for the "session_time_ranges" field.</summary>
    public const int SessionTimeRangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TradingSession2.SessionTimeRange> _repeated_sessionTimeRanges_codec
        = pb::FieldCodec.ForMessage(10, global::TradingSession2.SessionTimeRange.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.SessionTimeRange> sessionTimeRanges_ = new pbc::RepeatedField<global::TradingSession2.SessionTimeRange>();
    /// <summary>
    /// Session open/close times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.SessionTimeRange> SessionTimeRanges {
      get { return sessionTimeRanges_; }
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 2;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request was done for the range that was too long, so it was truncated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Truncated {
      get { if ((_hasBits0 & 1) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTruncated {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTruncated() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionTimeRangeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionTimeRangeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sessionTimeRanges_.Equals(other.sessionTimeRanges_)) return false;
      if (Truncated != other.Truncated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sessionTimeRanges_.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sessionTimeRanges_.WriteTo(output, _repeated_sessionTimeRanges_codec);
      if (HasTruncated) {
        output.WriteRawTag(16);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sessionTimeRanges_.WriteTo(ref output, _repeated_sessionTimeRanges_codec);
      if (HasTruncated) {
        output.WriteRawTag(16);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += sessionTimeRanges_.CalculateSize(_repeated_sessionTimeRanges_codec);
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionTimeRangeReport other) {
      if (other == null) {
        return;
      }
      sessionTimeRanges_.Add(other.sessionTimeRanges_);
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sessionTimeRanges_.AddEntriesFrom(input, _repeated_sessionTimeRanges_codec);
            break;
          }
          case 16: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sessionTimeRanges_.AddEntriesFrom(ref input, _repeated_sessionTimeRanges_codec);
            break;
          }
          case 16: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Session open/close times and trading day date.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionTimeRange : pb::IMessage<SessionTimeRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionTimeRange> _parser = new pb::MessageParser<SessionTimeRange>(() => new SessionTimeRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionTimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRange(SessionTimeRange other) : this() {
      _hasBits0 = other._hasBits0;
      preOpenUtcTime_ = other.preOpenUtcTime_;
      openUtcTime_ = other.openUtcTime_;
      closeUtcTime_ = other.closeUtcTime_;
      postCloseUtcTime_ = other.postCloseUtcTime_;
      tradeDate_ = other.tradeDate_;
      sessionName_ = other.sessionName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTimeRange Clone() {
      return new SessionTimeRange(this);
    }

    /// <summary>Field number for the "pre_open_utc_time" field.</summary>
    public const int PreOpenUtcTimeFieldNumber = 1;
    private readonly static long PreOpenUtcTimeDefaultValue = 0L;

    private long preOpenUtcTime_;
    /// <summary>
    /// UTC time of session pre-open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PreOpenUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return preOpenUtcTime_; } else { return PreOpenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        preOpenUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "pre_open_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreOpenUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pre_open_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreOpenUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "open_utc_time" field.</summary>
    public const int OpenUtcTimeFieldNumber = 2;
    private readonly static long OpenUtcTimeDefaultValue = 0L;

    private long openUtcTime_;
    /// <summary>
    /// UTC time of session open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OpenUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return openUtcTime_; } else { return OpenUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        openUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "open_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "open_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "close_utc_time" field.</summary>
    public const int CloseUtcTimeFieldNumber = 3;
    private readonly static long CloseUtcTimeDefaultValue = 0L;

    private long closeUtcTime_;
    /// <summary>
    /// UTC time of session close.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CloseUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return closeUtcTime_; } else { return CloseUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        closeUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "close_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCloseUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "close_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCloseUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "post_close_utc_time" field.</summary>
    public const int PostCloseUtcTimeFieldNumber = 4;
    private readonly static long PostCloseUtcTimeDefaultValue = 0L;

    private long postCloseUtcTime_;
    /// <summary>
    /// UTC time of session post close.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PostCloseUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return postCloseUtcTime_; } else { return PostCloseUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        postCloseUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "post_close_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPostCloseUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "post_close_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPostCloseUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 5;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trading date the session belongs to, local to exchange, time part is not used (set to 00:00).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeDate {
      get { if ((_hasBits0 & 16) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeDate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeDate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "session_name" field.</summary>
    public const int SessionNameFieldNumber = 6;
    private readonly static string SessionNameDefaultValue = "";

    private string sessionName_;
    /// <summary>
    /// Session name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionName {
      get { return sessionName_ ?? SessionNameDefaultValue; }
      set {
        sessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "session_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionName {
      get { return sessionName_ != null; }
    }
    /// <summary>Clears the value of the "session_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionName() {
      sessionName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionTimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionTimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PreOpenUtcTime != other.PreOpenUtcTime) return false;
      if (OpenUtcTime != other.OpenUtcTime) return false;
      if (CloseUtcTime != other.CloseUtcTime) return false;
      if (PostCloseUtcTime != other.PostCloseUtcTime) return false;
      if (TradeDate != other.TradeDate) return false;
      if (SessionName != other.SessionName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPreOpenUtcTime) hash ^= PreOpenUtcTime.GetHashCode();
      if (HasOpenUtcTime) hash ^= OpenUtcTime.GetHashCode();
      if (HasCloseUtcTime) hash ^= CloseUtcTime.GetHashCode();
      if (HasPostCloseUtcTime) hash ^= PostCloseUtcTime.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasSessionName) hash ^= SessionName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPreOpenUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(PreOpenUtcTime);
      }
      if (HasOpenUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(OpenUtcTime);
      }
      if (HasCloseUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(CloseUtcTime);
      }
      if (HasPostCloseUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(PostCloseUtcTime);
      }
      if (HasTradeDate) {
        output.WriteRawTag(40);
        output.WriteSInt64(TradeDate);
      }
      if (HasSessionName) {
        output.WriteRawTag(50);
        output.WriteString(SessionName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPreOpenUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(PreOpenUtcTime);
      }
      if (HasOpenUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(OpenUtcTime);
      }
      if (HasCloseUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(CloseUtcTime);
      }
      if (HasPostCloseUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(PostCloseUtcTime);
      }
      if (HasTradeDate) {
        output.WriteRawTag(40);
        output.WriteSInt64(TradeDate);
      }
      if (HasSessionName) {
        output.WriteRawTag(50);
        output.WriteString(SessionName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPreOpenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PreOpenUtcTime);
      }
      if (HasOpenUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(OpenUtcTime);
      }
      if (HasCloseUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseUtcTime);
      }
      if (HasPostCloseUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PostCloseUtcTime);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasSessionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionTimeRange other) {
      if (other == null) {
        return;
      }
      if (other.HasPreOpenUtcTime) {
        PreOpenUtcTime = other.PreOpenUtcTime;
      }
      if (other.HasOpenUtcTime) {
        OpenUtcTime = other.OpenUtcTime;
      }
      if (other.HasCloseUtcTime) {
        CloseUtcTime = other.CloseUtcTime;
      }
      if (other.HasPostCloseUtcTime) {
        PostCloseUtcTime = other.PostCloseUtcTime;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasSessionName) {
        SessionName = other.SessionName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PreOpenUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            OpenUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            CloseUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            PostCloseUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 50: {
            SessionName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PreOpenUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            OpenUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            CloseUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            PostCloseUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 50: {
            SessionName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for trading day open/close times.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingDayTimeRangeRequest : pb::IMessage<TradingDayTimeRangeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDayTimeRangeRequest> _parser = new pb::MessageParser<TradingDayTimeRangeRequest>(() => new TradingDayTimeRangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDayTimeRangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeRequest(TradingDayTimeRangeRequest other) : this() {
      _hasBits0 = other._hasBits0;
      sessionInfoId_ = other.sessionInfoId_;
      includeHolidays_ = other.includeHolidays_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeRequest Clone() {
      return new TradingDayTimeRangeRequest(this);
    }

    /// <summary>Field number for the "session_info_id" field.</summary>
    public const int SessionInfoIdFieldNumber = 1;
    private readonly static int SessionInfoIdDefaultValue = 0;

    private int sessionInfoId_;
    /// <summary>
    /// ID of a session information from contract meta-data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionInfoId {
      get { if ((_hasBits0 & 1) != 0) { return sessionInfoId_; } else { return SessionInfoIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sessionInfoId_ = value;
      }
    }
    /// <summary>Gets whether the "session_info_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSessionInfoId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session_info_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionInfoId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "include_holidays" field.</summary>
    public const int IncludeHolidaysFieldNumber = 2;
    private readonly static bool IncludeHolidaysDefaultValue = false;

    private bool includeHolidays_;
    /// <summary>
    /// True if holidays should be included in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IncludeHolidays {
      get { if ((_hasBits0 & 2) != 0) { return includeHolidays_; } else { return IncludeHolidaysDefaultValue; } }
      set {
        _hasBits0 |= 2;
        includeHolidays_ = value;
      }
    }
    /// <summary>Gets whether the "include_holidays" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIncludeHolidays {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "include_holidays" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIncludeHolidays() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 3;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// Exactly two of the next three fields have to be set:
    /// UTC time of start of the time range to get information for.
    /// Trading days with end time > from_utc_time are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 4;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// UTC time of end of the time range to get information for.
    /// Trading days with start time &lt; to_utc_time are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    /// Number of trading day timeranges to return.
    /// If used with from_utc_time then it is the number of timeranges to return starting from that time.
    /// If used with to_utc_time then it is the number of timeranges to return preceding that time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 16) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDayTimeRangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDayTimeRangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionInfoId != other.SessionInfoId) return false;
      if (IncludeHolidays != other.IncludeHolidays) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSessionInfoId) hash ^= SessionInfoId.GetHashCode();
      if (HasIncludeHolidays) hash ^= IncludeHolidays.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasIncludeHolidays) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeHolidays);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSessionInfoId) {
        output.WriteRawTag(8);
        output.WriteSInt32(SessionInfoId);
      }
      if (HasIncludeHolidays) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeHolidays);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSessionInfoId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SessionInfoId);
      }
      if (HasIncludeHolidays) {
        size += 1 + 1;
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDayTimeRangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSessionInfoId) {
        SessionInfoId = other.SessionInfoId;
      }
      if (other.HasIncludeHolidays) {
        IncludeHolidays = other.IncludeHolidays;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            IncludeHolidays = input.ReadBool();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SessionInfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            IncludeHolidays = input.ReadBool();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This may come in multiple chunks if many items are reported.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingDayTimeRangeReport : pb::IMessage<TradingDayTimeRangeReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDayTimeRangeReport> _parser = new pb::MessageParser<TradingDayTimeRangeReport>(() => new TradingDayTimeRangeReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDayTimeRangeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeReport(TradingDayTimeRangeReport other) : this() {
      _hasBits0 = other._hasBits0;
      tradingDayTimeRanges_ = other.tradingDayTimeRanges_.Clone();
      truncated_ = other.truncated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRangeReport Clone() {
      return new TradingDayTimeRangeReport(this);
    }

    /// <summary>Field number for the "trading_day_time_ranges" field.</summary>
    public const int TradingDayTimeRangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TradingSession2.TradingDayTimeRange> _repeated_tradingDayTimeRanges_codec
        = pb::FieldCodec.ForMessage(10, global::TradingSession2.TradingDayTimeRange.Parser);
    private readonly pbc::RepeatedField<global::TradingSession2.TradingDayTimeRange> tradingDayTimeRanges_ = new pbc::RepeatedField<global::TradingSession2.TradingDayTimeRange>();
    /// <summary>
    /// Trading day start/end times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TradingSession2.TradingDayTimeRange> TradingDayTimeRanges {
      get { return tradingDayTimeRanges_; }
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 2;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request was done for the range that was too long, so it was truncated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Truncated {
      get { if ((_hasBits0 & 1) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTruncated {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTruncated() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDayTimeRangeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDayTimeRangeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tradingDayTimeRanges_.Equals(other.tradingDayTimeRanges_)) return false;
      if (Truncated != other.Truncated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tradingDayTimeRanges_.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tradingDayTimeRanges_.WriteTo(output, _repeated_tradingDayTimeRanges_codec);
      if (HasTruncated) {
        output.WriteRawTag(16);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tradingDayTimeRanges_.WriteTo(ref output, _repeated_tradingDayTimeRanges_codec);
      if (HasTruncated) {
        output.WriteRawTag(16);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += tradingDayTimeRanges_.CalculateSize(_repeated_tradingDayTimeRanges_codec);
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDayTimeRangeReport other) {
      if (other == null) {
        return;
      }
      tradingDayTimeRanges_.Add(other.tradingDayTimeRanges_);
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tradingDayTimeRanges_.AddEntriesFrom(input, _repeated_tradingDayTimeRanges_codec);
            break;
          }
          case 16: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tradingDayTimeRanges_.AddEntriesFrom(ref input, _repeated_tradingDayTimeRanges_codec);
            break;
          }
          case 16: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Trading day start/end times and date.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TradingDayTimeRange : pb::IMessage<TradingDayTimeRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDayTimeRange> _parser = new pb::MessageParser<TradingDayTimeRange>(() => new TradingDayTimeRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDayTimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSession2.TradingSession2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRange(TradingDayTimeRange other) : this() {
      _hasBits0 = other._hasBits0;
      tradeDate_ = other.tradeDate_;
      startUtcTime_ = other.startUtcTime_;
      endUtcTime_ = other.endUtcTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDayTimeRange Clone() {
      return new TradingDayTimeRange(this);
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 1;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trading date, local to exchange, time part is not used (set to 00:00).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeDate {
      get { if ((_hasBits0 & 1) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeDate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeDate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_utc_time" field.</summary>
    public const int StartUtcTimeFieldNumber = 2;
    private readonly static long StartUtcTimeDefaultValue = 0L;

    private long startUtcTime_;
    /// <summary>
    /// The next two fields are not present for holidays,
    /// because there’s no trading day for these dates, hence no start and end times.
    /// UTC time of trading day start (first session pre-Open time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return startUtcTime_; } else { return StartUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "end_utc_time" field.</summary>
    public const int EndUtcTimeFieldNumber = 3;
    private readonly static long EndUtcTimeDefaultValue = 0L;

    private long endUtcTime_;
    /// <summary>
    /// UTC time of trading day end (last session post-Close time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return endUtcTime_; } else { return EndUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        endUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "end_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndUtcTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDayTimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDayTimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeDate != other.TradeDate) return false;
      if (StartUtcTime != other.StartUtcTime) return false;
      if (EndUtcTime != other.EndUtcTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasStartUtcTime) hash ^= StartUtcTime.GetHashCode();
      if (HasEndUtcTime) hash ^= EndUtcTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTradeDate) {
        output.WriteRawTag(8);
        output.WriteSInt64(TradeDate);
      }
      if (HasStartUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartUtcTime);
      }
      if (HasEndUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTradeDate) {
        output.WriteRawTag(8);
        output.WriteSInt64(TradeDate);
      }
      if (HasStartUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartUtcTime);
      }
      if (HasEndUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasStartUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartUtcTime);
      }
      if (HasEndUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndUtcTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDayTimeRange other) {
      if (other == null) {
        return;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasStartUtcTime) {
        StartUtcTime = other.StartUtcTime;
      }
      if (other.HasEndUtcTime) {
        EndUtcTime = other.EndUtcTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 16: {
            StartUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            EndUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 16: {
            StartUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            EndUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
